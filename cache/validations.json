{
  "version": "3.2",
  "log": [
    {
      "Address": {
        "src": "contracts/Staking.sol:268",
        "version": {
          "withMetadata": "4c93a81e7333021368d7d8e890fe1bb7d3674e0a4f46c9835b34516075ab9e3e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts/Staking.sol:629",
        "version": {
          "withMetadata": "daaaa6d6043741a52ffbec1170e262c3cad711158a4941592b0b05d1d39dfbf9",
          "withoutMetadata": "d78a0bcf22d7307371d3e285d40658a8aaec0d66a2da547a9fa574dd382a2736",
          "linkedWithoutMetadata": "d78a0bcf22d7307371d3e285d40658a8aaec0d66a2da547a9fa574dd382a2736"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math",
          "console"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "getDelay()",
          "getMinimumTime()",
          "getLastFee()",
          "getFee()",
          "getfeeOwner()",
          "getRewardRate()",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "setDelay(uint256)",
          "setMinimumTime(uint256)",
          "setFee(uint256)",
          "setfeeOwner(address)",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts/Staking.sol:656"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DELAY",
            "src": "contracts/Staking.sol:650"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MINIMUMTIME",
            "src": "contracts/Staking.sol:651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "FEE",
            "src": "contracts/Staking.sol:652"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeOwner",
            "src": "contracts/Staking.sol:653"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:641"
            },
            {
              "contract": "GrayblockStaking",
              "label": "LastFee",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:642"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:644"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:647"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:648"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_startTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:649"
            },
            {
              "contract": "GrayblockStaking",
              "label": "DELAY",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:650"
            },
            {
              "contract": "GrayblockStaking",
              "label": "MINIMUMTIME",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:651"
            },
            {
              "contract": "GrayblockStaking",
              "label": "FEE",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:652"
            },
            {
              "contract": "GrayblockStaking",
              "label": "feeOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:653"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)343": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Staking.sol:194",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts/Staking.sol:531",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Staking.sol:10",
        "version": {
          "withMetadata": "5145eac218c997b712d952cc96d42bb3bae7134f8baddee356245e20e6803b87",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts/Staking.sol:552",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/Staking.sol:556"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Staking.sol:553"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:554"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/Staking.sol:588",
        "version": {
          "withMetadata": "dee3464d0c8101172e554ca73547538f1e77ac4bbd099806e01defae6d78d3d9",
          "withoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5",
          "linkedWithoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/Staking.sol:592"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:589"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/Staking.sol:590"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/Staking.sol:488",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/Staking.sol:505"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:503"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/Staking.sol:412",
        "version": {
          "withMetadata": "d58ed97ec7f2f3b9c42ed84ea8d47bb6d88c0d252e4635a6351403a15a38cffa",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Staking.sol:48",
        "version": {
          "withMetadata": "1c99426abfe2392d3dab690d783dae40f9e772208f67857e0c66741de1b4d2ea",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "22ab50c6385aa6d0c318a53d16e43dfb9bf847a5e8844a576dff317fc6f7afeb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:62",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:68"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)57_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:20",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2179_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2179_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2179_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)1908_storage"
                }
              ]
            },
            "t_struct(Set)1908_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f3773c94be9e3bebdf44415d14cd44f7d25c47278987978439a01d843fb7a378",
          "withoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69",
          "linkedWithoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "fe2cfa4e1bc5987963be38935569cbd22a73bde36181b64b1ef65f1a27f62a18",
          "withoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4",
          "linkedWithoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "b9a102b555263ccacc6374ea1784ba1f8e422dd968f3e4134645feb6abb9ec66",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "549e275f6d5427be9ff66fb6410a636030e947b81184f62b10ff3ddfce2fb878",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDO": {
        "src": "contracts/IDO.sol:12",
        "version": {
          "withMetadata": "bfefc45501e3c77ca32a4f56a758b1b1552fdf02136b62e347e62410d3cdb483",
          "withoutMetadata": "fbc92292db8735b6110b0ce83cf0d8b8190003fc06a33dd29b5ba0cf4242514e",
          "linkedWithoutMetadata": "fbc92292db8735b6110b0ce83cf0d8b8190003fc06a33dd29b5ba0cf4242514e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "(address,address,uint256)",
          "buy(uint256)",
          "claim()",
          "returnTokens()",
          "withdrawTokens()",
          "tokensLeft()",
          "saleStatus()",
          "getOwner()",
          "getRatio()",
          "tradedTokens()",
          "projectTokens()",
          "setRatio(uint256)",
          "startSale(uint256,uint256)",
          "setCap(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IDO",
            "src": "contracts/IDO.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "IDO",
              "label": "_startTimeEpoch",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:14"
            },
            {
              "contract": "IDO",
              "label": "projectToken",
              "type": "t_contract(ERC20)1299",
              "src": "contracts/IDO.sol:15"
            },
            {
              "contract": "IDO",
              "label": "tradeToken",
              "type": "t_contract(ERC20)1299",
              "src": "contracts/IDO.sol:16"
            },
            {
              "contract": "IDO",
              "label": "ratio",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:17"
            },
            {
              "contract": "IDO",
              "label": "cap",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:18"
            },
            {
              "contract": "IDO",
              "label": "sale",
              "type": "t_bool",
              "src": "contracts/IDO.sol:19"
            },
            {
              "contract": "IDO",
              "label": "time",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:20"
            },
            {
              "contract": "IDO",
              "label": "goal",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:21"
            },
            {
              "contract": "IDO",
              "label": "totalTokens",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:22"
            },
            {
              "contract": "IDO",
              "label": "Invested",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/IDO.sol:23"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(ERC20)1299": {
              "label": "contract ERC20"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "contracts/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "4815418e5ed355343d79fc76033c071af9d81ece20526f5a5502b6aeb0cfdd50",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Token": {
        "src": "contracts/Token.sol:9",
        "version": {
          "withMetadata": "7e32d540afbb2ee2195d3c86d8231d05a0f4b3e34f254391957d249c6c5cf5d9",
          "withoutMetadata": "f76f39857897028c0d0f6655879f8b66f21aca2d03c18095b8898ce235de8151",
          "linkedWithoutMetadata": "f76f39857897028c0d0f6655879f8b66f21aca2d03c18095b8898ce235de8151"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts/Token.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Token",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Token.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IBEP20": {
        "src": "contracts/IBEP20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Exchange.sol:410",
        "version": {
          "withMetadata": "5387de9c3be04944ea46c35fecceb795614a99d2bf047416da2eecc0f726a476",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts/Exchange.sol:590",
        "version": {
          "withMetadata": "4c822672ef11c960525f7a67b44754c6eba3b77fafe38b4fa955166e42fd7cbd",
          "withoutMetadata": "2cef57f17794d9cace0c29b926bb2e40a1b73c84c4ca6c6db180b5f87ce88cb0",
          "linkedWithoutMetadata": "2cef57f17794d9cace0c29b926bb2e40a1b73c84c4ca6c6db180b5f87ce88cb0"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(string,string)",
          "getOwner()",
          "name()",
          "decimals()",
          "symbol()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts/Exchange.sol:613"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Exchange.sol:594"
            },
            {
              "contract": "BEP20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Exchange.sol:596"
            },
            {
              "contract": "BEP20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/Exchange.sol:598"
            },
            {
              "contract": "BEP20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/Exchange.sol:600"
            },
            {
              "contract": "BEP20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/Exchange.sol:601"
            },
            {
              "contract": "BEP20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts/Exchange.sol:602"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts/Exchange.sol:36",
        "version": {
          "withMetadata": "629f13a79dddb096d4a589d717c8516bfaf129854b497bca397da880e2043e43",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockPool": {
        "src": "contracts/Exchange.sol:877",
        "version": {
          "withMetadata": "8e4aa57c0754a199109710b8981377825ece7d10fafc147d5a58ea6cd973b4c2",
          "withoutMetadata": "42bbdaaaaade9b25a0b9d8323f6cc82b3a24de1fbf8b3eb4a2df2c063e69fa0d",
          "linkedWithoutMetadata": "42bbdaaaaade9b25a0b9d8323f6cc82b3a24de1fbf8b3eb4a2df2c063e69fa0d"
        },
        "inherit": [
          "BEP20",
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Math"
        ],
        "methods": [
          "(address,address)",
          "getAmountsOut(uint256,address,address)",
          "price(uint256,uint256,uint256)",
          "swap(uint256,address,address)",
          "getRatio(uint256,uint256,uint256,uint256,uint256,uint256)",
          "depositLiquidity(uint256,uint256,uint256,uint256,address,address)",
          "withdrawLiquidity(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockPool",
            "src": "contracts/Exchange.sol:892"
          },
          {
            "kind": "state-variable-assignment",
            "name": "LP_Cake",
            "src": "contracts/Exchange.sol:888"
          },
          {
            "kind": "state-variable-assignment",
            "name": "WBNB",
            "src": "contracts/Exchange.sol:890"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockPool",
              "label": "tokenA",
              "type": "t_address",
              "src": "contracts/Exchange.sol:880"
            },
            {
              "contract": "GrayblockPool",
              "label": "tokenB",
              "type": "t_address",
              "src": "contracts/Exchange.sol:881"
            },
            {
              "contract": "GrayblockPool",
              "label": "totalLiquidity",
              "type": "t_uint256",
              "src": "contracts/Exchange.sol:884"
            },
            {
              "contract": "GrayblockPool",
              "label": "liquidity",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Exchange.sol:885"
            },
            {
              "contract": "GrayblockPool",
              "label": "admins",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Exchange.sol:886"
            },
            {
              "contract": "GrayblockPool",
              "label": "LP_Cake",
              "type": "t_address",
              "src": "contracts/Exchange.sol:888"
            },
            {
              "contract": "GrayblockPool",
              "label": "WBNB",
              "type": "t_address",
              "src": "contracts/Exchange.sol:890"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/Exchange.sol:124",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Exchange.sol:5",
        "version": {
          "withMetadata": "36637acbffc38de601a576759066174d79b00ab0b2fa4ee5136d7f85af0fb98f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/Exchange.sol:64",
        "version": {
          "withMetadata": "cdb4a9f2871d1b47df9e605da5dd2b3e6e60636cc29f4e6806bc9332da5e57d2",
          "withoutMetadata": "d867b5c37838a05fb1504b6ef2f73f383a62fe2d10dabe19c719be83e63d1f08",
          "linkedWithoutMetadata": "d867b5c37838a05fb1504b6ef2f73f383a62fe2d10dabe19c719be83e63d1f08"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/Exchange.sol:72"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Exchange.sol:65"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Exchange.sol:233",
        "version": {
          "withMetadata": "878375bf297ce4782923f897b373c1cfca4045006964656608bec15b2453c96f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IERC20": {
        "src": "contracts/periphery/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeCallee": {
        "src": "contracts/core/interfaces/IPancakeCallee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "pancakeCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeERC20": {
        "src": "contracts/core/interfaces/IPancakeERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts/periphery/interfaces/IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts/periphery/interfaces/IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/periphery/interfaces/IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/periphery/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeOracleLibrary": {
        "src": "contracts/periphery/libraries/PancakeOracleLibrary.sol:6",
        "version": {
          "withMetadata": "22f7010a42b6f845b428ba4f388ae4be7fc260707aa06baffd93c2ecccc77af8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Migrations": {
        "src": "contracts/periphery/Migrations.sol:4",
        "version": {
          "withMetadata": "4747b061cca94b3b7875d9abd9f5609ce8d5fb218f5cc17d15c893d18408b099",
          "withoutMetadata": "d0a17d0bd77c8e9f0fb9f05e7ba40459c124176ccb7036a42e0c15c877b2ea5e",
          "linkedWithoutMetadata": "d0a17d0bd77c8e9f0fb9f05e7ba40459c124176ccb7036a42e0c15c877b2ea5e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCompleted(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Migrations",
            "src": "contracts/periphery/Migrations.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Migrations",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/periphery/Migrations.sol:5"
            },
            {
              "contract": "Migrations",
              "label": "last_completed_migration",
              "type": "t_uint256",
              "src": "contracts/periphery/Migrations.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Migrations": {
        "src": "contracts/core/Migration.sol:4",
        "version": {
          "withMetadata": "08750e2e49efc384fed0873fc6fd6ae72f76e2053d90f5849451e900e7ee54d0",
          "withoutMetadata": "d0a17d0bd77c8e9f0fb9f05e7ba40459c124176ccb7036a42e0c15c877b2ea5e",
          "linkedWithoutMetadata": "d0a17d0bd77c8e9f0fb9f05e7ba40459c124176ccb7036a42e0c15c877b2ea5e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCompleted(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Migrations",
            "src": "contracts/core/Migration.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Migrations",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/core/Migration.sol:5"
            },
            {
              "contract": "Migrations",
              "label": "last_completed_migration",
              "type": "t_uint256",
              "src": "contracts/core/Migration.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeMigrator": {
        "src": "contracts/periphery/PancakeMigrator.sol:61",
        "version": {
          "withMetadata": "05f02405c1963c9993aa34c3aa7b46ad05fb544db2dc8fcf74dff897ab95b5fe",
          "withoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551",
          "linkedWithoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551"
        },
        "inherit": [
          "IPancakeMigrator"
        ],
        "libraries": [
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeMigrator",
            "src": "contracts/periphery/PancakeMigrator.sol:65"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factoryV1",
            "src": "contracts/periphery/PancakeMigrator.sol:62"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/periphery/PancakeMigrator.sol:63"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/periphery/PancakeRouter01.sol:15",
        "version": {
          "withMetadata": "824e4af62e834d9a7cdf3b2e5b85bedef1e938738b4c24d1b34c32f396bbfa63",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter": {
        "src": "contracts/periphery/PancakeRouter.sol:63",
        "version": {
          "withMetadata": "b5ee037a664bb52e4edd2855c09f9d6159a82c8b936a8e5309de83eaf972210f",
          "withoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f",
          "linkedWithoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f"
        },
        "inherit": [
          "IPancakeRouter02",
          "IPancakeRouter01"
        ],
        "libraries": [
          "SafeMath",
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter",
            "src": "contracts/periphery/PancakeRouter.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter.sol:66"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter01": {
        "src": "contracts/periphery/PancakeRouter01.sol:62",
        "version": {
          "withMetadata": "403d8c7438633259ea0a6ded6665c9cdd76a73830f87bf6fb4dd1912fa11d524",
          "withoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a",
          "linkedWithoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a"
        },
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter01",
            "src": "contracts/periphery/PancakeRouter01.sol:71"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter01.sol:63"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter01.sol:64"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/periphery/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts/periphery/interfaces/IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts/periphery/interfaces/IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/periphery/interfaces/IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/periphery/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeLibrary": {
        "src": "contracts/periphery/libraries/PancakeLibrary.sol:7",
        "version": {
          "withMetadata": "0138e454bd5cb9c2c709c22efa6c8e7b353d913457c165076035dd3566acd9d5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/periphery/libraries/SafeMath.sol:5",
        "version": {
          "withMetadata": "87de537ecc9c1380eeb99537c917a2f30bbc730385d62acaa3ebeee80abf9703",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeCastMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/SafeCastMock.sol:5",
        "version": {
          "withMetadata": "b036f647581011f495260cfe0150eaca5f004d521c7eaf99e1a3a705d305fbbb",
          "withoutMetadata": "79d736309c0e898beb9565b572340aae6d6e45480d65e5df3bd6d779292237db",
          "linkedWithoutMetadata": "79d736309c0e898beb9565b572340aae6d6e45480d65e5df3bd6d779292237db"
        },
        "inherit": [],
        "libraries": [
          "SafeCast"
        ],
        "methods": [
          "toUint128(uint256)",
          "toUint64(uint256)",
          "toUint32(uint256)",
          "toUint16(uint256)",
          "toUint8(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "contracts/IDO_basedon_Openzeppelin/utils/SafeCast.sol:21",
        "version": {
          "withMetadata": "d51e1331ad51ab3b42b77dc426fafbdf1d7acd16e8f7d8888c7cbe62d1216341",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "EtherReceiverMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/EtherReceiverMock.sol:3",
        "version": {
          "withMetadata": "6323bf7f5c49e1594ba486d9ac76dba5d8c864a8a442e132de0001fabb99178b",
          "withoutMetadata": "d0889a0dd7ad11b3c64c5d0e0630363510fb07dcd7ea51e15e99e802ec207a98",
          "linkedWithoutMetadata": "d0889a0dd7ad11b3c64c5d0e0630363510fb07dcd7ea51e15e99e802ec207a98"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAcceptEther(bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EtherReceiverMock",
              "label": "_acceptEther",
              "type": "t_bool",
              "src": "contracts/IDO_basedon_Openzeppelin/mocks/EtherReceiverMock.sol:4"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ERC165NotSupported": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC165/ERC165NotSupported.sol:3",
        "version": {
          "withMetadata": "64f5c2ee82551eb4051a1a04340abef638438f6fb40df6e018f36b41fbf680e7",
          "withoutMetadata": "7f2d58cc2fe2c8fb8725c9dc5086beed1e02e5e3c82f5ddf3a4ef452244d19b0",
          "linkedWithoutMetadata": "7f2d58cc2fe2c8fb8725c9dc5086beed1e02e5e3c82f5ddf3a4ef452244d19b0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "EnumerableSetMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/EnumerableSetMock.sol:5",
        "version": {
          "withMetadata": "4576c0ee7db4650372241ab4e0d43563688b5bb92f6c6152a38f56c1c3d2cc5d",
          "withoutMetadata": "98b56e88c4ab5e38b2c2d1bfcb5daf414b47a3e324a08339616a2e46311ff96b",
          "linkedWithoutMetadata": "98b56e88c4ab5e38b2c2d1bfcb5daf414b47a3e324a08339616a2e46311ff96b"
        },
        "inherit": [],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "contains(address)",
          "add(address)",
          "remove(address)",
          "enumerate()",
          "length()",
          "get(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EnumerableSetMock",
              "label": "set",
              "type": "t_struct(AddressSet)103_storage",
              "src": "contracts/IDO_basedon_Openzeppelin/mocks/EnumerableSetMock.sol:10"
            }
          ],
          "types": {
            "t_struct(AddressSet)103_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "index",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "contracts/IDO_basedon_Openzeppelin/utils/EnumerableSet.sol:22",
        "version": {
          "withMetadata": "0fe1a59f02488d54a0c7404ea36ad5173994a7dbc7af9a1e6b182e168bbbbaad",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ERC165Checker": {
        "src": "contracts/IDO_basedon_Openzeppelin/introspection/ERC165Checker.sol:10",
        "version": {
          "withMetadata": "eb12fb3b240fdab89b448551853e66289fd2d0fb6117d27fdfe905f8517459f6",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165CheckerMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC165CheckerMock.sol:5",
        "version": {
          "withMetadata": "cb865ea4719cf4aa6c04f1fb61143bcce8047a57d078ebf1456dbd6c4489c2cd",
          "withoutMetadata": "4eaf2c7e959df2bb14cdeddc0ec5f79db91638114c5f8020d6e1c365b68d3462",
          "linkedWithoutMetadata": "4eaf2c7e959df2bb14cdeddc0ec5f79db91638114c5f8020d6e1c365b68d3462"
        },
        "inherit": [],
        "libraries": [
          "ERC165Checker"
        ],
        "methods": [
          "supportsERC165(address)",
          "supportsInterface(address,bytes4)",
          "supportsAllInterfaces(address,bytes4[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:281",
        "version": {
          "withMetadata": "79d65e6a7966f901f2f19ea11cb6220f96ab0353e164215fbb1cca2c4ecd466a",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ConditionalEscrow": {
        "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:986",
        "inherit": [
          "Escrow",
          "Secondary",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "withdrawalAllowed(address)",
          "withdraw(address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Crowdsale": {
        "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:504",
        "version": {
          "withMetadata": "5e6301a487d91a17851bfc57b3f4a688789ed89eb870e5088c8bb1f8301a56f0",
          "withoutMetadata": "5e6301a487d91a17851bfc57b3f4a688789ed89eb870e5088c8bb1f8301a56f0",
          "linkedWithoutMetadata": "5e6301a487d91a17851bfc57b3f4a688789ed89eb870e5088c8bb1f8301a56f0"
        },
        "inherit": [
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(uint256,address payable,address)",
          "()",
          "token()",
          "wallet()",
          "rate()",
          "weiRaised()",
          "buyTokens(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Crowdsale",
            "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:540"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Crowdsale",
              "label": "_token",
              "type": "t_contract(IERC20)94",
              "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:509"
            },
            {
              "contract": "Crowdsale",
              "label": "_wallet",
              "type": "t_address_payable",
              "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:512"
            },
            {
              "contract": "Crowdsale",
              "label": "_rate",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:518"
            },
            {
              "contract": "Crowdsale",
              "label": "_weiRaised",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:521"
            }
          ],
          "types": {
            "t_contract(IERC20)94": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Escrow": {
        "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:911",
        "version": {
          "withMetadata": "278371e8a1b5cc17eff0a859883656f370c52dab04718d3fe13b3f0d0f97ecfe",
          "withoutMetadata": "9a5e92ee31b98da9f53d3e6545900180949e42628e9efaea16c03fd91cb9cb34",
          "linkedWithoutMetadata": "9a5e92ee31b98da9f53d3e6545900180949e42628e9efaea16c03fd91cb9cb34"
        },
        "inherit": [
          "Secondary",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "depositsOf(address)",
          "deposit(address)",
          "withdraw(address payable)",
          "withdrawWithGas(address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Escrow",
              "label": "_deposits",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:918"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FinalizableCrowdsale": {
        "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:796",
        "inherit": [
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "finalized()",
          "finalize()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FinalizableCrowdsale",
            "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:803"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FinalizableCrowdsale",
              "label": "_finalized",
              "type": "t_bool",
              "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:799"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDO2": {
        "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:1273",
        "version": {
          "withMetadata": "c4e77c899247a4c050fa98888be406c6c16a07dbf90b0e0aced4e6c32f29e8db",
          "withoutMetadata": "c4e77c899247a4c050fa98888be406c6c16a07dbf90b0e0aced4e6c32f29e8db",
          "linkedWithoutMetadata": "c4e77c899247a4c050fa98888be406c6c16a07dbf90b0e0aced4e6c32f29e8db"
        },
        "inherit": [
          "RefundableCrowdsale",
          "FinalizableCrowdsale",
          "PostDeliveryCrowdsale",
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address payable,address,uint256,uint256,uint256)",
          "withdrawTokens(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IDO2",
            "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:1275"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PostDeliveryCrowdsale": {
        "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:1191",
        "inherit": [
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "withdrawTokens(address)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PostDeliveryCrowdsale",
            "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:1197"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PostDeliveryCrowdsale",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:1194"
            },
            {
              "contract": "PostDeliveryCrowdsale",
              "label": "_vault",
              "type": "t_contract$___unstable__TokenVault)1709",
              "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:1195"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract$___unstable__TokenVault)1709": {
              "label": "contract __unstable__TokenVault"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:448",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:451"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_notEntered",
              "type": "t_bool",
              "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:449"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "RefundEscrow": {
        "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:1016",
        "version": {
          "withMetadata": "ae826c11fe64432975edc09a3d9e6d9e21a9f88e07a4e58ec8e87a8bfe553e6d",
          "withoutMetadata": "ae826c11fe64432975edc09a3d9e6d9e21a9f88e07a4e58ec8e87a8bfe553e6d",
          "linkedWithoutMetadata": "ae826c11fe64432975edc09a3d9e6d9e21a9f88e07a4e58ec8e87a8bfe553e6d"
        },
        "inherit": [
          "ConditionalEscrow",
          "Escrow",
          "Secondary",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "state()",
          "beneficiary()",
          "deposit(address)",
          "close()",
          "enableRefunds()",
          "beneficiaryWithdraw()",
          "withdrawalAllowed(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RefundEscrow",
            "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:1029"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "RefundEscrow",
              "label": "_state",
              "type": "t_enum(State)1312",
              "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:1022"
            },
            {
              "contract": "RefundEscrow",
              "label": "_beneficiary",
              "type": "t_address_payable",
              "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:1023"
            }
          ],
          "types": {
            "t_enum(State)1312": {
              "label": "enum RefundEscrow.State",
              "members": [
                "Active",
                "Refunding",
                "Closed"
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "RefundableCrowdsale": {
        "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:1112",
        "inherit": [
          "FinalizableCrowdsale",
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256)",
          "goal()",
          "claimRefund(address payable)",
          "goalReached()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RefundableCrowdsale",
            "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:1125"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "RefundableCrowdsale",
              "label": "_goal",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:1116"
            },
            {
              "contract": "RefundableCrowdsale",
              "label": "_escrow",
              "type": "t_contract(RefundEscrow)1459",
              "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:1119"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(RefundEscrow)1459": {
              "label": "contract RefundEscrow"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "RefundablePostDeliveryCrowdsale": {
        "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:1258",
        "inherit": [
          "PostDeliveryCrowdsale",
          "RefundableCrowdsale",
          "FinalizableCrowdsale",
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "withdrawTokens(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:363",
        "version": {
          "withMetadata": "70bfb878065e22f8cdfeb3d0f022e25887fa44ee22d895489234927003cbdd20",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:131",
        "version": {
          "withMetadata": "99d06a5be32ca680719b6748278cf14bf07d4f3676ec681e414b79acadd42fc0",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Secondary": {
        "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:846",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "primary()",
          "transferPrimary(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Secondary",
            "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:859"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Secondary",
              "label": "_primary",
              "type": "t_address",
              "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:847"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TimedCrowdsale": {
        "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:695",
        "inherit": [
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,uint256)",
          "openingTime()",
          "closingTime()",
          "isOpen()",
          "hasClosed()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TimedCrowdsale",
            "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:721"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TimedCrowdsale",
              "label": "_openingTime",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:698"
            },
            {
              "contract": "TimedCrowdsale",
              "label": "_closingTime",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:699"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "__unstable__TokenVault": {
        "src": "contracts/IDO_basedon_Openzeppelin/IDO2_flatten.sol:1240",
        "version": {
          "withMetadata": "cc24d9516702b23bf006710cbdcb99d47c70cd6481489acecc4396d24dd1bd14",
          "withoutMetadata": "c87bd47bc94fa5846724bc46bace115ac57f3922a8f4904c39968957ded8d980",
          "linkedWithoutMetadata": "c87bd47bc94fa5846724bc46bace115ac57f3922a8f4904c39968957ded8d980"
        },
        "inherit": [
          "Secondary",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Strings": {
        "src": "contracts/IDO_basedon_Openzeppelin/drafts/Strings.sol:7",
        "version": {
          "withMetadata": "027cf43e445c4919e5df557786a25d3f1f39a8c6f903050f9493babf7226a22a",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/StringsMock.sol:5",
        "version": {
          "withMetadata": "f5e121da393813418ff0ff098231363ff639e5ee8bb1544a418432d3a447c880",
          "withoutMetadata": "a2687d9521a843b17ba223c1b9cc61adc5a73862877f939043a6f7945f077e4a",
          "linkedWithoutMetadata": "a2687d9521a843b17ba223c1b9cc61adc5a73862877f939043a6f7945f077e4a"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "fromUint256(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SignedSafeMath": {
        "src": "contracts/IDO_basedon_Openzeppelin/drafts/SignedSafeMath.sol:7",
        "version": {
          "withMetadata": "9776199f5fe1be073a72b7623113f76f1f38ced1efbe1512f0ab49f1af45567c",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SignedSafeMathMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/SignedSafeMathMock.sol:5",
        "version": {
          "withMetadata": "22e645d0d787c971e075347db5aca417cb416fcaabfbcc1f5b26f25966db6315",
          "withoutMetadata": "694993bc6b2365cf48e5cfc3814d43b5226bf66a374eaf5a6e9bbc4164d193c8",
          "linkedWithoutMetadata": "694993bc6b2365cf48e5cfc3814d43b5226bf66a374eaf5a6e9bbc4164d193c8"
        },
        "inherit": [],
        "libraries": [
          "SignedSafeMath"
        ],
        "methods": [
          "mul(int256,int256)",
          "div(int256,int256)",
          "sub(int256,int256)",
          "add(int256,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "MerkleProof": {
        "src": "contracts/IDO_basedon_Openzeppelin/cryptography/MerkleProof.sol:6",
        "version": {
          "withMetadata": "15f131d3887b023464aaa48d078b3c550d9a91f1033cbe83280a2186e3f13fee",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MerkleProofWrapper": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/MerkleProofWrapper.sol:5",
        "version": {
          "withMetadata": "067954b586e9b76730aa838bc2d59038535ca0f90c18804254ea971638f16c02",
          "withoutMetadata": "a070180de3b6e696a20f9519035cd2c55c353160557fd903755b1866c8e24bd7",
          "linkedWithoutMetadata": "a070180de3b6e696a20f9519035cd2c55c353160557fd903755b1866c8e24bd7"
        },
        "inherit": [],
        "libraries": [
          "MerkleProof"
        ],
        "methods": [
          "verify(bytes32[],bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts/IDO_basedon_Openzeppelin/GSN/Context.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GSNRecipient": {
        "src": "contracts/IDO_basedon_Openzeppelin/GSN/GSNRecipient.sol:18",
        "inherit": [
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "getHubAddr()",
          "relayHubVersion()",
          "preRelayedCall(bytes)",
          "postRelayedCall(bytes,bool,uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_relayHub",
            "src": "contracts/IDO_basedon_Openzeppelin/GSN/GSNRecipient.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GSNRecipient",
              "label": "_relayHub",
              "type": "t_address",
              "src": "contracts/IDO_basedon_Openzeppelin/GSN/GSNRecipient.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GSNRecipientERC20Fee": {
        "src": "contracts/IDO_basedon_Openzeppelin/GSN/GSNRecipientERC20Fee.sol:19",
        "version": {
          "withMetadata": "05496e6c46cecc07cea10ef6fe96d36ef85d6c0710ff6acb5ddae5d1e32e97f2",
          "withoutMetadata": "3058eb654d21606eb47e76d658ecc9c988535b9c74dcfbf5b9bac61acc56ba32",
          "linkedWithoutMetadata": "3058eb654d21606eb47e76d658ecc9c988535b9c74dcfbf5b9bac61acc56ba32"
        },
        "inherit": [
          "GSNRecipient",
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "token()",
          "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GSNRecipientERC20Fee",
            "src": "contracts/IDO_basedon_Openzeppelin/GSN/GSNRecipientERC20Fee.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GSNRecipientERC20Fee",
              "label": "_token",
              "type": "t_contract$___unstable__ERC20PrimaryAdmin)689",
              "src": "contracts/IDO_basedon_Openzeppelin/GSN/GSNRecipientERC20Fee.sol:27"
            }
          ],
          "types": {
            "t_contract$___unstable__ERC20PrimaryAdmin)689": {
              "label": "contract __unstable__ERC20PrimaryAdmin"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "__unstable__ERC20PrimaryAdmin": {
        "src": "contracts/IDO_basedon_Openzeppelin/GSN/GSNRecipientERC20Fee.sol:113",
        "version": {
          "withMetadata": "c6c937f27f5519b37dc41cb5af35e6daccedce0de3ec464f14fe3726fe754b4a",
          "withoutMetadata": "837fef2cee488a755d2e45e42a7a18a0aaf7a4d2a9cb27e703a2f6ed2f02a45b",
          "linkedWithoutMetadata": "837fef2cee488a755d2e45e42a7a18a0aaf7a4d2a9cb27e703a2f6ed2f02a45b"
        },
        "inherit": [
          "Secondary",
          "ERC20Detailed",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)",
          "mint(address,uint256)",
          "allowance(address,address)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "__unstable__ERC20PrimaryAdmin",
            "src": "contracts/IDO_basedon_Openzeppelin/GSN/GSNRecipientERC20Fee.sol:116"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GSNRecipientSignature": {
        "src": "contracts/IDO_basedon_Openzeppelin/GSN/GSNRecipientSignature.sol:12",
        "version": {
          "withMetadata": "a46fad2cab7a6f9859c817a3d1c105be9c538775910365886ecb9dc5a2ea91af",
          "withoutMetadata": "a46fad2cab7a6f9859c817a3d1c105be9c538775910365886ecb9dc5a2ea91af",
          "linkedWithoutMetadata": "a46fad2cab7a6f9859c817a3d1c105be9c538775910365886ecb9dc5a2ea91af"
        },
        "inherit": [
          "GSNRecipient",
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [
          "ECDSA"
        ],
        "methods": [
          "(address)",
          "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GSNRecipientSignature",
            "src": "contracts/IDO_basedon_Openzeppelin/GSN/GSNRecipientSignature.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GSNRecipientSignature",
              "label": "_trustedSigner",
              "type": "t_address",
              "src": "contracts/IDO_basedon_Openzeppelin/GSN/GSNRecipientSignature.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRelayHub": {
        "src": "contracts/IDO_basedon_Openzeppelin/GSN/IRelayHub.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "registerRelay(uint256,string)",
          "removeRelayByOwner(address)",
          "unstake(address)",
          "getRelay(address)",
          "depositFor(address)",
          "balanceOf(address)",
          "withdraw(uint256,address payable)",
          "canRelay(address,address,address,bytes,uint256,uint256,uint256,uint256,bytes,bytes)",
          "relayCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,bytes)",
          "requiredGas(uint256)",
          "maxPossibleCharge(uint256,uint256,uint256)",
          "penalizeRepeatedNonce(bytes,bytes,bytes,bytes)",
          "penalizeIllegalTransaction(bytes,bytes)",
          "getNonce(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRelayRecipient": {
        "src": "contracts/IDO_basedon_Openzeppelin/GSN/IRelayRecipient.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getHubAddr()",
          "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)",
          "preRelayedCall(bytes)",
          "postRelayedCall(bytes,bool,uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDO2": {
        "src": "contracts/IDO_basedon_Openzeppelin/IDO2.sol:6",
        "version": {
          "withMetadata": "280b635cca1ba1b07d3aedca0eecbd6ffa29f65ca3377bc227066249d61dc247",
          "withoutMetadata": "280b635cca1ba1b07d3aedca0eecbd6ffa29f65ca3377bc227066249d61dc247",
          "linkedWithoutMetadata": "280b635cca1ba1b07d3aedca0eecbd6ffa29f65ca3377bc227066249d61dc247"
        },
        "inherit": [
          "RefundableCrowdsale",
          "FinalizableCrowdsale",
          "PostDeliveryCrowdsale",
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address payable,address,uint256,uint256,uint256)",
          "withdrawTokens(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IDO2",
            "src": "contracts/IDO_basedon_Openzeppelin/IDO2.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Roles": {
        "src": "contracts/IDO_basedon_Openzeppelin/access/Roles.sol:7",
        "version": {
          "withMetadata": "dac0f1089eb12eda4443ddaecfadccc8de4af6cd39f04d6f8fc9181c37e31917",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CapperRole": {
        "src": "contracts/IDO_basedon_Openzeppelin/access/roles/CapperRole.sol:6",
        "inherit": [
          "Context"
        ],
        "libraries": [
          "Roles"
        ],
        "methods": [
          "isCapper(address)",
          "addCapper(address)",
          "renounceCapper()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CapperRole",
            "src": "contracts/IDO_basedon_Openzeppelin/access/roles/CapperRole.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "CapperRole",
              "label": "_cappers",
              "type": "t_struct(Role)1187_storage",
              "src": "contracts/IDO_basedon_Openzeppelin/access/roles/CapperRole.sol:12"
            }
          ],
          "types": {
            "t_struct(Role)1187_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MinterRole": {
        "src": "contracts/IDO_basedon_Openzeppelin/access/roles/MinterRole.sol:6",
        "inherit": [
          "Context"
        ],
        "libraries": [
          "Roles"
        ],
        "methods": [
          "isMinter(address)",
          "addMinter(address)",
          "renounceMinter()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MinterRole",
            "src": "contracts/IDO_basedon_Openzeppelin/access/roles/MinterRole.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MinterRole",
              "label": "_minters",
              "type": "t_struct(Role)1187_storage",
              "src": "contracts/IDO_basedon_Openzeppelin/access/roles/MinterRole.sol:12"
            }
          ],
          "types": {
            "t_struct(Role)1187_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PauserRole": {
        "src": "contracts/IDO_basedon_Openzeppelin/access/roles/PauserRole.sol:6",
        "inherit": [
          "Context"
        ],
        "libraries": [
          "Roles"
        ],
        "methods": [
          "isPauser(address)",
          "addPauser(address)",
          "renouncePauser()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PauserRole",
            "src": "contracts/IDO_basedon_Openzeppelin/access/roles/PauserRole.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PauserRole",
              "label": "_pausers",
              "type": "t_struct(Role)1187_storage",
              "src": "contracts/IDO_basedon_Openzeppelin/access/roles/PauserRole.sol:12"
            }
          ],
          "types": {
            "t_struct(Role)1187_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SignerRole": {
        "src": "contracts/IDO_basedon_Openzeppelin/access/roles/SignerRole.sol:6",
        "inherit": [
          "Context"
        ],
        "libraries": [
          "Roles"
        ],
        "methods": [
          "isSigner(address)",
          "addSigner(address)",
          "renounceSigner()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SignerRole",
            "src": "contracts/IDO_basedon_Openzeppelin/access/roles/SignerRole.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SignerRole",
              "label": "_signers",
              "type": "t_struct(Role)1187_storage",
              "src": "contracts/IDO_basedon_Openzeppelin/access/roles/SignerRole.sol:12"
            }
          ],
          "types": {
            "t_struct(Role)1187_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WhitelistAdminRole": {
        "src": "contracts/IDO_basedon_Openzeppelin/access/roles/WhitelistAdminRole.sol:10",
        "inherit": [
          "Context"
        ],
        "libraries": [
          "Roles"
        ],
        "methods": [
          "isWhitelistAdmin(address)",
          "addWhitelistAdmin(address)",
          "renounceWhitelistAdmin()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WhitelistAdminRole",
            "src": "contracts/IDO_basedon_Openzeppelin/access/roles/WhitelistAdminRole.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WhitelistAdminRole",
              "label": "_whitelistAdmins",
              "type": "t_struct(Role)1187_storage",
              "src": "contracts/IDO_basedon_Openzeppelin/access/roles/WhitelistAdminRole.sol:16"
            }
          ],
          "types": {
            "t_struct(Role)1187_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WhitelistedRole": {
        "src": "contracts/IDO_basedon_Openzeppelin/access/roles/WhitelistedRole.sol:13",
        "version": {
          "withMetadata": "ad693a248c2303c4b66427551f92bcf8bdb95951d4e315b467d1fbb70a6e5ffb",
          "withoutMetadata": "ad693a248c2303c4b66427551f92bcf8bdb95951d4e315b467d1fbb70a6e5ffb",
          "linkedWithoutMetadata": "ad693a248c2303c4b66427551f92bcf8bdb95951d4e315b467d1fbb70a6e5ffb"
        },
        "inherit": [
          "WhitelistAdminRole",
          "Context"
        ],
        "libraries": [
          "Roles"
        ],
        "methods": [
          "isWhitelisted(address)",
          "addWhitelisted(address)",
          "removeWhitelisted(address)",
          "renounceWhitelisted()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WhitelistedRole",
              "label": "_whitelisteds",
              "type": "t_struct(Role)1187_storage",
              "src": "contracts/IDO_basedon_Openzeppelin/access/roles/WhitelistedRole.sol:19"
            }
          ],
          "types": {
            "t_struct(Role)1187_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Crowdsale": {
        "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/Crowdsale.sol:21",
        "version": {
          "withMetadata": "a2fdf5d6af65c5050d3a985a8746c5043683988b8338b4577adf7f5168225cac",
          "withoutMetadata": "a2fdf5d6af65c5050d3a985a8746c5043683988b8338b4577adf7f5168225cac",
          "linkedWithoutMetadata": "a2fdf5d6af65c5050d3a985a8746c5043683988b8338b4577adf7f5168225cac"
        },
        "inherit": [
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(uint256,address payable,address)",
          "()",
          "token()",
          "wallet()",
          "rate()",
          "weiRaised()",
          "buyTokens(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Crowdsale",
            "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/Crowdsale.sol:57"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Crowdsale",
              "label": "_token",
              "type": "t_contract(IERC20)9442",
              "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/Crowdsale.sol:26"
            },
            {
              "contract": "Crowdsale",
              "label": "_wallet",
              "type": "t_address_payable",
              "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/Crowdsale.sol:29"
            },
            {
              "contract": "Crowdsale",
              "label": "_rate",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/Crowdsale.sol:35"
            },
            {
              "contract": "Crowdsale",
              "label": "_weiRaised",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/Crowdsale.sol:38"
            }
          ],
          "types": {
            "t_contract(IERC20)9442": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FinalizableCrowdsale": {
        "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/distribution/FinalizableCrowdsale.sol:11",
        "inherit": [
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "finalized()",
          "finalize()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FinalizableCrowdsale",
            "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/distribution/FinalizableCrowdsale.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FinalizableCrowdsale",
              "label": "_finalized",
              "type": "t_bool",
              "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/distribution/FinalizableCrowdsale.sol:14"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PostDeliveryCrowdsale": {
        "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/distribution/PostDeliveryCrowdsale.sol:12",
        "inherit": [
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "withdrawTokens(address)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PostDeliveryCrowdsale",
            "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/distribution/PostDeliveryCrowdsale.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PostDeliveryCrowdsale",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/distribution/PostDeliveryCrowdsale.sol:15"
            },
            {
              "contract": "PostDeliveryCrowdsale",
              "label": "_vault",
              "type": "t_contract$___unstable__TokenVault)2374",
              "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/distribution/PostDeliveryCrowdsale.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract$___unstable__TokenVault)2374": {
              "label": "contract __unstable__TokenVault"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "__unstable__TokenVault": {
        "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/distribution/PostDeliveryCrowdsale.sol:61",
        "version": {
          "withMetadata": "3b272ac4a2824d85dfef0a5783a39d7424f3acb0d5bf5803a8e64d86251e819d",
          "withoutMetadata": "c87bd47bc94fa5846724bc46bace115ac57f3922a8f4904c39968957ded8d980",
          "linkedWithoutMetadata": "c87bd47bc94fa5846724bc46bace115ac57f3922a8f4904c39968957ded8d980"
        },
        "inherit": [
          "Secondary",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RefundableCrowdsale": {
        "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/distribution/RefundableCrowdsale.sol:18",
        "inherit": [
          "FinalizableCrowdsale",
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256)",
          "goal()",
          "claimRefund(address payable)",
          "goalReached()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RefundableCrowdsale",
            "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/distribution/RefundableCrowdsale.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "RefundableCrowdsale",
              "label": "_goal",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/distribution/RefundableCrowdsale.sol:22"
            },
            {
              "contract": "RefundableCrowdsale",
              "label": "_escrow",
              "type": "t_contract(RefundEscrow)8687",
              "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/distribution/RefundableCrowdsale.sol:25"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(RefundEscrow)8687": {
              "label": "contract RefundEscrow"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "RefundablePostDeliveryCrowdsale": {
        "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/distribution/RefundablePostDeliveryCrowdsale.sol:13",
        "inherit": [
          "PostDeliveryCrowdsale",
          "RefundableCrowdsale",
          "FinalizableCrowdsale",
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "withdrawTokens(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AllowanceCrowdsale": {
        "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/emission/AllowanceCrowdsale.sol:13",
        "inherit": [
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address)",
          "tokenWallet()",
          "remainingTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AllowanceCrowdsale",
            "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/emission/AllowanceCrowdsale.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AllowanceCrowdsale",
              "label": "_tokenWallet",
              "type": "t_address",
              "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/emission/AllowanceCrowdsale.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MintedCrowdsale": {
        "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/emission/MintedCrowdsale.sol:11",
        "inherit": [
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IncreasingPriceCrowdsale": {
        "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/price/IncreasingPriceCrowdsale.sol:12",
        "inherit": [
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,uint256)",
          "rate()",
          "initialRate()",
          "finalRate()",
          "getCurrentRate()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IncreasingPriceCrowdsale",
            "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/price/IncreasingPriceCrowdsale.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "IncreasingPriceCrowdsale",
              "label": "_initialRate",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/price/IncreasingPriceCrowdsale.sol:15"
            },
            {
              "contract": "IncreasingPriceCrowdsale",
              "label": "_finalRate",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/price/IncreasingPriceCrowdsale.sol:16"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CappedCrowdsale": {
        "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/validation/CappedCrowdsale.sol:10",
        "inherit": [
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256)",
          "cap()",
          "capReached()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CappedCrowdsale",
            "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/validation/CappedCrowdsale.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "CappedCrowdsale",
              "label": "_cap",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/validation/CappedCrowdsale.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IndividuallyCappedCrowdsale": {
        "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/validation/IndividuallyCappedCrowdsale.sol:11",
        "inherit": [
          "CapperRole",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "setCap(address,uint256)",
          "getCap(address)",
          "getContribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IndividuallyCappedCrowdsale",
              "label": "_contributions",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/validation/IndividuallyCappedCrowdsale.sol:14"
            },
            {
              "contract": "IndividuallyCappedCrowdsale",
              "label": "_caps",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/validation/IndividuallyCappedCrowdsale.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableCrowdsale": {
        "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/validation/PausableCrowdsale.sol:10",
        "inherit": [
          "Pausable",
          "PauserRole",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimedCrowdsale": {
        "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/validation/TimedCrowdsale.sol:10",
        "inherit": [
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,uint256)",
          "openingTime()",
          "closingTime()",
          "isOpen()",
          "hasClosed()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TimedCrowdsale",
            "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/validation/TimedCrowdsale.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TimedCrowdsale",
              "label": "_openingTime",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/validation/TimedCrowdsale.sol:13"
            },
            {
              "contract": "TimedCrowdsale",
              "label": "_closingTime",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/validation/TimedCrowdsale.sol:14"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WhitelistCrowdsale": {
        "src": "contracts/IDO_basedon_Openzeppelin/crowdsale/validation/WhitelistCrowdsale.sol:10",
        "inherit": [
          "Crowdsale",
          "ReentrancyGuard",
          "WhitelistedRole",
          "WhitelistAdminRole",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "contracts/IDO_basedon_Openzeppelin/cryptography/ECDSA.sol:9",
        "version": {
          "withMetadata": "7fd2c9c86a535ed6d7a3d5e4def5f72202613b4c22a9d0c69cb59fb153584fd7",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "contracts/IDO_basedon_Openzeppelin/drafts/Counters.sol:16",
        "version": {
          "withMetadata": "1b36388cd17b0c5afe2a7a4d238bf5a6e60107745fdfb09f90061fa402bdc683",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Metadata": {
        "src": "contracts/IDO_basedon_Openzeppelin/drafts/ERC1046/ERC20Metadata.sol:10",
        "version": {
          "withMetadata": "0efbc75119b6e478712c2596db302537c7019bfe61aaf5ac974800783f72ad4b",
          "withoutMetadata": "72e0deb7af4f167c33e943e79f5ff9675bc455b36a643c1b2acf784fdeaa1e71",
          "linkedWithoutMetadata": "72e0deb7af4f167c33e943e79f5ff9675bc455b36a643c1b2acf784fdeaa1e71"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(string)",
          "tokenURI()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Metadata",
            "src": "contracts/IDO_basedon_Openzeppelin/drafts/ERC1046/ERC20Metadata.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Metadata",
              "label": "_tokenURI",
              "type": "t_string_storage",
              "src": "contracts/IDO_basedon_Openzeppelin/drafts/ERC1046/ERC20Metadata.sol:11"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Migrator": {
        "src": "contracts/IDO_basedon_Openzeppelin/drafts/ERC20Migrator.sol:35",
        "version": {
          "withMetadata": "27f669900964588fd77fe1861897087c04d1a3dd578e8535faa504e45a7685f8",
          "withoutMetadata": "27f669900964588fd77fe1861897087c04d1a3dd578e8535faa504e45a7685f8",
          "linkedWithoutMetadata": "27f669900964588fd77fe1861897087c04d1a3dd578e8535faa504e45a7685f8"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address)",
          "legacyToken()",
          "newToken()",
          "beginMigration(address)",
          "migrate(address,uint256)",
          "migrateAll(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Migrator",
            "src": "contracts/IDO_basedon_Openzeppelin/drafts/ERC20Migrator.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Migrator",
              "label": "_legacyToken",
              "type": "t_contract(IERC20)9442",
              "src": "contracts/IDO_basedon_Openzeppelin/drafts/ERC20Migrator.sol:39"
            },
            {
              "contract": "ERC20Migrator",
              "label": "_newToken",
              "type": "t_contract(ERC20Mintable)9271",
              "src": "contracts/IDO_basedon_Openzeppelin/drafts/ERC20Migrator.sol:42"
            }
          ],
          "types": {
            "t_contract(IERC20)9442": {
              "label": "contract IERC20"
            },
            "t_contract(ERC20Mintable)9271": {
              "label": "contract ERC20Mintable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "contracts/IDO_basedon_Openzeppelin/drafts/ERC20Snapshot.sol:23",
        "version": {
          "withMetadata": "546314b38f9f09bee67c0088fbab26701ece971ca1e0044d13971f36b5523156",
          "withoutMetadata": "a03c8b3c92945cc74632b67544dfa84521e19efc0a3457d7372d062ce7545a95",
          "linkedWithoutMetadata": "a03c8b3c92945cc74632b67544dfa84521e19efc0a3457d7372d062ce7545a95"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Arrays",
          "Counters"
        ],
        "methods": [
          "snapshot()",
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)3539_storage)",
              "src": "contracts/IDO_basedon_Openzeppelin/drafts/ERC20Snapshot.sol:35"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)3539_storage",
              "src": "contracts/IDO_basedon_Openzeppelin/drafts/ERC20Snapshot.sol:36"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)3275_storage",
              "src": "contracts/IDO_basedon_Openzeppelin/drafts/ERC20Snapshot.sol:39"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)3539_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)3539_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)3275_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TokenVesting": {
        "src": "contracts/IDO_basedon_Openzeppelin/drafts/TokenVesting.sol:13",
        "version": {
          "withMetadata": "e1c55b08e35485d9d31dee3c0e915512b9e40f20b9cfa728969463e52c0ad022",
          "withoutMetadata": "e1c55b08e35485d9d31dee3c0e915512b9e40f20b9cfa728969463e52c0ad022",
          "linkedWithoutMetadata": "e1c55b08e35485d9d31dee3c0e915512b9e40f20b9cfa728969463e52c0ad022"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,uint256,uint256,uint256,bool)",
          "beneficiary()",
          "cliff()",
          "start()",
          "duration()",
          "revocable()",
          "released(address)",
          "revoked(address)",
          "release(address)",
          "revoke(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenVesting",
            "src": "contracts/IDO_basedon_Openzeppelin/drafts/TokenVesting.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TokenVesting",
              "label": "_beneficiary",
              "type": "t_address",
              "src": "contracts/IDO_basedon_Openzeppelin/drafts/TokenVesting.sol:27"
            },
            {
              "contract": "TokenVesting",
              "label": "_cliff",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/drafts/TokenVesting.sol:30"
            },
            {
              "contract": "TokenVesting",
              "label": "_start",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/drafts/TokenVesting.sol:31"
            },
            {
              "contract": "TokenVesting",
              "label": "_duration",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/drafts/TokenVesting.sol:32"
            },
            {
              "contract": "TokenVesting",
              "label": "_revocable",
              "type": "t_bool",
              "src": "contracts/IDO_basedon_Openzeppelin/drafts/TokenVesting.sol:34"
            },
            {
              "contract": "TokenVesting",
              "label": "_released",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/IDO_basedon_Openzeppelin/drafts/TokenVesting.sol:36"
            },
            {
              "contract": "TokenVesting",
              "label": "_revoked",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/IDO_basedon_Openzeppelin/drafts/TokenVesting.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SampleCrowdsale": {
        "src": "contracts/IDO_basedon_Openzeppelin/examples/SampleCrowdsale.sol:33",
        "version": {
          "withMetadata": "14652ad89b6eeab972c7535ab7aec6c0fec31fcea0be59b01978377db91acada",
          "withoutMetadata": "14652ad89b6eeab972c7535ab7aec6c0fec31fcea0be59b01978377db91acada",
          "linkedWithoutMetadata": "14652ad89b6eeab972c7535ab7aec6c0fec31fcea0be59b01978377db91acada"
        },
        "inherit": [
          "MintedCrowdsale",
          "RefundableCrowdsale",
          "FinalizableCrowdsale",
          "TimedCrowdsale",
          "CappedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256,uint256,address payable,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SampleCrowdsale",
            "src": "contracts/IDO_basedon_Openzeppelin/examples/SampleCrowdsale.sol:34"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SampleCrowdsaleToken": {
        "src": "contracts/IDO_basedon_Openzeppelin/examples/SampleCrowdsale.sol:14",
        "version": {
          "withMetadata": "bfb9e9ae77d15b1304f29cee0c8ad737565399ecf6feb08fdf87ee0425b947c1",
          "withoutMetadata": "bfb9e9ae77d15b1304f29cee0c8ad737565399ecf6feb08fdf87ee0425b947c1",
          "linkedWithoutMetadata": "bfb9e9ae77d15b1304f29cee0c8ad737565399ecf6feb08fdf87ee0425b947c1"
        },
        "inherit": [
          "ERC20Detailed",
          "ERC20Mintable",
          "MinterRole",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SampleCrowdsaleToken",
            "src": "contracts/IDO_basedon_Openzeppelin/examples/SampleCrowdsale.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SimpleToken": {
        "src": "contracts/IDO_basedon_Openzeppelin/examples/SimpleToken.sol:13",
        "version": {
          "withMetadata": "dce5eaf18dac942e0a911866a19676bc239c050960fd64240c391dfd99c6770b",
          "withoutMetadata": "fbf926553257b9f6ce0be3190ccb9e7c6a40be5ba10bba36090587c5deb7adf6",
          "linkedWithoutMetadata": "fbf926553257b9f6ce0be3190ccb9e7c6a40be5ba10bba36090587c5deb7adf6"
        },
        "inherit": [
          "ERC20Detailed",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleToken",
            "src": "contracts/IDO_basedon_Openzeppelin/examples/SimpleToken.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "contracts/IDO_basedon_Openzeppelin/introspection/ERC165.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "contracts/IDO_basedon_Openzeppelin/introspection/ERC165.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "contracts/IDO_basedon_Openzeppelin/introspection/ERC165.sol:20"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1820Implementer": {
        "src": "contracts/IDO_basedon_Openzeppelin/introspection/ERC1820Implementer.sol:13",
        "version": {
          "withMetadata": "54abee5341a4af6b2681fb938ddc85a9d8516bbfe7430d124e9395a9de001b3a",
          "withoutMetadata": "580848b08fd23a714e5566f1cc15a821c322c4c442551dbfb15910aa75240f4b",
          "linkedWithoutMetadata": "580848b08fd23a714e5566f1cc15a821c322c4c442551dbfb15910aa75240f4b"
        },
        "inherit": [
          "IERC1820Implementer"
        ],
        "libraries": [],
        "methods": [
          "canImplementInterfaceForAddress(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1820Implementer",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
              "src": "contracts/IDO_basedon_Openzeppelin/introspection/ERC1820Implementer.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
              "label": "mapping(bytes32 => mapping(address => bool))"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts/IDO_basedon_Openzeppelin/introspection/IERC165.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1820Implementer": {
        "src": "contracts/IDO_basedon_Openzeppelin/introspection/IERC1820Implementer.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "canImplementInterfaceForAddress(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1820Registry": {
        "src": "contracts/IDO_basedon_Openzeppelin/introspection/IERC1820Registry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setManager(address,address)",
          "getManager(address)",
          "setInterfaceImplementer(address,bytes32,address)",
          "getInterfaceImplementer(address,bytes32)",
          "interfaceHash(string)",
          "updateERC165Cache(address,bytes4)",
          "implementsERC165Interface(address,bytes4)",
          "implementsERC165InterfaceNoCache(address,bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/IDO_basedon_Openzeppelin/lifecycle/Pausable.sol:15",
        "inherit": [
          "PauserRole",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/IDO_basedon_Openzeppelin/lifecycle/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "contracts/IDO_basedon_Openzeppelin/lifecycle/Pausable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/IDO_basedon_Openzeppelin/math/Math.sol:6",
        "version": {
          "withMetadata": "dbd2cd89abcd20910b1ed4947a546c9d2f2a4b941f276a459699396d5c78bd36",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/IDO_basedon_Openzeppelin/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "19f3357641d706056a506f87cc9bbd82b694c3fd958958a463baafcd7ea9fc5d",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressImpl": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/AddressImpl.sol:5",
        "version": {
          "withMetadata": "89d41d66386b1a71d72a41847d173d8221d415ec7c3962572da88ff42b1c7ada",
          "withoutMetadata": "46fa98da52e3daac12c6b93a15b2c0c8b6e16d6b8721f4a556d94ccccd269fe6",
          "linkedWithoutMetadata": "46fa98da52e3daac12c6b93a15b2c0c8b6e16d6b8721f4a556d94ccccd269fe6"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "isContract(address)",
          "toPayable(address)",
          "sendValue(address payable,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AllowanceCrowdsaleImpl": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/AllowanceCrowdsaleImpl.sol:6",
        "version": {
          "withMetadata": "d9e97cc3bbbebff16b494f6ff8be44270f856bc68b4deff90d569aa6485b17a8",
          "withoutMetadata": "d9e97cc3bbbebff16b494f6ff8be44270f856bc68b4deff90d569aa6485b17a8",
          "linkedWithoutMetadata": "d9e97cc3bbbebff16b494f6ff8be44270f856bc68b4deff90d569aa6485b17a8"
        },
        "inherit": [
          "AllowanceCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address payable,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AllowanceCrowdsaleImpl",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/AllowanceCrowdsaleImpl.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ArraysImpl": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ArraysImpl.sol:5",
        "version": {
          "withMetadata": "6de10ef3769890b1f6ea416690a22f7ba5869f7e5ab8c29edb7458838722b634",
          "withoutMetadata": "84847901beb3a32625adacf9e44f5c94981d8386190cee4f0cfe7218afa78f24",
          "linkedWithoutMetadata": "84847901beb3a32625adacf9e44f5c94981d8386190cee4f0cfe7218afa78f24"
        },
        "inherit": [],
        "libraries": [
          "Arrays"
        ],
        "methods": [
          "(uint256[])",
          "findUpperBound(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArraysImpl",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/ArraysImpl.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ArraysImpl",
              "label": "array",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts/IDO_basedon_Openzeppelin/mocks/ArraysImpl.sol:8"
            }
          ],
          "types": {
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CappedCrowdsaleImpl": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/CappedCrowdsaleImpl.sol:6",
        "version": {
          "withMetadata": "58c439d6448193c19122eb50f1ee12ddd6ca45bb30583dba994d69c5766780b2",
          "withoutMetadata": "58c439d6448193c19122eb50f1ee12ddd6ca45bb30583dba994d69c5766780b2",
          "linkedWithoutMetadata": "58c439d6448193c19122eb50f1ee12ddd6ca45bb30583dba994d69c5766780b2"
        },
        "inherit": [
          "CappedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CappedCrowdsaleImpl",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/CappedCrowdsaleImpl.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CapperRoleMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/CapperRoleMock.sol:5",
        "version": {
          "withMetadata": "4e89c71e36fa91c9a706de8bf48805647c5acbdb35fceaf301e26902b7bcc4c7",
          "withoutMetadata": "4e89c71e36fa91c9a706de8bf48805647c5acbdb35fceaf301e26902b7bcc4c7",
          "linkedWithoutMetadata": "4e89c71e36fa91c9a706de8bf48805647c5acbdb35fceaf301e26902b7bcc4c7"
        },
        "inherit": [
          "CapperRole",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "removeCapper(address)",
          "onlyCapperMock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ConditionalEscrowMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ConditionalEscrowMock.sol:6",
        "version": {
          "withMetadata": "d805cb716d87acd671d35ad30768e41c2229d4c0e8a5d8caecd5657f1ce0bcc0",
          "withoutMetadata": "6ac26eb830824af6bc3792bbbc80e8195f71bbca59fe32cd5ad875c402f799cd",
          "linkedWithoutMetadata": "6ac26eb830824af6bc3792bbbc80e8195f71bbca59fe32cd5ad875c402f799cd"
        },
        "inherit": [
          "ConditionalEscrow",
          "Escrow",
          "Secondary",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "setAllowed(address,bool)",
          "withdrawalAllowed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ConditionalEscrowMock",
              "label": "_allowed",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/IDO_basedon_Openzeppelin/mocks/ConditionalEscrowMock.sol:7"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ContextMock.sol:5",
        "version": {
          "withMetadata": "b57ad9d107000ab477970ef880d9e540d48abcf90e00a433a4b928fb1ea390b2",
          "withoutMetadata": "06c45a36b30bef6a668e114bcab0168e09684a994baa40449966b018be8d3f94",
          "linkedWithoutMetadata": "06c45a36b30bef6a668e114bcab0168e09684a994baa40449966b018be8d3f94"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "msgSender()",
          "msgData(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextMockCaller": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ContextMock.sol:19",
        "version": {
          "withMetadata": "bbc57741cfe7444af777bf4d7a3a59f5e0a2188fe5a1a47b4766ae3893ff0b63",
          "withoutMetadata": "b3740bc91030885c41c4274725a5b39e3d8d51c4e24802b9b3f9ca1c14c6a18d",
          "linkedWithoutMetadata": "b3740bc91030885c41c4274725a5b39e3d8d51c4e24802b9b3f9ca1c14c6a18d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "callSender(address)",
          "callData(address,uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CountersImpl": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/CountersImpl.sol:5",
        "version": {
          "withMetadata": "0714875551bd3275493f5fb85abd7427dc705d71ee4bda79a033eda45cc249d6",
          "withoutMetadata": "9cbfeb6f2d6f43324eaeaceb6b7988b4bdea155767033602cf554e228310e980",
          "linkedWithoutMetadata": "9cbfeb6f2d6f43324eaeaceb6b7988b4bdea155767033602cf554e228310e980"
        },
        "inherit": [],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "current()",
          "increment()",
          "decrement()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "CountersImpl",
              "label": "_counter",
              "type": "t_struct(Counter)3275_storage",
              "src": "contracts/IDO_basedon_Openzeppelin/mocks/CountersImpl.sol:8"
            }
          ],
          "types": {
            "t_struct(Counter)3275_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Create2Impl": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/Create2Impl.sol:6",
        "version": {
          "withMetadata": "eb2447067df464ed231fe2e43e0ec9cb95310c38946d7fd302ea70cd8beb8af0",
          "withoutMetadata": "36449262ef9246697e5b11a2a79e9819e1a29a3ca7c79109f0f5a0c5de2e0d0a",
          "linkedWithoutMetadata": "36449262ef9246697e5b11a2a79e9819e1a29a3ca7c79109f0f5a0c5de2e0d0a"
        },
        "inherit": [],
        "libraries": [
          "Create2"
        ],
        "methods": [
          "deploy(bytes32,bytes)",
          "deployERC20(bytes32)",
          "computeAddress(bytes32,bytes)",
          "computeAddress(bytes32,bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CrowdsaleMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/CrowdsaleMock.sol:5",
        "version": {
          "withMetadata": "c1cb65bbbd3f975e27b41f79d506cf7c70ab3b72c55d567d963c9e484f9dbafc",
          "withoutMetadata": "c1cb65bbbd3f975e27b41f79d506cf7c70ab3b72c55d567d963c9e484f9dbafc",
          "linkedWithoutMetadata": "c1cb65bbbd3f975e27b41f79d506cf7c70ab3b72c55d567d963c9e484f9dbafc"
        },
        "inherit": [
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address payable,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CrowdsaleMock",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/CrowdsaleMock.sol:6"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ECDSAMock.sol:5",
        "version": {
          "withMetadata": "6c771dc7c05197ab94142d72850c376e30c1a379966ba602c40ae28f37ae8a60",
          "withoutMetadata": "d795683c538cd0dfa7cecbd60d3a904764addb8dd8a6fffcdad72e3f1ad6343a",
          "linkedWithoutMetadata": "d795683c538cd0dfa7cecbd60d3a904764addb8dd8a6fffcdad72e3f1ad6343a"
        },
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [
          "recover(bytes32,bytes)",
          "toEthSignedMessageHash(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165InterfacesSupported": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC165/ERC165InterfacesSupported.sol:50",
        "version": {
          "withMetadata": "56a64a6d5ddec6031dc4680d1613ce425049a8690cfd3ea29693f89bd8a5caaf",
          "withoutMetadata": "56a64a6d5ddec6031dc4680d1613ce425049a8690cfd3ea29693f89bd8a5caaf",
          "linkedWithoutMetadata": "56a64a6d5ddec6031dc4680d1613ce425049a8690cfd3ea29693f89bd8a5caaf"
        },
        "inherit": [
          "SupportsInterfaceWithLookupMock",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(bytes4[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165InterfacesSupported",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC165/ERC165InterfacesSupported.sol:51"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SupportsInterfaceWithLookupMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC165/ERC165InterfacesSupported.sol:15",
        "version": {
          "withMetadata": "637964830dc914351d243041713079519c9333d441de5866c59ff99aa101b01e",
          "withoutMetadata": "637964830dc914351d243041713079519c9333d441de5866c59ff99aa101b01e",
          "linkedWithoutMetadata": "637964830dc914351d243041713079519c9333d441de5866c59ff99aa101b01e"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SupportsInterfaceWithLookupMock",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC165/ERC165InterfacesSupported.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SupportsInterfaceWithLookupMock",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC165/ERC165InterfacesSupported.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165Mock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC165Mock.sol:5",
        "version": {
          "withMetadata": "2b42cab8cce5746baa9b4cb493c5435ac96499738702113fac34c826f7fe6028",
          "withoutMetadata": "69fb309f33bb15233adc4ae8571e3bab5d086b3c62b2444e36e61860385fafe7",
          "linkedWithoutMetadata": "69fb309f33bb15233adc4ae8571e3bab5d086b3c62b2444e36e61860385fafe7"
        },
        "inherit": [
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "registerInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1820ImplementerMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC1820ImplementerMock.sol:5",
        "version": {
          "withMetadata": "432966c8e1813dcf9601a8f1bf810bc872af711adfee5a02629af66c38ba7312",
          "withoutMetadata": "9e79ccc2386663ae297fc48d85316207d58f85427f6aa75eaf30bd74dad6d43f",
          "linkedWithoutMetadata": "9e79ccc2386663ae297fc48d85316207d58f85427f6aa75eaf30bd74dad6d43f"
        },
        "inherit": [
          "ERC1820Implementer",
          "IERC1820Implementer"
        ],
        "libraries": [],
        "methods": [
          "registerInterfaceForAddress(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20BurnableMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC20BurnableMock.sol:5",
        "version": {
          "withMetadata": "4c465f86b843317d10a3735b5c59ebdb0effb9115d440ead8e32bb08f29db911",
          "withoutMetadata": "6f72c98e62597d6c85c5119efafe351a0d820d8293ab0dc629f6a7f8add26f19",
          "linkedWithoutMetadata": "6f72c98e62597d6c85c5119efafe351a0d820d8293ab0dc629f6a7f8add26f19"
        },
        "inherit": [
          "ERC20Burnable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20BurnableMock",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC20BurnableMock.sol:6"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20DetailedMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC20DetailedMock.sol:6",
        "version": {
          "withMetadata": "8b4863427b634467f701e59b6454a27600b27634dbbcaf69417037ab4404de00",
          "withoutMetadata": "d978ed39e981804cdaa2f4be9bd5a22a244ace1f46b65060b4a20a901ea9b251",
          "linkedWithoutMetadata": "d978ed39e981804cdaa2f4be9bd5a22a244ace1f46b65060b4a20a901ea9b251"
        },
        "inherit": [
          "ERC20Detailed",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20DetailedMock",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC20DetailedMock.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20MetadataMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC20MetadataMock.sol:6",
        "version": {
          "withMetadata": "dc1d93b7219e4e0d9847bd48ec719a6a7ef2095d6addaaeabfdc08d6800dcee4",
          "withoutMetadata": "ccc00d5ff55304dc2bc18440c20da7d6da615553c79cd53ee27cfdb04f27ea85",
          "linkedWithoutMetadata": "ccc00d5ff55304dc2bc18440c20da7d6da615553c79cd53ee27cfdb04f27ea85"
        },
        "inherit": [
          "ERC20Metadata",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string)",
          "setTokenURI(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20MetadataMock",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC20MetadataMock.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20MintableMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC20MintableMock.sol:6",
        "version": {
          "withMetadata": "bf9e6eaa73369cd7a95a65b2cdd49222d209ac2e4eae7e64a2f4e8a2032294c8",
          "withoutMetadata": "bf9e6eaa73369cd7a95a65b2cdd49222d209ac2e4eae7e64a2f4e8a2032294c8",
          "linkedWithoutMetadata": "bf9e6eaa73369cd7a95a65b2cdd49222d209ac2e4eae7e64a2f4e8a2032294c8"
        },
        "inherit": [
          "MinterRoleMock",
          "ERC20Mintable",
          "MinterRole",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Mock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC20Mock.sol:6",
        "version": {
          "withMetadata": "1a9e40e8b4bf3bfcf3e2d915d8285e430883722021fbdbd5c4443e5ffe46a6b4",
          "withoutMetadata": "27f6797e07f284d528f2ac97e1517280f83086732ca628b463017e0fc7abda30",
          "linkedWithoutMetadata": "27f6797e07f284d528f2ac97e1517280f83086732ca628b463017e0fc7abda30"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "burnFrom(address,uint256)",
          "transferInternal(address,address,uint256)",
          "approveInternal(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC20Mock.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PausableMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC20PausableMock.sol:7",
        "version": {
          "withMetadata": "50464d30adfa756a412fa42e5e0497d079ce326c48f94c2a2876a01119d01015",
          "withoutMetadata": "50464d30adfa756a412fa42e5e0497d079ce326c48f94c2a2876a01119d01015",
          "linkedWithoutMetadata": "50464d30adfa756a412fa42e5e0497d079ce326c48f94c2a2876a01119d01015"
        },
        "inherit": [
          "PauserRoleMock",
          "ERC20Pausable",
          "Pausable",
          "PauserRole",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PausableMock",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC20PausableMock.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20SnapshotMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC20SnapshotMock.sol:6",
        "version": {
          "withMetadata": "b5da1b5d5bef20499d527aee10d939ead1dc17078a42f5fed24171c0c9777fb1",
          "withoutMetadata": "9ee5f3dde357c1ddc9a5a59dc251171f5a7ffb47f5c379b21755b843181d4f25",
          "linkedWithoutMetadata": "9ee5f3dde357c1ddc9a5a59dc251171f5a7ffb47f5c379b21755b843181d4f25"
        },
        "inherit": [
          "ERC20Snapshot",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20SnapshotMock",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC20SnapshotMock.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721FullMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC721FullMock.sol:13",
        "version": {
          "withMetadata": "919022f17ba93daf77dbf66bc88b3aba5c3d77c718de9fb82031f3b9564accac",
          "withoutMetadata": "919022f17ba93daf77dbf66bc88b3aba5c3d77c718de9fb82031f3b9564accac",
          "linkedWithoutMetadata": "919022f17ba93daf77dbf66bc88b3aba5c3d77c718de9fb82031f3b9564accac"
        },
        "inherit": [
          "ERC721Burnable",
          "ERC721MetadataMintable",
          "ERC721Mintable",
          "MinterRole",
          "ERC721Full",
          "ERC721Metadata",
          "IERC721Metadata",
          "ERC721Enumerable",
          "IERC721Enumerable",
          "ERC721",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "exists(uint256)",
          "tokensOfOwner(address)",
          "setTokenURI(uint256,string)",
          "setBaseURI(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721FullMock",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC721FullMock.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721GSNRecipientMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC721GSNRecipientMock.sol:11",
        "version": {
          "withMetadata": "c878c4b58a2289769605d2bb64bcc851e8cc9a757f4216229641972090a5611a",
          "withoutMetadata": "c878c4b58a2289769605d2bb64bcc851e8cc9a757f4216229641972090a5611a",
          "linkedWithoutMetadata": "c878c4b58a2289769605d2bb64bcc851e8cc9a757f4216229641972090a5611a"
        },
        "inherit": [
          "GSNRecipientSignature",
          "GSNRecipient",
          "ERC721",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721GSNRecipientMock",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC721GSNRecipientMock.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721MintableBurnableImpl": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC721MintableBurnableImpl.sol:11",
        "version": {
          "withMetadata": "895fe0fdfad63c33ed98fa275dedaf04d22ce7aaeb46445dbc955d1ae79a6f2d",
          "withoutMetadata": "895fe0fdfad63c33ed98fa275dedaf04d22ce7aaeb46445dbc955d1ae79a6f2d",
          "linkedWithoutMetadata": "895fe0fdfad63c33ed98fa275dedaf04d22ce7aaeb46445dbc955d1ae79a6f2d"
        },
        "inherit": [
          "ERC721Burnable",
          "ERC721MetadataMintable",
          "ERC721Mintable",
          "MinterRole",
          "ERC721Full",
          "ERC721Metadata",
          "IERC721Metadata",
          "ERC721Enumerable",
          "IERC721Enumerable",
          "ERC721",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721MintableBurnableImpl",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC721MintableBurnableImpl.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Mock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC721Mock.sol:9",
        "version": {
          "withMetadata": "b044f73174ebf06a6cb5eb5cf0f77cb355cf04042d31c0c78ff2765edcb3537f",
          "withoutMetadata": "853f46d4863047646276cda1c89f8b0bfd8f3fd18311fa72f4e68321c57f7f83",
          "linkedWithoutMetadata": "853f46d4863047646276cda1c89f8b0bfd8f3fd18311fa72f4e68321c57f7f83"
        },
        "inherit": [
          "ERC721",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "safeMint(address,uint256)",
          "safeMint(address,uint256,bytes)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721PausableMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC721PausableMock.sol:10",
        "version": {
          "withMetadata": "2f100a6b2a7a5e3b15517084e6d147a17ee9aa5534997c2a39dafaf2953051f8",
          "withoutMetadata": "2f100a6b2a7a5e3b15517084e6d147a17ee9aa5534997c2a39dafaf2953051f8",
          "linkedWithoutMetadata": "2f100a6b2a7a5e3b15517084e6d147a17ee9aa5534997c2a39dafaf2953051f8"
        },
        "inherit": [
          "PauserRoleMock",
          "ERC721Pausable",
          "Pausable",
          "PauserRole",
          "ERC721",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721ReceiverMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC721ReceiverMock.sol:5",
        "version": {
          "withMetadata": "76f880191c9c18ef7f57eec9fe0dbade9f9cf263386a6e9eb6de8af00260b9df",
          "withoutMetadata": "2ae893d375d0acdb784cbffaab000f61f5fc8c9b4c239de3050d8068585e4be0",
          "linkedWithoutMetadata": "2ae893d375d0acdb784cbffaab000f61f5fc8c9b4c239de3050d8068585e4be0"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(bytes4,bool)",
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721ReceiverMock",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC721ReceiverMock.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721ReceiverMock",
              "label": "_retval",
              "type": "t_bytes4",
              "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC721ReceiverMock.sol:6"
            },
            {
              "contract": "ERC721ReceiverMock",
              "label": "_reverts",
              "type": "t_bool",
              "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC721ReceiverMock.sol:7"
            }
          ],
          "types": {
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC777Mock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC777Mock.sol:6",
        "version": {
          "withMetadata": "d071b9c303a33bf29933008eac925f642b90be313a9e8015e6bcc7f8c9e01533",
          "withoutMetadata": "d071b9c303a33bf29933008eac925f642b90be313a9e8015e6bcc7f8c9e01533",
          "linkedWithoutMetadata": "d071b9c303a33bf29933008eac925f642b90be313a9e8015e6bcc7f8c9e01533"
        },
        "inherit": [
          "ERC777",
          "IERC20",
          "IERC777",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string,address[])",
          "mintInternal(address,address,uint256,bytes,bytes)",
          "approveInternal(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC777Mock",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC777Mock.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC777SenderRecipientMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC777SenderRecipientMock.sol:10",
        "version": {
          "withMetadata": "406b1e0f098ed182ec87c3ced463e64b1d0edb1aec8a11f0f94eacad9ddd0646",
          "withoutMetadata": "d5806206a87372e01be84db6ad948dda0c079c793a7c22410bc91bd177f0a4e6",
          "linkedWithoutMetadata": "d5806206a87372e01be84db6ad948dda0c079c793a7c22410bc91bd177f0a4e6"
        },
        "inherit": [
          "ERC1820Implementer",
          "IERC1820Implementer",
          "IERC777Recipient",
          "IERC777Sender",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "tokensToSend(address,address,address,uint256,bytes,bytes)",
          "tokensReceived(address,address,address,uint256,bytes,bytes)",
          "senderFor(address)",
          "registerSender(address)",
          "recipientFor(address)",
          "registerRecipient(address)",
          "setShouldRevertSend(bool)",
          "setShouldRevertReceive(bool)",
          "send(address,address,uint256,bytes)",
          "burn(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_erc1820",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC777SenderRecipientMock.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC777SenderRecipientMock",
              "label": "_shouldRevertSend",
              "type": "t_bool",
              "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC777SenderRecipientMock.sol:35"
            },
            {
              "contract": "ERC777SenderRecipientMock",
              "label": "_shouldRevertReceive",
              "type": "t_bool",
              "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC777SenderRecipientMock.sol:36"
            },
            {
              "contract": "ERC777SenderRecipientMock",
              "label": "_erc1820",
              "type": "t_contract(IERC1820Registry)4531",
              "src": "contracts/IDO_basedon_Openzeppelin/mocks/ERC777SenderRecipientMock.sol:38"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC1820Registry)4531": {
              "label": "contract IERC1820Registry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FinalizableCrowdsaleImpl": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/FinalizableCrowdsaleImpl.sol:6",
        "version": {
          "withMetadata": "00b6fa09bec095225a16ec944d81535fb9e4698a9b44cf3df05a857196bf285f",
          "withoutMetadata": "00b6fa09bec095225a16ec944d81535fb9e4698a9b44cf3df05a857196bf285f",
          "linkedWithoutMetadata": "00b6fa09bec095225a16ec944d81535fb9e4698a9b44cf3df05a857196bf285f"
        },
        "inherit": [
          "FinalizableCrowdsale",
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256,uint256,address payable,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FinalizableCrowdsaleImpl",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/FinalizableCrowdsaleImpl.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GSNRecipientERC20FeeMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/GSNRecipientERC20FeeMock.sol:6",
        "version": {
          "withMetadata": "1b3e2e19c9bfedb984de50f321dc49e1f7b8edac71dee3bcfe6a9d5ce2fe7384",
          "withoutMetadata": "32ab173831b5d8a8df580a18b20aa5677981c8c430d547a20205f3fb8eef7100",
          "linkedWithoutMetadata": "32ab173831b5d8a8df580a18b20aa5677981c8c430d547a20205f3fb8eef7100"
        },
        "inherit": [
          "GSNRecipientERC20Fee",
          "GSNRecipient",
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "mockFunction()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GSNRecipientERC20FeeMock",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/GSNRecipientERC20FeeMock.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GSNRecipientMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/GSNRecipientMock.sol:7",
        "version": {
          "withMetadata": "fb576b977914602daac3923507580bb37da5329f19fe65b8614c3f957c8a03c8",
          "withoutMetadata": "d3addbe58ed0ef20a428c4ef2e9874f2d4542e1f60e66d9187bce6fac9555543",
          "linkedWithoutMetadata": "d3addbe58ed0ef20a428c4ef2e9874f2d4542e1f60e66d9187bce6fac9555543"
        },
        "inherit": [
          "GSNRecipient",
          "ContextMock",
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "withdrawDeposits(uint256,address payable)",
          "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)",
          "upgradeRelayHub(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GSNRecipientSignatureMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/GSNRecipientSignatureMock.sol:6",
        "version": {
          "withMetadata": "ca44393017aaf7f3a0bbc360e5c493ea0a9801d3c45dc4f5ee910fb9aa4ffdef",
          "withoutMetadata": "ca44393017aaf7f3a0bbc360e5c493ea0a9801d3c45dc4f5ee910fb9aa4ffdef",
          "linkedWithoutMetadata": "ca44393017aaf7f3a0bbc360e5c493ea0a9801d3c45dc4f5ee910fb9aa4ffdef"
        },
        "inherit": [
          "GSNRecipientSignature",
          "GSNRecipient",
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "mockFunction()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GSNRecipientSignatureMock",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/GSNRecipientSignatureMock.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IncreasingPriceCrowdsaleImpl": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/IncreasingPriceCrowdsaleImpl.sol:6",
        "version": {
          "withMetadata": "c082506b3cbce644fec342e244646daf48f8f34c3ebfce82044e2414fb037385",
          "withoutMetadata": "c082506b3cbce644fec342e244646daf48f8f34c3ebfce82044e2414fb037385",
          "linkedWithoutMetadata": "c082506b3cbce644fec342e244646daf48f8f34c3ebfce82044e2414fb037385"
        },
        "inherit": [
          "IncreasingPriceCrowdsale",
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256,address payable,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IncreasingPriceCrowdsaleImpl",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/IncreasingPriceCrowdsaleImpl.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IndividuallyCappedCrowdsaleImpl": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/IndividuallyCappedCrowdsaleImpl.sol:7",
        "version": {
          "withMetadata": "ac3b57bb485a76723f596d033c3e3ce0fd9939b935a52e227d1320b8e391c485",
          "withoutMetadata": "ac3b57bb485a76723f596d033c3e3ce0fd9939b935a52e227d1320b8e391c485",
          "linkedWithoutMetadata": "ac3b57bb485a76723f596d033c3e3ce0fd9939b935a52e227d1320b8e391c485"
        },
        "inherit": [
          "CapperRoleMock",
          "IndividuallyCappedCrowdsale",
          "CapperRole",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address payable,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IndividuallyCappedCrowdsaleImpl",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/IndividuallyCappedCrowdsaleImpl.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MathMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/MathMock.sol:5",
        "version": {
          "withMetadata": "fb5e19eed76f76d17f71dfec7c1852e3d32713ff8573482e19c6ddd6a80f548a",
          "withoutMetadata": "aa56c1a34fa0eaa2e0d4355e1bd81e3b6dbeb9bb74953b347ea38fd09f1a861b",
          "linkedWithoutMetadata": "aa56c1a34fa0eaa2e0d4355e1bd81e3b6dbeb9bb74953b347ea38fd09f1a861b"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [
          "max(uint256,uint256)",
          "min(uint256,uint256)",
          "average(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MintedCrowdsaleImpl": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/MintedCrowdsaleImpl.sol:6",
        "version": {
          "withMetadata": "b280c4b0912d9a4aacd37d8e465ed1f55952b4ec796675b1db1d7f608bc0384b",
          "withoutMetadata": "b280c4b0912d9a4aacd37d8e465ed1f55952b4ec796675b1db1d7f608bc0384b",
          "linkedWithoutMetadata": "b280c4b0912d9a4aacd37d8e465ed1f55952b4ec796675b1db1d7f608bc0384b"
        },
        "inherit": [
          "MintedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address payable,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MintedCrowdsaleImpl",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/MintedCrowdsaleImpl.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MinterRoleMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/MinterRoleMock.sol:5",
        "version": {
          "withMetadata": "d18d49eeebcddc02b4be6a6c5028275092c652a2bec6013f9dfe23428d0c47e0",
          "withoutMetadata": "d18d49eeebcddc02b4be6a6c5028275092c652a2bec6013f9dfe23428d0c47e0",
          "linkedWithoutMetadata": "d18d49eeebcddc02b4be6a6c5028275092c652a2bec6013f9dfe23428d0c47e0"
        },
        "inherit": [
          "MinterRole",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "removeMinter(address)",
          "onlyMinterMock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableInterfaceId": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/OwnableInterfaceId.sol:10",
        "version": {
          "withMetadata": "cc3b94b59a288dc267a59f4c4d91601cca9197ca1d10c0708ff9ccd5bda97ec2",
          "withoutMetadata": "a3f3c5ef8df2ae523f4fc80d4a76c7aa803fee6a3105e7d4fe2cf589e2fa471f",
          "linkedWithoutMetadata": "a3f3c5ef8df2ae523f4fc80d4a76c7aa803fee6a3105e7d4fe2cf589e2fa471f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInterfaceId()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/OwnableMock.sol:5",
        "version": {
          "withMetadata": "db60df351a014a5b55c9c50371f2a7ffc55e9a4aa381dcc1b1fa9d6c601c2ff9",
          "withoutMetadata": "63c7bda1e660fe493bd4ee87a619683dd215a1f2d116736976ee6724abda6409",
          "linkedWithoutMetadata": "63c7bda1e660fe493bd4ee87a619683dd215a1f2d116736976ee6724abda6409"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PausableCrowdsaleImpl": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/PausableCrowdsaleImpl.sol:6",
        "version": {
          "withMetadata": "4fd25db358494e64cad5c73b7216591807e1e2db74792152b1bc03f96e77c5d4",
          "withoutMetadata": "4fd25db358494e64cad5c73b7216591807e1e2db74792152b1bc03f96e77c5d4",
          "linkedWithoutMetadata": "4fd25db358494e64cad5c73b7216591807e1e2db74792152b1bc03f96e77c5d4"
        },
        "inherit": [
          "PausableCrowdsale",
          "Pausable",
          "PauserRole",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address payable,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PausableCrowdsaleImpl",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/PausableCrowdsaleImpl.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PausableMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/PausableMock.sol:7",
        "version": {
          "withMetadata": "8b83945a5e4bbadfce2b2e0ef10820bd2d5f85a663fbc92bf80b93fe28b682bd",
          "withoutMetadata": "8b83945a5e4bbadfce2b2e0ef10820bd2d5f85a663fbc92bf80b93fe28b682bd",
          "linkedWithoutMetadata": "8b83945a5e4bbadfce2b2e0ef10820bd2d5f85a663fbc92bf80b93fe28b682bd"
        },
        "inherit": [
          "PauserRoleMock",
          "Pausable",
          "PauserRole",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "normalProcess()",
          "drasticMeasure()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PausableMock",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/PausableMock.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PausableMock",
              "label": "drasticMeasureTaken",
              "type": "t_bool",
              "src": "contracts/IDO_basedon_Openzeppelin/mocks/PausableMock.sol:8"
            },
            {
              "contract": "PausableMock",
              "label": "count",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/mocks/PausableMock.sol:9"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PauserRoleMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/PauserRoleMock.sol:5",
        "version": {
          "withMetadata": "dc02352f9fe6ef48943a89198c03ef28acf653e4743ef47883fbe844982ca623",
          "withoutMetadata": "dc02352f9fe6ef48943a89198c03ef28acf653e4743ef47883fbe844982ca623",
          "linkedWithoutMetadata": "dc02352f9fe6ef48943a89198c03ef28acf653e4743ef47883fbe844982ca623"
        },
        "inherit": [
          "PauserRole",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "removePauser(address)",
          "onlyPauserMock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PostDeliveryCrowdsaleImpl": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/PostDeliveryCrowdsaleImpl.sol:6",
        "version": {
          "withMetadata": "913a13f1726cf8addb4c93be822bd951263b6588f17f0383cfdde969797383aa",
          "withoutMetadata": "913a13f1726cf8addb4c93be822bd951263b6588f17f0383cfdde969797383aa",
          "linkedWithoutMetadata": "913a13f1726cf8addb4c93be822bd951263b6588f17f0383cfdde969797383aa"
        },
        "inherit": [
          "PostDeliveryCrowdsale",
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256,uint256,address payable,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PostDeliveryCrowdsaleImpl",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/PostDeliveryCrowdsaleImpl.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PullPaymentMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/PullPaymentMock.sol:6",
        "version": {
          "withMetadata": "8a3757e6c2d5e29e6c331a2563ade9f90b14dbd4dda1fab455aec0be3271912f",
          "withoutMetadata": "65f6772995ff3161a34ae23c8f4c5bd12314932acb8ec295a8d5c9e296cfd3ed",
          "linkedWithoutMetadata": "65f6772995ff3161a34ae23c8f4c5bd12314932acb8ec295a8d5c9e296cfd3ed"
        },
        "inherit": [
          "PullPayment"
        ],
        "libraries": [],
        "methods": [
          "()",
          "callTransfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyAttack": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ReentrancyAttack.sol:4",
        "version": {
          "withMetadata": "3e76704a2b17e440b54ea614b5eda04314fa2cbc37fbc156fbf962b8d7a21fcc",
          "withoutMetadata": "3aaea6aaaab3a05d8a1299bc730bd8e334b42875693a2742af4f03101bdf25f8",
          "linkedWithoutMetadata": "3aaea6aaaab3a05d8a1299bc730bd8e334b42875693a2742af4f03101bdf25f8"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "callSender(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/ReentrancyMock.sol:6",
        "version": {
          "withMetadata": "b98316d97671868e251f61a3979c89e52b64ce9d5d23df8dea0c5d9aa6f2031a",
          "withoutMetadata": "fd57db822b70effa709f45ed90e036f1653ee4d2d2e1179dd16053a0fd6d0ab5",
          "linkedWithoutMetadata": "fd57db822b70effa709f45ed90e036f1653ee4d2d2e1179dd16053a0fd6d0ab5"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [],
        "methods": [
          "()",
          "callback()",
          "countLocalRecursive(uint256)",
          "countThisRecursive(uint256)",
          "countAndCall(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyMock",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/ReentrancyMock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyMock",
              "label": "counter",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/mocks/ReentrancyMock.sol:7"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "RefundableCrowdsaleImpl": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/RefundableCrowdsaleImpl.sol:6",
        "version": {
          "withMetadata": "6e4b53761f593605abc6949c84ba9043b8a0a16a9e59762c82c973690f06d890",
          "withoutMetadata": "6e4b53761f593605abc6949c84ba9043b8a0a16a9e59762c82c973690f06d890",
          "linkedWithoutMetadata": "6e4b53761f593605abc6949c84ba9043b8a0a16a9e59762c82c973690f06d890"
        },
        "inherit": [
          "RefundableCrowdsale",
          "FinalizableCrowdsale",
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256,uint256,address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RefundableCrowdsaleImpl",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/RefundableCrowdsaleImpl.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RefundablePostDeliveryCrowdsaleImpl": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/RefundablePostDeliveryCrowdsaleImpl.sol:6",
        "version": {
          "withMetadata": "1e37bebb795809203b6cc93686c8ebb72f473f7f231e8e180d4c19b8abb4da87",
          "withoutMetadata": "1e37bebb795809203b6cc93686c8ebb72f473f7f231e8e180d4c19b8abb4da87",
          "linkedWithoutMetadata": "1e37bebb795809203b6cc93686c8ebb72f473f7f231e8e180d4c19b8abb4da87"
        },
        "inherit": [
          "RefundablePostDeliveryCrowdsale",
          "PostDeliveryCrowdsale",
          "RefundableCrowdsale",
          "FinalizableCrowdsale",
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256,uint256,address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RefundablePostDeliveryCrowdsaleImpl",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/RefundablePostDeliveryCrowdsaleImpl.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RolesMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/RolesMock.sol:5",
        "version": {
          "withMetadata": "acb9fa1b5beb40fc2cd6c536ce2a7e9b1ad3d79370fbf55721c44c4213a57bbc",
          "withoutMetadata": "2a23a3dfdc2f69d101e8324e14bcd9abaa48a77e5d47b4540ab434bb436a7d12",
          "linkedWithoutMetadata": "2a23a3dfdc2f69d101e8324e14bcd9abaa48a77e5d47b4540ab434bb436a7d12"
        },
        "inherit": [],
        "libraries": [
          "Roles"
        ],
        "methods": [
          "add(address)",
          "remove(address)",
          "has(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "RolesMock",
              "label": "dummyRole",
              "type": "t_struct(Role)1187_storage",
              "src": "contracts/IDO_basedon_Openzeppelin/mocks/RolesMock.sol:8"
            }
          ],
          "types": {
            "t_struct(Role)1187_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20NoReturnMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/SafeERC20Helper.sol:66",
        "version": {
          "withMetadata": "3098de8d3d50323929e5fc892f029689134c26ab6613c0235a3d74c486642cc3",
          "withoutMetadata": "a294ffed3a7a058ee0c55019f685a0499971c2c06da4570ef66742ad18c63cf7",
          "linkedWithoutMetadata": "a294ffed3a7a058ee0c55019f685a0499971c2c06da4570ef66742ad18c63cf7"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setAllowance(uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20NoReturnMock",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/IDO_basedon_Openzeppelin/mocks/SafeERC20Helper.sol:67"
            },
            {
              "contract": "ERC20NoReturnMock",
              "label": "_dummy",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/mocks/SafeERC20Helper.sol:71"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20ReturnFalseMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/SafeERC20Helper.sol:7",
        "version": {
          "withMetadata": "78899d56da68fcdf688a6540cbc951a789b10f91a0614f525af1ada50f489873",
          "withoutMetadata": "5d6f35e1dbd803b5b5c6354b187b63c1a69491145eda567e764289bd78c60062",
          "linkedWithoutMetadata": "5d6f35e1dbd803b5b5c6354b187b63c1a69491145eda567e764289bd78c60062"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20ReturnFalseMock",
              "label": "_allowance",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/mocks/SafeERC20Helper.sol:8"
            },
            {
              "contract": "ERC20ReturnFalseMock",
              "label": "_dummy",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/mocks/SafeERC20Helper.sol:12"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20ReturnTrueMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/SafeERC20Helper.sol:35",
        "version": {
          "withMetadata": "8334501016f445d7342a1fb2cc14b00008f7d49a7f3537efef2a8f476c8faa0c",
          "withoutMetadata": "cb0369e99ab9dee46de544d3ee5262dfe13f79f54c10c45be37d6e0a00c9205c",
          "linkedWithoutMetadata": "cb0369e99ab9dee46de544d3ee5262dfe13f79f54c10c45be37d6e0a00c9205c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setAllowance(uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20ReturnTrueMock",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/IDO_basedon_Openzeppelin/mocks/SafeERC20Helper.sol:36"
            },
            {
              "contract": "ERC20ReturnTrueMock",
              "label": "_dummy",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/mocks/SafeERC20Helper.sol:40"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Wrapper": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/SafeERC20Helper.sol:94",
        "version": {
          "withMetadata": "a0a00116e021570470330a65f9657eab81f5254286b0b157f15bd0e55d90d080",
          "withoutMetadata": "20c8db57ba9022ece2edbcaa08635576a4c6d957f653922c263e69093a6190c6",
          "linkedWithoutMetadata": "20c8db57ba9022ece2edbcaa08635576a4c6d957f653922c263e69093a6190c6"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)",
          "transfer()",
          "transferFrom()",
          "approve(uint256)",
          "increaseAllowance(uint256)",
          "decreaseAllowance(uint256)",
          "setAllowance(uint256)",
          "allowance()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SafeERC20Wrapper",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/SafeERC20Helper.sol:99"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SafeERC20Wrapper",
              "label": "_token",
              "type": "t_contract(IERC20)9442",
              "src": "contracts/IDO_basedon_Openzeppelin/mocks/SafeERC20Helper.sol:97"
            }
          ],
          "types": {
            "t_contract(IERC20)9442": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/SafeMathMock.sol:5",
        "version": {
          "withMetadata": "988c4ad0cf3af105291d93e9660030dd933b470a36752a7e065cb1f60ce51636",
          "withoutMetadata": "0d3e4880e8c349708f6cf91bea2728b3dd8b22da793c936afa1bf4ea568f1f23",
          "linkedWithoutMetadata": "0d3e4880e8c349708f6cf91bea2728b3dd8b22da793c936afa1bf4ea568f1f23"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "mul(uint256,uint256)",
          "div(uint256,uint256)",
          "sub(uint256,uint256)",
          "add(uint256,uint256)",
          "mod(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SecondaryMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/SecondaryMock.sol:5",
        "version": {
          "withMetadata": "1cbba528aa33c866fb43e4b2dd564b08084d2e7cad3379e454007c0ffe85cd10",
          "withoutMetadata": "b6ab6c0fe273774304b7b616ed48cd829dc838185806e3ce5c3733223be55a5b",
          "linkedWithoutMetadata": "b6ab6c0fe273774304b7b616ed48cd829dc838185806e3ce5c3733223be55a5b"
        },
        "inherit": [
          "Secondary",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "onlyPrimaryMock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SignerRoleMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/SignerRoleMock.sol:5",
        "version": {
          "withMetadata": "38a13229a41b9e3d1e5d23d8528a45eae40c61c2c48a5f6e7d77c60d8af1b5c1",
          "withoutMetadata": "38a13229a41b9e3d1e5d23d8528a45eae40c61c2c48a5f6e7d77c60d8af1b5c1",
          "linkedWithoutMetadata": "38a13229a41b9e3d1e5d23d8528a45eae40c61c2c48a5f6e7d77c60d8af1b5c1"
        },
        "inherit": [
          "SignerRole",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "removeSigner(address)",
          "onlySignerMock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimedCrowdsaleImpl": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/TimedCrowdsaleImpl.sol:6",
        "version": {
          "withMetadata": "8272e6faad32094b466a00201b6bf73b7bd31ed215b9bbe62da0528205eb1d7a",
          "withoutMetadata": "8272e6faad32094b466a00201b6bf73b7bd31ed215b9bbe62da0528205eb1d7a",
          "linkedWithoutMetadata": "8272e6faad32094b466a00201b6bf73b7bd31ed215b9bbe62da0528205eb1d7a"
        },
        "inherit": [
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256,uint256,address payable,address)",
          "extendTime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TimedCrowdsaleImpl",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/TimedCrowdsaleImpl.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WhitelistAdminRoleMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/WhitelistAdminRoleMock.sol:5",
        "version": {
          "withMetadata": "ebe5738a38cc935c2f4ea533bfb831380d7a78a24c0e1ac7edbb20336ad85f22",
          "withoutMetadata": "ebe5738a38cc935c2f4ea533bfb831380d7a78a24c0e1ac7edbb20336ad85f22",
          "linkedWithoutMetadata": "ebe5738a38cc935c2f4ea533bfb831380d7a78a24c0e1ac7edbb20336ad85f22"
        },
        "inherit": [
          "WhitelistAdminRole",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "removeWhitelistAdmin(address)",
          "onlyWhitelistAdminMock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WhitelistCrowdsaleImpl": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/WhitelistCrowdsaleImpl.sol:8",
        "version": {
          "withMetadata": "0354f0ae6ebaa0a7d5f2ce7e64126973afb1a75d853d72186fa3eddf1a162464",
          "withoutMetadata": "0354f0ae6ebaa0a7d5f2ce7e64126973afb1a75d853d72186fa3eddf1a162464",
          "linkedWithoutMetadata": "0354f0ae6ebaa0a7d5f2ce7e64126973afb1a75d853d72186fa3eddf1a162464"
        },
        "inherit": [
          "WhitelistCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "WhitelistedRole",
          "WhitelistAdminRole",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address payable,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WhitelistCrowdsaleImpl",
            "src": "contracts/IDO_basedon_Openzeppelin/mocks/WhitelistCrowdsaleImpl.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WhitelistedRoleMock": {
        "src": "contracts/IDO_basedon_Openzeppelin/mocks/WhitelistedRoleMock.sol:5",
        "version": {
          "withMetadata": "baf9b88c56ce176e32b13f064ebe881405f32e6bcfb834d4ce76e559641b1807",
          "withoutMetadata": "baf9b88c56ce176e32b13f064ebe881405f32e6bcfb834d4ce76e559641b1807",
          "linkedWithoutMetadata": "baf9b88c56ce176e32b13f064ebe881405f32e6bcfb834d4ce76e559641b1807"
        },
        "inherit": [
          "WhitelistedRole",
          "WhitelistAdminRole",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "onlyWhitelistedMock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/IDO_basedon_Openzeppelin/ownership/Ownable.sol:13",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/IDO_basedon_Openzeppelin/ownership/Ownable.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/IDO_basedon_Openzeppelin/ownership/Ownable.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Secondary": {
        "src": "contracts/IDO_basedon_Openzeppelin/ownership/Secondary.sol:7",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "primary()",
          "transferPrimary(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Secondary",
            "src": "contracts/IDO_basedon_Openzeppelin/ownership/Secondary.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Secondary",
              "label": "_primary",
              "type": "t_address",
              "src": "contracts/IDO_basedon_Openzeppelin/ownership/Secondary.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PaymentSplitter": {
        "src": "contracts/IDO_basedon_Openzeppelin/payment/PaymentSplitter.sol:19",
        "version": {
          "withMetadata": "098c866b874bc38f45d16e5e4f9c0be9fe6e84f1a06396fd89394a1cd93851d6",
          "withoutMetadata": "098c866b874bc38f45d16e5e4f9c0be9fe6e84f1a06396fd89394a1cd93851d6",
          "linkedWithoutMetadata": "098c866b874bc38f45d16e5e4f9c0be9fe6e84f1a06396fd89394a1cd93851d6"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address[],uint256[])",
          "()",
          "totalShares()",
          "totalReleased()",
          "shares(address)",
          "released(address)",
          "payee(uint256)",
          "release(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PaymentSplitter",
            "src": "contracts/IDO_basedon_Openzeppelin/payment/PaymentSplitter.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PaymentSplitter",
              "label": "_totalShares",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/payment/PaymentSplitter.sol:26"
            },
            {
              "contract": "PaymentSplitter",
              "label": "_totalReleased",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/payment/PaymentSplitter.sol:27"
            },
            {
              "contract": "PaymentSplitter",
              "label": "_shares",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/IDO_basedon_Openzeppelin/payment/PaymentSplitter.sol:29"
            },
            {
              "contract": "PaymentSplitter",
              "label": "_released",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/IDO_basedon_Openzeppelin/payment/PaymentSplitter.sol:30"
            },
            {
              "contract": "PaymentSplitter",
              "label": "_payees",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/IDO_basedon_Openzeppelin/payment/PaymentSplitter.sol:31"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PullPayment": {
        "src": "contracts/IDO_basedon_Openzeppelin/payment/PullPayment.sol:23",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawPayments(address payable)",
          "withdrawPaymentsWithGas(address payable)",
          "payments(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PullPayment",
            "src": "contracts/IDO_basedon_Openzeppelin/payment/PullPayment.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PullPayment",
              "label": "_escrow",
              "type": "t_contract(Escrow)8531",
              "src": "contracts/IDO_basedon_Openzeppelin/payment/PullPayment.sol:24"
            }
          ],
          "types": {
            "t_contract(Escrow)8531": {
              "label": "contract Escrow"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ConditionalEscrow": {
        "src": "contracts/IDO_basedon_Openzeppelin/payment/escrow/ConditionalEscrow.sol:10",
        "inherit": [
          "Escrow",
          "Secondary",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "withdrawalAllowed(address)",
          "withdraw(address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Escrow": {
        "src": "contracts/IDO_basedon_Openzeppelin/payment/escrow/Escrow.sol:20",
        "version": {
          "withMetadata": "5461981c96921ab71c01c569cd4700be263a6f1dafd4c4881808a0898d797ed6",
          "withoutMetadata": "9a5e92ee31b98da9f53d3e6545900180949e42628e9efaea16c03fd91cb9cb34",
          "linkedWithoutMetadata": "9a5e92ee31b98da9f53d3e6545900180949e42628e9efaea16c03fd91cb9cb34"
        },
        "inherit": [
          "Secondary",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "depositsOf(address)",
          "deposit(address)",
          "withdraw(address payable)",
          "withdrawWithGas(address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Escrow",
              "label": "_deposits",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/IDO_basedon_Openzeppelin/payment/escrow/Escrow.sol:27"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "RefundEscrow": {
        "src": "contracts/IDO_basedon_Openzeppelin/payment/escrow/RefundEscrow.sol:16",
        "version": {
          "withMetadata": "80fd3b295758c042fa74906ea9d4749fa47a9e15afb8c7867de593d0dfbc4a0e",
          "withoutMetadata": "80fd3b295758c042fa74906ea9d4749fa47a9e15afb8c7867de593d0dfbc4a0e",
          "linkedWithoutMetadata": "80fd3b295758c042fa74906ea9d4749fa47a9e15afb8c7867de593d0dfbc4a0e"
        },
        "inherit": [
          "ConditionalEscrow",
          "Escrow",
          "Secondary",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "state()",
          "beneficiary()",
          "deposit(address)",
          "close()",
          "enableRefunds()",
          "beneficiaryWithdraw()",
          "withdrawalAllowed(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RefundEscrow",
            "src": "contracts/IDO_basedon_Openzeppelin/payment/escrow/RefundEscrow.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "RefundEscrow",
              "label": "_state",
              "type": "t_enum(State)8540",
              "src": "contracts/IDO_basedon_Openzeppelin/payment/escrow/RefundEscrow.sol:22"
            },
            {
              "contract": "RefundEscrow",
              "label": "_beneficiary",
              "type": "t_address_payable",
              "src": "contracts/IDO_basedon_Openzeppelin/payment/escrow/RefundEscrow.sol:23"
            }
          ],
          "types": {
            "t_enum(State)8540": {
              "label": "enum RefundEscrow.State",
              "members": [
                "Active",
                "Refunding",
                "Closed"
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC20/ERC20.sol:31",
        "version": {
          "withMetadata": "80e21d3923e4f2471f6126584bb979ae299c37f495784f0faa3bc429c1b296aa",
          "withoutMetadata": "d002861bd2a7fafd3fa88dd948e2d79a4cbee990a42f8a4fb78c61fbb247db0d",
          "linkedWithoutMetadata": "d002861bd2a7fafd3fa88dd948e2d79a4cbee990a42f8a4fb78c61fbb247db0d"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC20/ERC20.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC20/ERC20Burnable.sol:11",
        "version": {
          "withMetadata": "41cb852ced4bba926515f2620062e584cdd2f097d52290f58f333e2a8922944a",
          "withoutMetadata": "e727391d2078930497d9261274f56ccb8af3132f528be4909c5c77174920ad2f",
          "linkedWithoutMetadata": "e727391d2078930497d9261274f56ccb8af3132f528be4909c5c77174920ad2f"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Capped": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC20/ERC20Capped.sol:8",
        "version": {
          "withMetadata": "75d99b68370c0c4eef7933cb89386594bf58ae4a37e3ea9fd8287e0cdf009c0a",
          "withoutMetadata": "75d99b68370c0c4eef7933cb89386594bf58ae4a37e3ea9fd8287e0cdf009c0a",
          "linkedWithoutMetadata": "75d99b68370c0c4eef7933cb89386594bf58ae4a37e3ea9fd8287e0cdf009c0a"
        },
        "inherit": [
          "ERC20Mintable",
          "MinterRole",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "cap()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Capped",
            "src": "contracts/IDO_basedon_Openzeppelin/token/ERC20/ERC20Capped.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Capped",
              "label": "_cap",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC20/ERC20Capped.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC20/ERC20Detailed.sol:8",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)",
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts/IDO_basedon_Openzeppelin/token/ERC20/ERC20Detailed.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC20/ERC20Detailed.sol:9"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC20/ERC20Detailed.sol:10"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC20/ERC20Detailed.sol:11"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Mintable": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC20/ERC20Mintable.sol:12",
        "version": {
          "withMetadata": "9da40f9db5d92e40bdfa86b06f5ab100cf933c3df986375fad823931d1c418a6",
          "withoutMetadata": "9da40f9db5d92e40bdfa86b06f5ab100cf933c3df986375fad823931d1c418a6",
          "linkedWithoutMetadata": "9da40f9db5d92e40bdfa86b06f5ab100cf933c3df986375fad823931d1c418a6"
        },
        "inherit": [
          "MinterRole",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC20/ERC20Pausable.sol:14",
        "version": {
          "withMetadata": "08e032732e5a62a4ae227d79f3bd270608a4d0202e0c0b0510bda2201193c3bd",
          "withoutMetadata": "08e032732e5a62a4ae227d79f3bd270608a4d0202e0c0b0510bda2201193c3bd",
          "linkedWithoutMetadata": "08e032732e5a62a4ae227d79f3bd270608a4d0202e0c0b0510bda2201193c3bd"
        },
        "inherit": [
          "Pausable",
          "PauserRole",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC20/IERC20.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC20/SafeERC20.sol:16",
        "version": {
          "withMetadata": "824871682f5144aa3fd51142358670a9985ca64aa4e8c8f5617e8f654350b538",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TokenTimelock": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC20/TokenTimelock.sol:14",
        "version": {
          "withMetadata": "d98bac915d24f7935d5790310e34f1e04a68e251530c1b06ccae249d2312f06f",
          "withoutMetadata": "d98bac915d24f7935d5790310e34f1e04a68e251530c1b06ccae249d2312f06f",
          "linkedWithoutMetadata": "d98bac915d24f7935d5790310e34f1e04a68e251530c1b06ccae249d2312f06f"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256)",
          "token()",
          "beneficiary()",
          "releaseTime()",
          "release()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenTimelock",
            "src": "contracts/IDO_basedon_Openzeppelin/token/ERC20/TokenTimelock.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TokenTimelock",
              "label": "_token",
              "type": "t_contract(IERC20)9442",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC20/TokenTimelock.sol:18"
            },
            {
              "contract": "TokenTimelock",
              "label": "_beneficiary",
              "type": "t_address",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC20/TokenTimelock.sol:21"
            },
            {
              "contract": "TokenTimelock",
              "label": "_releaseTime",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC20/TokenTimelock.sol:24"
            }
          ],
          "types": {
            "t_contract(IERC20)9442": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/ERC721.sol:15",
        "version": {
          "withMetadata": "b666e3941e89bc528da3f2f720aca141c76697496ccfe8b8e213a552684db1e5",
          "withoutMetadata": "2fcc22ba56e241e54fe023aaccd4b31717e7340e99cfde9e66e83d28fadfda04",
          "linkedWithoutMetadata": "2fcc22ba56e241e54fe023aaccd4b31717e7340e99cfde9e66e83d28fadfda04"
        },
        "inherit": [
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "Counters"
        ],
        "methods": [
          "()",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/ERC721.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_tokenOwner",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/ERC721.sol:25"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/ERC721.sol:28"
            },
            {
              "contract": "ERC721",
              "label": "_ownedTokensCount",
              "type": "t_mapping(t_address,t_struct(Counter)3275_storage)",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/ERC721.sol:31"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_struct(Counter)3275_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_struct(Counter)3275_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721Burnable": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/ERC721Burnable.sol:10",
        "version": {
          "withMetadata": "bb1ecca26147eeae6870680d2f2eae819689ccbe4e00443d89b40f04b9f3974a",
          "withoutMetadata": "4ff77620beea74e5638a5935168912fc78ff6413fae3c47048fe99fb867e0ac1",
          "linkedWithoutMetadata": "4ff77620beea74e5638a5935168912fc78ff6413fae3c47048fe99fb867e0ac1"
        },
        "inherit": [
          "ERC721",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Enumerable": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/ERC721Enumerable.sol:12",
        "version": {
          "withMetadata": "2352488426d57187c36030f6039aab97297861c133698923d8379d6497dc65ae",
          "withoutMetadata": "a1d021c87e6f8acb694d798c807ea7bb6fc2abb8aebb32b7639ef9d74a8c8e0a",
          "linkedWithoutMetadata": "a1d021c87e6f8acb694d798c807ea7bb6fc2abb8aebb32b7639ef9d74a8c8e0a"
        },
        "inherit": [
          "IERC721Enumerable",
          "ERC721",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Enumerable",
            "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/ERC721Enumerable.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/ERC721Enumerable.sol:14"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/ERC721Enumerable.sol:17"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/ERC721Enumerable.sol:20"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/ERC721Enumerable.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721Full": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/ERC721Full.sol:14",
        "version": {
          "withMetadata": "e09c56c37d9ef9369820c1707e7afe7400bfecf54b7ca6f33ea1e2a86dd193b4",
          "withoutMetadata": "784c502bb062fdf481d9271f7065d37975bd7f89fc5cc60ee9f5777a5489c3d6",
          "linkedWithoutMetadata": "784c502bb062fdf481d9271f7065d37975bd7f89fc5cc60ee9f5777a5489c3d6"
        },
        "inherit": [
          "ERC721Metadata",
          "IERC721Metadata",
          "ERC721Enumerable",
          "IERC721Enumerable",
          "ERC721",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Full",
            "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/ERC721Full.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/ERC721Holder.sol:5",
        "version": {
          "withMetadata": "247fa8306e5e0b12ca9d6379dbaa6d54601c081f9a69419c12d7e0482195aba9",
          "withoutMetadata": "41696ee38da8debe45d8232860718a7c6f4e6fa6e2963c19e2aea8caded6a969",
          "linkedWithoutMetadata": "41696ee38da8debe45d8232860718a7c6f4e6fa6e2963c19e2aea8caded6a969"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Metadata": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/ERC721Metadata.sol:8",
        "version": {
          "withMetadata": "8329e3df38917a8c04552c31c2606b29996eaf2e36bc0bc6dc0a52db05fd72d2",
          "withoutMetadata": "28d550ae4eaa9440347c97475a7f5c4f724ca4795d259c5d7a7f15a421aae8a0",
          "linkedWithoutMetadata": "28d550ae4eaa9440347c97475a7f5c4f724ca4795d259c5d7a7f15a421aae8a0"
        },
        "inherit": [
          "IERC721Metadata",
          "ERC721",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Metadata",
            "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/ERC721Metadata.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Metadata",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/ERC721Metadata.sol:10"
            },
            {
              "contract": "ERC721Metadata",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/ERC721Metadata.sol:13"
            },
            {
              "contract": "ERC721Metadata",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/ERC721Metadata.sol:16"
            },
            {
              "contract": "ERC721Metadata",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/ERC721Metadata.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721MetadataMintable": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/ERC721MetadataMintable.sol:11",
        "inherit": [
          "MinterRole",
          "ERC721Metadata",
          "IERC721Metadata",
          "ERC721",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "mintWithTokenURI(address,uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Mintable": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/ERC721Mintable.sol:10",
        "version": {
          "withMetadata": "d097037399b2168124f750173339bcbc2b0380d414c8afa0a5135d69f095f0b5",
          "withoutMetadata": "d097037399b2168124f750173339bcbc2b0380d414c8afa0a5135d69f095f0b5",
          "linkedWithoutMetadata": "d097037399b2168124f750173339bcbc2b0380d414c8afa0a5135d69f095f0b5"
        },
        "inherit": [
          "MinterRole",
          "ERC721",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "safeMint(address,uint256)",
          "safeMint(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Pausable": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/ERC721Pausable.sol:10",
        "version": {
          "withMetadata": "1211d4bcd8bac93ca2bb3e6a302d6d6bc2f699592a8d3b7ad2e1fc7ff9b278f8",
          "withoutMetadata": "1211d4bcd8bac93ca2bb3e6a302d6d6bc2f699592a8d3b7ad2e1fc7ff9b278f8",
          "linkedWithoutMetadata": "1211d4bcd8bac93ca2bb3e6a302d6d6bc2f699592a8d3b7ad2e1fc7ff9b278f8"
        },
        "inherit": [
          "Pausable",
          "PauserRole",
          "ERC721",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/IERC721.sol:8",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/IERC721Enumerable.sol:9",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Full": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/IERC721Full.sol:11",
        "inherit": [
          "IERC721Metadata",
          "IERC721Enumerable",
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/IERC721Metadata.sol:9",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC721/IERC721Receiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC777": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC777/ERC777.sol:27",
        "version": {
          "withMetadata": "3e3508c68f37d8dba0dabd9de1938f6bee95af86b67aab236ae1fc78bb52a89d",
          "withoutMetadata": "90303baeada0929851a786ddd71fa2871e944f90aafc495c82223d338ac7c7b6",
          "linkedWithoutMetadata": "90303baeada0929851a786ddd71fa2871e944f90aafc495c82223d338ac7c7b6"
        },
        "inherit": [
          "IERC20",
          "IERC777",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(string,string,address[])",
          "name()",
          "symbol()",
          "decimals()",
          "granularity()",
          "totalSupply()",
          "balanceOf(address)",
          "send(address,uint256,bytes)",
          "transfer(address,uint256)",
          "burn(uint256,bytes)",
          "isOperatorFor(address,address)",
          "authorizeOperator(address)",
          "revokeOperator(address)",
          "defaultOperators()",
          "operatorSend(address,address,uint256,bytes,bytes)",
          "operatorBurn(address,uint256,bytes,bytes)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC777",
            "src": "contracts/IDO_basedon_Openzeppelin/token/ERC777/ERC777.sol:67"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC777",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC777/ERC777.sol:33"
            },
            {
              "contract": "ERC777",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC777/ERC777.sol:35"
            },
            {
              "contract": "ERC777",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC777/ERC777.sol:37"
            },
            {
              "contract": "ERC777",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC777/ERC777.sol:38"
            },
            {
              "contract": "ERC777",
              "label": "_defaultOperatorsArray",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC777/ERC777.sol:52"
            },
            {
              "contract": "ERC777",
              "label": "_defaultOperators",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC777/ERC777.sol:55"
            },
            {
              "contract": "ERC777",
              "label": "_operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC777/ERC777.sol:58"
            },
            {
              "contract": "ERC777",
              "label": "_revokedDefaultOperators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC777/ERC777.sol:59"
            },
            {
              "contract": "ERC777",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/IDO_basedon_Openzeppelin/token/ERC777/ERC777.sol:62"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC777": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC777/IERC777.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "granularity()",
          "totalSupply()",
          "balanceOf(address)",
          "send(address,uint256,bytes)",
          "burn(uint256,bytes)",
          "isOperatorFor(address,address)",
          "authorizeOperator(address)",
          "revokeOperator(address)",
          "defaultOperators()",
          "operatorSend(address,address,uint256,bytes,bytes)",
          "operatorBurn(address,uint256,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC777Recipient": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC777/IERC777Recipient.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokensReceived(address,address,address,uint256,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC777Sender": {
        "src": "contracts/IDO_basedon_Openzeppelin/token/ERC777/IERC777Sender.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokensToSend(address,address,address,uint256,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts/IDO_basedon_Openzeppelin/utils/Address.sol:6",
        "version": {
          "withMetadata": "a0124ff7d8471c1edf27225e58c2752bfdc87f5f9adfd2a4d2ab8ae975016b3e",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "contracts/IDO_basedon_Openzeppelin/utils/Arrays.sol:8",
        "version": {
          "withMetadata": "01e3529ddc5a4215ee4401670e002ff17ced432246c9105676133e5ff13c8a6b",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Create2": {
        "src": "contracts/IDO_basedon_Openzeppelin/utils/Create2.sol:14",
        "version": {
          "withMetadata": "34d95bb9fecbf12460191f304aadac360ed2f93f4243f72e3e450c0ab5e479cf",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/IDO_basedon_Openzeppelin/utils/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/IDO_basedon_Openzeppelin/utils/ReentrancyGuard.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_notEntered",
              "type": "t_bool",
              "src": "contracts/IDO_basedon_Openzeppelin/utils/ReentrancyGuard.sol:23"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "PancakeERC20": {
        "src": "contracts/core/PancakeERC20.sol:6",
        "version": {
          "withMetadata": "f30d7cc99978953ab1e9b5603e5555c2fcb3f71014a5943116781f7cfa37d0d8",
          "withoutMetadata": "f30d7cc99978953ab1e9b5603e5555c2fcb3f71014a5943116781f7cfa37d0d8",
          "linkedWithoutMetadata": "f30d7cc99978953ab1e9b5603e5555c2fcb3f71014a5943116781f7cfa37d0d8"
        },
        "inherit": [
          "IPancakeERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeERC20",
            "src": "contracts/core/PancakeERC20.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/core/PancakeERC20.sol:12"
            },
            {
              "contract": "PancakeERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/core/PancakeERC20.sol:13"
            },
            {
              "contract": "PancakeERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/core/PancakeERC20.sol:14"
            },
            {
              "contract": "PancakeERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/core/PancakeERC20.sol:16"
            },
            {
              "contract": "PancakeERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/core/PancakeERC20.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeFactory": {
        "src": "contracts/core/PancakeFactory.sol:6",
        "version": {
          "withMetadata": "cd70f0fe91f9070c4e926ebeb22906790737d17e32bf5ff1765a519e73348c5c",
          "withoutMetadata": "73d3dcbba90fae5bd1ddda217526e13f49e46301899d743e64b889d5b173020b",
          "linkedWithoutMetadata": "73d3dcbba90fae5bd1ddda217526e13f49e46301899d743e64b889d5b173020b"
        },
        "inherit": [
          "IPancakeFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeFactory",
            "src": "contracts/core/PancakeFactory.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeFactory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/core/PancakeFactory.sol:9"
            },
            {
              "contract": "PancakeFactory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/core/PancakeFactory.sol:10"
            },
            {
              "contract": "PancakeFactory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/core/PancakeFactory.sol:12"
            },
            {
              "contract": "PancakeFactory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/core/PancakeFactory.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakePair": {
        "src": "contracts/core/PancakePair.sol:11",
        "version": {
          "withMetadata": "7ad13c813a954b2f8acc8bf42b9fb23178ef75868c04ecbc9d4b38cd1ad5e734",
          "withoutMetadata": "7ad13c813a954b2f8acc8bf42b9fb23178ef75868c04ecbc9d4b38cd1ad5e734",
          "linkedWithoutMetadata": "7ad13c813a954b2f8acc8bf42b9fb23178ef75868c04ecbc9d4b38cd1ad5e734"
        },
        "inherit": [
          "PancakeERC20",
          "IPancakeERC20",
          "IPancakePair"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakePair",
            "src": "contracts/core/PancakePair.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/core/PancakePair.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakePair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/core/PancakePair.sol:18"
            },
            {
              "contract": "PancakePair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/core/PancakePair.sol:19"
            },
            {
              "contract": "PancakePair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/core/PancakePair.sol:20"
            },
            {
              "contract": "PancakePair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/core/PancakePair.sol:22"
            },
            {
              "contract": "PancakePair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/core/PancakePair.sol:23"
            },
            {
              "contract": "PancakePair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/core/PancakePair.sol:24"
            },
            {
              "contract": "PancakePair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/core/PancakePair.sol:26"
            },
            {
              "contract": "PancakePair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/core/PancakePair.sol:27"
            },
            {
              "contract": "PancakePair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/core/PancakePair.sol:28"
            },
            {
              "contract": "PancakePair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/core/PancakePair.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/core/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeCallee": {
        "src": "contracts/core/interfaces/IPancakeCallee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "pancakeCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeERC20": {
        "src": "contracts/core/interfaces/IPancakeERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/core/libraries/Math.sol:5",
        "version": {
          "withMetadata": "b98dbc8605f8d19e7d9ae84272080b9ecc7c43a1adfc508cbcc318ffd21a34ad",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/core/libraries/SafeMath.sol:5",
        "version": {
          "withMetadata": "1ee8c4f91c0b264351b88c0c48d140b0847b0ea2007f18f3c7bf32f6bb531c69",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/core/libraries/UQ112x112.sol:8",
        "version": {
          "withMetadata": "7d880eb672c2dbcd0e49c5431833332edebc784325ed21c9454c76cead708249",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:62",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:68"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)57_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:20",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2179_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2179_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2179_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)1908_storage"
                }
              ]
            },
            "t_struct(Set)1908_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f3773c94be9e3bebdf44415d14cd44f7d25c47278987978439a01d843fb7a378",
          "withoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69",
          "linkedWithoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "fe2cfa4e1bc5987963be38935569cbd22a73bde36181b64b1ef65f1a27f62a18",
          "withoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4",
          "linkedWithoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "b9a102b555263ccacc6374ea1784ba1f8e422dd968f3e4134645feb6abb9ec66",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "549e275f6d5427be9ff66fb6410a636030e947b81184f62b10ff3ddfce2fb878",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDO": {
        "src": "contracts/IDO.sol:12",
        "version": {
          "withMetadata": "c529c6053b00a055a515b2cdfdd37cdf3ef435cfa30cdfde8638a4939efbdae0",
          "withoutMetadata": "5c610ef73b974cb533f79f18ee5b70e63bd48d941a9ec4dc118d203837cec65e",
          "linkedWithoutMetadata": "5c610ef73b974cb533f79f18ee5b70e63bd48d941a9ec4dc118d203837cec65e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "(address,address,uint256)",
          "buy(uint256)",
          "claim()",
          "returnTokens()",
          "withdrawTokens()",
          "tokensLeft()",
          "saleStatus()",
          "getOwner()",
          "getRatio()",
          "tradedTokens()",
          "projectTokens()",
          "setRatio(uint256)",
          "startSale(uint256,uint256)",
          "setCap(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IDO",
            "src": "contracts/IDO.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "IDO",
              "label": "_startTimeEpoch",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:14"
            },
            {
              "contract": "IDO",
              "label": "projectToken",
              "type": "t_contract(ERC20)1299",
              "src": "contracts/IDO.sol:15"
            },
            {
              "contract": "IDO",
              "label": "tradeToken",
              "type": "t_contract(ERC20)1299",
              "src": "contracts/IDO.sol:16"
            },
            {
              "contract": "IDO",
              "label": "ratio",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:17"
            },
            {
              "contract": "IDO",
              "label": "cap",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:18"
            },
            {
              "contract": "IDO",
              "label": "sale",
              "type": "t_bool",
              "src": "contracts/IDO.sol:19"
            },
            {
              "contract": "IDO",
              "label": "time",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:20"
            },
            {
              "contract": "IDO",
              "label": "goal",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:21"
            },
            {
              "contract": "IDO",
              "label": "totalTokens",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:22"
            },
            {
              "contract": "IDO",
              "label": "Invested",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/IDO.sol:23"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(ERC20)1299": {
              "label": "contract ERC20"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "contracts/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "4815418e5ed355343d79fc76033c071af9d81ece20526f5a5502b6aeb0cfdd50",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Token": {
        "src": "contracts/Token.sol:9",
        "version": {
          "withMetadata": "7e32d540afbb2ee2195d3c86d8231d05a0f4b3e34f254391957d249c6c5cf5d9",
          "withoutMetadata": "f76f39857897028c0d0f6655879f8b66f21aca2d03c18095b8898ce235de8151",
          "linkedWithoutMetadata": "f76f39857897028c0d0f6655879f8b66f21aca2d03c18095b8898ce235de8151"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts/Token.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Token",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Token.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Staking.sol:268",
        "version": {
          "withMetadata": "4c93a81e7333021368d7d8e890fe1bb7d3674e0a4f46c9835b34516075ab9e3e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts/Staking.sol:629",
        "version": {
          "withMetadata": "daaaa6d6043741a52ffbec1170e262c3cad711158a4941592b0b05d1d39dfbf9",
          "withoutMetadata": "d78a0bcf22d7307371d3e285d40658a8aaec0d66a2da547a9fa574dd382a2736",
          "linkedWithoutMetadata": "d78a0bcf22d7307371d3e285d40658a8aaec0d66a2da547a9fa574dd382a2736"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math",
          "console"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "getDelay()",
          "getMinimumTime()",
          "getLastFee()",
          "getFee()",
          "getfeeOwner()",
          "getRewardRate()",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "setDelay(uint256)",
          "setMinimumTime(uint256)",
          "setFee(uint256)",
          "setfeeOwner(address)",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts/Staking.sol:656"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DELAY",
            "src": "contracts/Staking.sol:650"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MINIMUMTIME",
            "src": "contracts/Staking.sol:651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "FEE",
            "src": "contracts/Staking.sol:652"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeOwner",
            "src": "contracts/Staking.sol:653"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:641"
            },
            {
              "contract": "GrayblockStaking",
              "label": "LastFee",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:642"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:644"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:647"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:648"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_startTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:649"
            },
            {
              "contract": "GrayblockStaking",
              "label": "DELAY",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:650"
            },
            {
              "contract": "GrayblockStaking",
              "label": "MINIMUMTIME",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:651"
            },
            {
              "contract": "GrayblockStaking",
              "label": "FEE",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:652"
            },
            {
              "contract": "GrayblockStaking",
              "label": "feeOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:653"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)343": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Staking.sol:194",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts/Staking.sol:531",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Staking.sol:10",
        "version": {
          "withMetadata": "5145eac218c997b712d952cc96d42bb3bae7134f8baddee356245e20e6803b87",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts/Staking.sol:552",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/Staking.sol:556"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Staking.sol:553"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:554"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/Staking.sol:588",
        "version": {
          "withMetadata": "dee3464d0c8101172e554ca73547538f1e77ac4bbd099806e01defae6d78d3d9",
          "withoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5",
          "linkedWithoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/Staking.sol:592"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:589"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/Staking.sol:590"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/Staking.sol:488",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/Staking.sol:505"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:503"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/Staking.sol:412",
        "version": {
          "withMetadata": "d58ed97ec7f2f3b9c42ed84ea8d47bb6d88c0d252e4635a6351403a15a38cffa",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Staking.sol:48",
        "version": {
          "withMetadata": "1c99426abfe2392d3dab690d783dae40f9e772208f67857e0c66741de1b4d2ea",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "22ab50c6385aa6d0c318a53d16e43dfb9bf847a5e8844a576dff317fc6f7afeb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Staking.sol:268",
        "version": {
          "withMetadata": "c6ece1ebe3930793df1809f6ac1818e05d3b05e759e9766ac0e01d36455d2362",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts/Staking.sol:629",
        "version": {
          "withMetadata": "785951aefcde8f3b1e3ec42d8a41e02015e4b3834d3c4f768a66b9858151cfac",
          "withoutMetadata": "fe16128dab8b08fa9d15bca46c4d0f3e693da8d3c915869f413f000c3a6708b0",
          "linkedWithoutMetadata": "fe16128dab8b08fa9d15bca46c4d0f3e693da8d3c915869f413f000c3a6708b0"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math",
          "console"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "getDelay()",
          "getMinimumTime()",
          "getLastFee()",
          "getFee()",
          "getfeeOwner()",
          "getRewardRate()",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "setDelay(uint256)",
          "setMinimumTime(uint256)",
          "setFee(uint256)",
          "setfeeOwner(address)",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts/Staking.sol:656"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DELAY",
            "src": "contracts/Staking.sol:650"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MINIMUMTIME",
            "src": "contracts/Staking.sol:651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "FEE",
            "src": "contracts/Staking.sol:652"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeOwner",
            "src": "contracts/Staking.sol:653"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:641"
            },
            {
              "contract": "GrayblockStaking",
              "label": "LastFee",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:642"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:644"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:647"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:648"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_startTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:649"
            },
            {
              "contract": "GrayblockStaking",
              "label": "DELAY",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:650"
            },
            {
              "contract": "GrayblockStaking",
              "label": "MINIMUMTIME",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:651"
            },
            {
              "contract": "GrayblockStaking",
              "label": "FEE",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:652"
            },
            {
              "contract": "GrayblockStaking",
              "label": "feeOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:653"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)343": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Staking.sol:194",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts/Staking.sol:531",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Staking.sol:10",
        "version": {
          "withMetadata": "c0f9859a5b4b3eec81201f520bcc722530fd79b118ad63589d89c4b9daa0e6bc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts/Staking.sol:552",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/Staking.sol:556"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Staking.sol:553"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:554"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/Staking.sol:588",
        "version": {
          "withMetadata": "729102a084ef079229b3d939850261dc8d87a8fd5d2159726e51d45c3dc9791b",
          "withoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5",
          "linkedWithoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/Staking.sol:592"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:589"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/Staking.sol:590"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/Staking.sol:488",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/Staking.sol:505"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:503"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/Staking.sol:412",
        "version": {
          "withMetadata": "620f3905b251eb8def21ee1f6376282a23fc71f155b07e7516355ab769d7080f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Staking.sol:48",
        "version": {
          "withMetadata": "55efdc607c9fb82e03904cd4a4d7f53f69ee5a955edfa6c7fb9767b5f4d7cb09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "22ab50c6385aa6d0c318a53d16e43dfb9bf847a5e8844a576dff317fc6f7afeb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Staking.sol:268",
        "version": {
          "withMetadata": "10449a7f60cfe9a226a77b375ada768930f604f006353bf65c355b03034a0fcb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts/Staking.sol:629",
        "version": {
          "withMetadata": "ffa883f5b140b1ddf227a3c2d9626915c22e3d75d77bcef318f938ffe8de9129",
          "withoutMetadata": "11166043fd5e3a7eea26f60de997f82124f4a60f3a147e1e82554fead78fa5de",
          "linkedWithoutMetadata": "11166043fd5e3a7eea26f60de997f82124f4a60f3a147e1e82554fead78fa5de"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math",
          "console"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "getDelay()",
          "getMinimumTime()",
          "getLastFee()",
          "getFee()",
          "getfeeOwner()",
          "getRewardRate()",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "setDelay(uint256)",
          "setMinimumTime(uint256)",
          "setFee(uint256)",
          "setfeeOwner(address)",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts/Staking.sol:656"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DELAY",
            "src": "contracts/Staking.sol:650"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MINIMUMTIME",
            "src": "contracts/Staking.sol:651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "FEE",
            "src": "contracts/Staking.sol:652"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeOwner",
            "src": "contracts/Staking.sol:653"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:641"
            },
            {
              "contract": "GrayblockStaking",
              "label": "LastFee",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:642"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:644"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:647"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:648"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_startTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:649"
            },
            {
              "contract": "GrayblockStaking",
              "label": "DELAY",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:650"
            },
            {
              "contract": "GrayblockStaking",
              "label": "MINIMUMTIME",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:651"
            },
            {
              "contract": "GrayblockStaking",
              "label": "FEE",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:652"
            },
            {
              "contract": "GrayblockStaking",
              "label": "feeOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:653"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)343": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Staking.sol:194",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts/Staking.sol:531",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Staking.sol:10",
        "version": {
          "withMetadata": "fa58f2162fc9af1a7a07379478fc333f185747605b42350ac6166c40a28803ae",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts/Staking.sol:552",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/Staking.sol:556"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Staking.sol:553"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:554"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/Staking.sol:588",
        "version": {
          "withMetadata": "29b3c014ff5142bba14ada8a4399214f91f283b2f3b6d17be010f2959d96f1b2",
          "withoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5",
          "linkedWithoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/Staking.sol:592"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:589"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/Staking.sol:590"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/Staking.sol:488",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/Staking.sol:505"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:503"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/Staking.sol:412",
        "version": {
          "withMetadata": "94684d1b84c671d28846c4041d9d8b674c723b2121e8d160dbaef6b2a96f85ce",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Staking.sol:48",
        "version": {
          "withMetadata": "f0cc46900b50403c54bd32529528b21c0f5bc175495bede27e291e2d109b8829",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "22ab50c6385aa6d0c318a53d16e43dfb9bf847a5e8844a576dff317fc6f7afeb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Staking.sol:268",
        "version": {
          "withMetadata": "085d187056acf79e5d7e8d1a9e2b3627e684c64da8d860598057c25a2ada67fc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts/Staking.sol:629",
        "version": {
          "withMetadata": "d478ebbbf48f028e661311cff07d29bb578b74efa6f44b5d5494f0317665d96e",
          "withoutMetadata": "a50acbc3807f3c956fb7f6315e89d85368c7111a614143e8c60bcd4686e34879",
          "linkedWithoutMetadata": "a50acbc3807f3c956fb7f6315e89d85368c7111a614143e8c60bcd4686e34879"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math",
          "console"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "getDelay()",
          "getMinimumTime()",
          "getLastFee()",
          "getFee()",
          "getfeeOwner()",
          "getRewardRate()",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "setDelay(uint256)",
          "setMinimumTime(uint256)",
          "setFee(uint256)",
          "setfeeOwner(address)",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts/Staking.sol:656"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DELAY",
            "src": "contracts/Staking.sol:650"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MINIMUMTIME",
            "src": "contracts/Staking.sol:651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "FEE",
            "src": "contracts/Staking.sol:652"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeOwner",
            "src": "contracts/Staking.sol:653"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:641"
            },
            {
              "contract": "GrayblockStaking",
              "label": "LastFee",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:642"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:644"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:647"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:648"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_startTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:649"
            },
            {
              "contract": "GrayblockStaking",
              "label": "DELAY",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:650"
            },
            {
              "contract": "GrayblockStaking",
              "label": "MINIMUMTIME",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:651"
            },
            {
              "contract": "GrayblockStaking",
              "label": "FEE",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:652"
            },
            {
              "contract": "GrayblockStaking",
              "label": "feeOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:653"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)343": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Staking.sol:194",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts/Staking.sol:531",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Staking.sol:10",
        "version": {
          "withMetadata": "a4b8e039a07524e66ac4c26a9cd86bcb73582e15a49b04eb049986efbc924213",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts/Staking.sol:552",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/Staking.sol:556"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Staking.sol:553"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:554"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/Staking.sol:588",
        "version": {
          "withMetadata": "14526f210c652655f03d2fcd942f6017fdc3dfb0728680fac43888647089e437",
          "withoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5",
          "linkedWithoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/Staking.sol:592"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:589"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/Staking.sol:590"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/Staking.sol:488",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/Staking.sol:505"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:503"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/Staking.sol:412",
        "version": {
          "withMetadata": "dfb72e417b0985549eb1ebf5b635f5414f73a84bf72ea67a1a2fb02788311bfd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Staking.sol:48",
        "version": {
          "withMetadata": "bce0d616b61b2bd90682f41483b45499ddaefa91e7f150650fbc59db1d806249",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "22ab50c6385aa6d0c318a53d16e43dfb9bf847a5e8844a576dff317fc6f7afeb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Staking.sol:268",
        "version": {
          "withMetadata": "26ade09d9c63042c86443f4a9e26143a97248e62f3ed54eb040b8afdc30ca671",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts/Staking.sol:629",
        "version": {
          "withMetadata": "0184f093c1fae7760ed295fbe063ac6b415485a0413951000a12c508a223288b",
          "withoutMetadata": "e00e87012bd74caf1e97a8129052cfacd7b93bd7b16a5f999a85b1d3a2011c0b",
          "linkedWithoutMetadata": "e00e87012bd74caf1e97a8129052cfacd7b93bd7b16a5f999a85b1d3a2011c0b"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math",
          "console"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "getDelay()",
          "getMinimumTime()",
          "getFee()",
          "getfeeOwner()",
          "getRewardRate()",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "setDelay(uint256)",
          "setMinimumTime(uint256)",
          "setFee(uint256)",
          "setfeeOwner(address)",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts/Staking.sol:656"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DELAY",
            "src": "contracts/Staking.sol:650"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MINIMUMTIME",
            "src": "contracts/Staking.sol:651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "FEE",
            "src": "contracts/Staking.sol:652"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeOwner",
            "src": "contracts/Staking.sol:653"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:641"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:644"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:647"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:648"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_startTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:649"
            },
            {
              "contract": "GrayblockStaking",
              "label": "DELAY",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:650"
            },
            {
              "contract": "GrayblockStaking",
              "label": "MINIMUMTIME",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:651"
            },
            {
              "contract": "GrayblockStaking",
              "label": "FEE",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:652"
            },
            {
              "contract": "GrayblockStaking",
              "label": "feeOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:653"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)343": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Staking.sol:194",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts/Staking.sol:531",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Staking.sol:10",
        "version": {
          "withMetadata": "b0419d88a2815579eaea7ef3bf6ec95165d4284ddb541feb33843f6009c86f07",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts/Staking.sol:552",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/Staking.sol:556"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Staking.sol:553"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:554"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/Staking.sol:588",
        "version": {
          "withMetadata": "3d4f3fe82b161580cf33174891c8e688d8b675290e5ea8d71bcda8ffbdf25541",
          "withoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5",
          "linkedWithoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/Staking.sol:592"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:589"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/Staking.sol:590"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/Staking.sol:488",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/Staking.sol:505"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:503"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/Staking.sol:412",
        "version": {
          "withMetadata": "4bf7230549be1cf58860422a9a2b73e0a12d42d7a36c410bb3e26b4e52d3e27a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Staking.sol:48",
        "version": {
          "withMetadata": "ca4b54efe31034eae113619f864e4153bd40d9e0d351e3b8f1d6a96b42415f97",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "22ab50c6385aa6d0c318a53d16e43dfb9bf847a5e8844a576dff317fc6f7afeb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Staking.sol:268",
        "version": {
          "withMetadata": "29db9aef6721c091851c968cfe04386f268c59bb339e2e2a6d21cffba3c569dd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts/Staking.sol:629",
        "version": {
          "withMetadata": "c79b0b0c51675bb0006ec4126b691f9a9835e857bcbc28a55c8fcf3882ac8dc3",
          "withoutMetadata": "f588cfd14f7dce12b8ba86981c68792b51ff07fc1fd78c9f6b4c99710471bdbb",
          "linkedWithoutMetadata": "f588cfd14f7dce12b8ba86981c68792b51ff07fc1fd78c9f6b4c99710471bdbb"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math",
          "console"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "getDelay()",
          "getMinimumTime()",
          "getFee()",
          "getfeeOwner()",
          "getRewardRate()",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "setDelay(uint256)",
          "setMinimumTime(uint256)",
          "setFee(uint256)",
          "setfeeOwner(address)",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts/Staking.sol:656"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DELAY",
            "src": "contracts/Staking.sol:650"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MINIMUMTIME",
            "src": "contracts/Staking.sol:651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "FEE",
            "src": "contracts/Staking.sol:652"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeOwner",
            "src": "contracts/Staking.sol:653"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:641"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:644"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:647"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:648"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_startTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:649"
            },
            {
              "contract": "GrayblockStaking",
              "label": "DELAY",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:650"
            },
            {
              "contract": "GrayblockStaking",
              "label": "MINIMUMTIME",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:651"
            },
            {
              "contract": "GrayblockStaking",
              "label": "FEE",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:652"
            },
            {
              "contract": "GrayblockStaking",
              "label": "feeOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:653"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)343": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Staking.sol:194",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts/Staking.sol:531",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Staking.sol:10",
        "version": {
          "withMetadata": "e3ae7241bc982e4a2b1412c0dc07dfaf995d58cbecce1ec520604576acfe016e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts/Staking.sol:552",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/Staking.sol:556"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Staking.sol:553"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:554"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/Staking.sol:588",
        "version": {
          "withMetadata": "12c2c087948790e4f5cd777c3635487c9829b2e1d2dd63a72eec84dc025b011f",
          "withoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5",
          "linkedWithoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/Staking.sol:592"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:589"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/Staking.sol:590"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/Staking.sol:488",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/Staking.sol:505"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:503"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/Staking.sol:412",
        "version": {
          "withMetadata": "71a4e50e13c16575d0ea57ac9800fa6ac9a6fd8c1e93fc4b20daff4dfada3a85",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Staking.sol:48",
        "version": {
          "withMetadata": "c4eb62148590f46dfd9a727a067934cb3636e16bef02507759388784dc7bba84",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "22ab50c6385aa6d0c318a53d16e43dfb9bf847a5e8844a576dff317fc6f7afeb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Staking.sol:268",
        "version": {
          "withMetadata": "2c0367a321ce673b1f35e2d20a2c72d0521ee859b7e8dcb6ef18a0bf01d86389",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts/Staking.sol:629",
        "version": {
          "withMetadata": "9795fa6be8b2d319c4aebcf43a9ca6966c5e3ebc606c4da673d01ec9057fe608",
          "withoutMetadata": "cfe8c057f6c2a8e73731486fa808f7d02f16b01b6ac6e65af5666ae2edeee861",
          "linkedWithoutMetadata": "cfe8c057f6c2a8e73731486fa808f7d02f16b01b6ac6e65af5666ae2edeee861"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math",
          "console"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "getDelay()",
          "getMinimumTime()",
          "getFee()",
          "getfeeOwner()",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "setDelay(uint256)",
          "setMinimumTime(uint256)",
          "setFee(uint256)",
          "setfeeOwner(address)",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts/Staking.sol:656"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DELAY",
            "src": "contracts/Staking.sol:650"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MINIMUMTIME",
            "src": "contracts/Staking.sol:651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "FEE",
            "src": "contracts/Staking.sol:652"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeOwner",
            "src": "contracts/Staking.sol:653"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:641"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:644"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:647"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:648"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_startTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:649"
            },
            {
              "contract": "GrayblockStaking",
              "label": "DELAY",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:650"
            },
            {
              "contract": "GrayblockStaking",
              "label": "MINIMUMTIME",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:651"
            },
            {
              "contract": "GrayblockStaking",
              "label": "FEE",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:652"
            },
            {
              "contract": "GrayblockStaking",
              "label": "feeOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:653"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)343": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Staking.sol:194",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts/Staking.sol:531",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Staking.sol:10",
        "version": {
          "withMetadata": "a5e59bd0cfc01ccd86e1a9889f3aca293c7b6d663c6d82bc9e8f1d30b5240676",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts/Staking.sol:552",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/Staking.sol:556"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Staking.sol:553"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:554"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/Staking.sol:588",
        "version": {
          "withMetadata": "3ecb9fa23dc3c829fc629ad1a25c019ddda77e46ce6b6275735afce9b065d58a",
          "withoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5",
          "linkedWithoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/Staking.sol:592"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:589"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/Staking.sol:590"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/Staking.sol:488",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/Staking.sol:505"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:503"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/Staking.sol:412",
        "version": {
          "withMetadata": "f23039cbbd5b4f7bdbcfd997e92a520290b617f73a075fa90e3d0f79de85ad41",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Staking.sol:48",
        "version": {
          "withMetadata": "b6b80d73e8d2876ebfafbbed16cc006525f620eed3d9d3aec2dce5725ef5fbbc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "22ab50c6385aa6d0c318a53d16e43dfb9bf847a5e8844a576dff317fc6f7afeb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Staking.sol:268",
        "version": {
          "withMetadata": "a3c15b27340967434f4bf3f96006f0ca2840c1aa1e9f195d35d227cee84b7464",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts/Staking.sol:629",
        "version": {
          "withMetadata": "91e94a7eae59e7ab66c3b25412aa22f3ee10edfa42e2ed3d9bb7acc6aa5d7752",
          "withoutMetadata": "c7ed6aa2e34ef10cdba0af690b416deca2ada505314e0bc6a8973a712a583eb3",
          "linkedWithoutMetadata": "c7ed6aa2e34ef10cdba0af690b416deca2ada505314e0bc6a8973a712a583eb3"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math",
          "console"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "getDelay()",
          "getMinimumTime()",
          "getFee()",
          "getfeeOwner()",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "setDelay(uint256)",
          "setMinimumTime(uint256)",
          "setFee(uint256)",
          "setfeeOwner(address)",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts/Staking.sol:656"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DELAY",
            "src": "contracts/Staking.sol:650"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MINIMUMTIME",
            "src": "contracts/Staking.sol:651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "FEE",
            "src": "contracts/Staking.sol:652"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeOwner",
            "src": "contracts/Staking.sol:653"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:641"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:644"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:647"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:648"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_startTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:649"
            },
            {
              "contract": "GrayblockStaking",
              "label": "DELAY",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:650"
            },
            {
              "contract": "GrayblockStaking",
              "label": "MINIMUMTIME",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:651"
            },
            {
              "contract": "GrayblockStaking",
              "label": "FEE",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:652"
            },
            {
              "contract": "GrayblockStaking",
              "label": "feeOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:653"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)343": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Staking.sol:194",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts/Staking.sol:531",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Staking.sol:10",
        "version": {
          "withMetadata": "1ff1ca39481b54782650ee517e6e165835d3f8437ef8dcbf8d18196f76954547",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts/Staking.sol:552",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/Staking.sol:556"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Staking.sol:553"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:554"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/Staking.sol:588",
        "version": {
          "withMetadata": "7b842eb3bc6905445c1eb8fca8329385fcb73d12d71bc36576f74ed2d31133dd",
          "withoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5",
          "linkedWithoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/Staking.sol:592"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:589"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/Staking.sol:590"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/Staking.sol:488",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/Staking.sol:505"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:503"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/Staking.sol:412",
        "version": {
          "withMetadata": "8828ea6891da2dde204341dbf1263475a0061e521618437c1b02d5693599182b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Staking.sol:48",
        "version": {
          "withMetadata": "5df8e96e5b5262ed5aab36187357e46c31d830b345303590dca89c5816a9069c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "22ab50c6385aa6d0c318a53d16e43dfb9bf847a5e8844a576dff317fc6f7afeb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Staking.sol:268",
        "version": {
          "withMetadata": "2c0367a321ce673b1f35e2d20a2c72d0521ee859b7e8dcb6ef18a0bf01d86389",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts/Staking.sol:629",
        "version": {
          "withMetadata": "9795fa6be8b2d319c4aebcf43a9ca6966c5e3ebc606c4da673d01ec9057fe608",
          "withoutMetadata": "cfe8c057f6c2a8e73731486fa808f7d02f16b01b6ac6e65af5666ae2edeee861",
          "linkedWithoutMetadata": "cfe8c057f6c2a8e73731486fa808f7d02f16b01b6ac6e65af5666ae2edeee861"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math",
          "console"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "getDelay()",
          "getMinimumTime()",
          "getFee()",
          "getfeeOwner()",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "setDelay(uint256)",
          "setMinimumTime(uint256)",
          "setFee(uint256)",
          "setfeeOwner(address)",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts/Staking.sol:656"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DELAY",
            "src": "contracts/Staking.sol:650"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MINIMUMTIME",
            "src": "contracts/Staking.sol:651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "FEE",
            "src": "contracts/Staking.sol:652"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeOwner",
            "src": "contracts/Staking.sol:653"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:641"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:644"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:647"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:648"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_startTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:649"
            },
            {
              "contract": "GrayblockStaking",
              "label": "DELAY",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:650"
            },
            {
              "contract": "GrayblockStaking",
              "label": "MINIMUMTIME",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:651"
            },
            {
              "contract": "GrayblockStaking",
              "label": "FEE",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:652"
            },
            {
              "contract": "GrayblockStaking",
              "label": "feeOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:653"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)343": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Staking.sol:194",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts/Staking.sol:531",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Staking.sol:10",
        "version": {
          "withMetadata": "a5e59bd0cfc01ccd86e1a9889f3aca293c7b6d663c6d82bc9e8f1d30b5240676",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts/Staking.sol:552",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/Staking.sol:556"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Staking.sol:553"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:554"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/Staking.sol:588",
        "version": {
          "withMetadata": "3ecb9fa23dc3c829fc629ad1a25c019ddda77e46ce6b6275735afce9b065d58a",
          "withoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5",
          "linkedWithoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/Staking.sol:592"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:589"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/Staking.sol:590"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/Staking.sol:488",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/Staking.sol:505"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:503"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/Staking.sol:412",
        "version": {
          "withMetadata": "f23039cbbd5b4f7bdbcfd997e92a520290b617f73a075fa90e3d0f79de85ad41",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Staking.sol:48",
        "version": {
          "withMetadata": "b6b80d73e8d2876ebfafbbed16cc006525f620eed3d9d3aec2dce5725ef5fbbc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "22ab50c6385aa6d0c318a53d16e43dfb9bf847a5e8844a576dff317fc6f7afeb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Staking.sol:268",
        "version": {
          "withMetadata": "bfaf717acf46a39b40256c403e93f1e24f7c288278ca846a73e7aa7b0be4e2b7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts/Staking.sol:629",
        "version": {
          "withMetadata": "800b739b6e35b1abe706c27c66c4e06497feb9b2d02f213d9306b92d93abef9e",
          "withoutMetadata": "67d9692ebae69130756d9f90af8e376f9c87a1e16216c9828d8b51a63f55f49d",
          "linkedWithoutMetadata": "67d9692ebae69130756d9f90af8e376f9c87a1e16216c9828d8b51a63f55f49d"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math",
          "console"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "getDelay()",
          "getMinimumTime()",
          "getFee()",
          "getfeeOwner()",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "setDelay(uint256)",
          "setMinimumTime(uint256)",
          "setFee(uint256)",
          "setfeeOwner(address)",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts/Staking.sol:656"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DELAY",
            "src": "contracts/Staking.sol:650"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MINIMUMTIME",
            "src": "contracts/Staking.sol:651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "FEE",
            "src": "contracts/Staking.sol:652"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeOwner",
            "src": "contracts/Staking.sol:653"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:641"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:644"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:647"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:648"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_startTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:649"
            },
            {
              "contract": "GrayblockStaking",
              "label": "DELAY",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:650"
            },
            {
              "contract": "GrayblockStaking",
              "label": "MINIMUMTIME",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:651"
            },
            {
              "contract": "GrayblockStaking",
              "label": "FEE",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:652"
            },
            {
              "contract": "GrayblockStaking",
              "label": "feeOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:653"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)343": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Staking.sol:194",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts/Staking.sol:531",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Staking.sol:10",
        "version": {
          "withMetadata": "acf8bb89bf3c0a1ff9505ecf12f8f4e07424ff86b7b744867bf02df5dd90889a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts/Staking.sol:552",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/Staking.sol:556"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Staking.sol:553"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:554"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/Staking.sol:588",
        "version": {
          "withMetadata": "be3b2a1778415afd8bbd40d69f9030cebd0508f2ff12d55963baef77002639b3",
          "withoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5",
          "linkedWithoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/Staking.sol:592"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:589"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/Staking.sol:590"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/Staking.sol:488",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/Staking.sol:505"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:503"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/Staking.sol:412",
        "version": {
          "withMetadata": "25426c5ddbe4e81957735c3a60897f58ca388fcd9f2883115ceeb6a1c6b3b6ef",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Staking.sol:48",
        "version": {
          "withMetadata": "1207338e501382c7f60165f978b0888ebe7da89be580529f276b1f59bfb807aa",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "22ab50c6385aa6d0c318a53d16e43dfb9bf847a5e8844a576dff317fc6f7afeb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:62",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:68"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)57_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:20",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2179_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2179_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2179_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)1908_storage"
                }
              ]
            },
            "t_struct(Set)1908_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f3773c94be9e3bebdf44415d14cd44f7d25c47278987978439a01d843fb7a378",
          "withoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69",
          "linkedWithoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "fe2cfa4e1bc5987963be38935569cbd22a73bde36181b64b1ef65f1a27f62a18",
          "withoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4",
          "linkedWithoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "b9a102b555263ccacc6374ea1784ba1f8e422dd968f3e4134645feb6abb9ec66",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "549e275f6d5427be9ff66fb6410a636030e947b81184f62b10ff3ddfce2fb878",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDO": {
        "src": "contracts/IDO.sol:12",
        "version": {
          "withMetadata": "e72880c80c038db29469eb0d3a10b98a2d574d44795b7c3c23ff3f7977d05518",
          "withoutMetadata": "1f031c44c3a3322ad9f39c221574ecf2be32aada3e5e5b97434d697ace200490",
          "linkedWithoutMetadata": "1f031c44c3a3322ad9f39c221574ecf2be32aada3e5e5b97434d697ace200490"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "buy(uint256)",
          "returnTokens()",
          "withdrawTokens()",
          "tokensLeft()",
          "saleStatus()",
          "getOwner()",
          "getRatio()",
          "tradedTokens()",
          "projectTokens()",
          "setRatio(uint256)",
          "setSale(bool)",
          "setCap(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IDO",
            "src": "contracts/IDO.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "IDO",
              "label": "_startTimeEpoch",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:13"
            },
            {
              "contract": "IDO",
              "label": "projectToken",
              "type": "t_contract(ERC20)1299",
              "src": "contracts/IDO.sol:14"
            },
            {
              "contract": "IDO",
              "label": "tradeToken",
              "type": "t_contract(ERC20)1299",
              "src": "contracts/IDO.sol:15"
            },
            {
              "contract": "IDO",
              "label": "ratio",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:16"
            },
            {
              "contract": "IDO",
              "label": "cap",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:17"
            },
            {
              "contract": "IDO",
              "label": "sale",
              "type": "t_bool",
              "src": "contracts/IDO.sol:18"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(ERC20)1299": {
              "label": "contract ERC20"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Token": {
        "src": "contracts/Token.sol:9",
        "version": {
          "withMetadata": "7e32d540afbb2ee2195d3c86d8231d05a0f4b3e34f254391957d249c6c5cf5d9",
          "withoutMetadata": "f76f39857897028c0d0f6655879f8b66f21aca2d03c18095b8898ce235de8151",
          "linkedWithoutMetadata": "f76f39857897028c0d0f6655879f8b66f21aca2d03c18095b8898ce235de8151"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts/Token.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Token",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Token.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Staking.sol:267",
        "version": {
          "withMetadata": "fe7a675b2d65e1ae714880e05606ce1bc8a45c4672ad6fb586036d71f5ca29cf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts/Staking.sol:628",
        "version": {
          "withMetadata": "1d6154cbe6c508958d981273c75611ae6a0eaba9a6567c59ee899017bf7711d7",
          "withoutMetadata": "02b059579d2de4ec5ee0b426c9c3e2fe69c2efab3b5c1107c8d52fcad490f086",
          "linkedWithoutMetadata": "02b059579d2de4ec5ee0b426c9c3e2fe69c2efab3b5c1107c8d52fcad490f086"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "getDelay()",
          "getMinimumTime()",
          "getFee()",
          "getfeeOwner()",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "setDelay(uint256)",
          "setMinimumTime(uint256)",
          "setFee(uint256)",
          "setfeeOwner(address)",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts/Staking.sol:655"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DELAY",
            "src": "contracts/Staking.sol:649"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MINIMUMTIME",
            "src": "contracts/Staking.sol:650"
          },
          {
            "kind": "state-variable-assignment",
            "name": "FEE",
            "src": "contracts/Staking.sol:651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeOwner",
            "src": "contracts/Staking.sol:652"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:634"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)342",
              "src": "contracts/Staking.sol:642"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)342",
              "src": "contracts/Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:645"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:647"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_startTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:648"
            },
            {
              "contract": "GrayblockStaking",
              "label": "DELAY",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:649"
            },
            {
              "contract": "GrayblockStaking",
              "label": "MINIMUMTIME",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:650"
            },
            {
              "contract": "GrayblockStaking",
              "label": "FEE",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:651"
            },
            {
              "contract": "GrayblockStaking",
              "label": "feeOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:652"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)342": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Staking.sol:193",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts/Staking.sol:530",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Staking.sol:9",
        "version": {
          "withMetadata": "9542fc08b40f525a762c3931cfe7be44a9c1806085b8b56eb4a21df56deb6910",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts/Staking.sol:551",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/Staking.sol:555"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Staking.sol:552"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:553"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/Staking.sol:587",
        "version": {
          "withMetadata": "00f6e235389d084f38dbb15e3ccaa5bf19dfe597193b0bc09f69ad797e42a969",
          "withoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5",
          "linkedWithoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/Staking.sol:591"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:588"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/Staking.sol:589"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/Staking.sol:487",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/Staking.sol:504"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:502"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/Staking.sol:411",
        "version": {
          "withMetadata": "d677361807922c1ed846127b64a6c0d1109f157a9d6d520136bb47a11fd86ed5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Staking.sol:47",
        "version": {
          "withMetadata": "a3bb08060d6e95c576dda8edb1da7393da864783e9decbd7b06a399c1247b09d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Staking.sol:267",
        "version": {
          "withMetadata": "ce68f38c0434cc868ebcae4cd3f9518e2bd5dc391fa2ee10cc5c07b3e1f113e4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts/Staking.sol:628",
        "version": {
          "withMetadata": "545f1c6475007a1da954d8ae776146e8ebf2cdd500b4f8ed554ef5dfc80fa9ee",
          "withoutMetadata": "03fb049631945b78e34a8fe652505f7fc5007a714afbc1f9aa1276bda59caef8",
          "linkedWithoutMetadata": "03fb049631945b78e34a8fe652505f7fc5007a714afbc1f9aa1276bda59caef8"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "getDelay()",
          "getMinimumTime()",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "setDelay(uint256)",
          "setMinimumTime(uint256)",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts/Staking.sol:653"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DELAY",
            "src": "contracts/Staking.sol:649"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MINIMUMTIME",
            "src": "contracts/Staking.sol:650"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:634"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)342",
              "src": "contracts/Staking.sol:642"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)342",
              "src": "contracts/Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:645"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:647"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_startTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:648"
            },
            {
              "contract": "GrayblockStaking",
              "label": "DELAY",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:649"
            },
            {
              "contract": "GrayblockStaking",
              "label": "MINIMUMTIME",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:650"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)342": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Staking.sol:193",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts/Staking.sol:530",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Staking.sol:9",
        "version": {
          "withMetadata": "0013f5e0051394cdbf6f1157d97063725607ebca4e68c11fb68edb18b50c7164",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts/Staking.sol:551",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/Staking.sol:555"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Staking.sol:552"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:553"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/Staking.sol:587",
        "version": {
          "withMetadata": "568e081653750d7e66048909e5594774a3b85d861e2507cbd6338315b1cd7c45",
          "withoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5",
          "linkedWithoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/Staking.sol:591"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:588"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/Staking.sol:589"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/Staking.sol:487",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/Staking.sol:504"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:502"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/Staking.sol:411",
        "version": {
          "withMetadata": "9474da5531d05e279b8740d2c787c09659a09d90be8619da5bba96d814811b92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Staking.sol:47",
        "version": {
          "withMetadata": "a5db92df35ab3ace509d053ff5d65a9a69a6a11ce059ff07ec3597cf37396fc0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:62",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:68"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)57_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:20",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2179_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2179_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2179_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)1908_storage"
                }
              ]
            },
            "t_struct(Set)1908_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f3773c94be9e3bebdf44415d14cd44f7d25c47278987978439a01d843fb7a378",
          "withoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69",
          "linkedWithoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "fe2cfa4e1bc5987963be38935569cbd22a73bde36181b64b1ef65f1a27f62a18",
          "withoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4",
          "linkedWithoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "b9a102b555263ccacc6374ea1784ba1f8e422dd968f3e4134645feb6abb9ec66",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "549e275f6d5427be9ff66fb6410a636030e947b81184f62b10ff3ddfce2fb878",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDO": {
        "src": "contracts/IDO.sol:12",
        "version": {
          "withMetadata": "e72880c80c038db29469eb0d3a10b98a2d574d44795b7c3c23ff3f7977d05518",
          "withoutMetadata": "1f031c44c3a3322ad9f39c221574ecf2be32aada3e5e5b97434d697ace200490",
          "linkedWithoutMetadata": "1f031c44c3a3322ad9f39c221574ecf2be32aada3e5e5b97434d697ace200490"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "buy(uint256)",
          "returnTokens()",
          "withdrawTokens()",
          "tokensLeft()",
          "saleStatus()",
          "getOwner()",
          "getRatio()",
          "tradedTokens()",
          "projectTokens()",
          "setRatio(uint256)",
          "setSale(bool)",
          "setCap(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IDO",
            "src": "contracts/IDO.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "IDO",
              "label": "_startTimeEpoch",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:13"
            },
            {
              "contract": "IDO",
              "label": "projectToken",
              "type": "t_contract(ERC20)1299",
              "src": "contracts/IDO.sol:14"
            },
            {
              "contract": "IDO",
              "label": "tradeToken",
              "type": "t_contract(ERC20)1299",
              "src": "contracts/IDO.sol:15"
            },
            {
              "contract": "IDO",
              "label": "ratio",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:16"
            },
            {
              "contract": "IDO",
              "label": "cap",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:17"
            },
            {
              "contract": "IDO",
              "label": "sale",
              "type": "t_bool",
              "src": "contracts/IDO.sol:18"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(ERC20)1299": {
              "label": "contract ERC20"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Token": {
        "src": "contracts/Token.sol:9",
        "version": {
          "withMetadata": "f9f1cd199e53bc1b62f715aa1349ef2f9dcdc437c16e8d5bde087be58d389e6d",
          "withoutMetadata": "2f2f407bf7fb806cbeaef48c0a8ede3e0600b2ed88925bf5e29928e4c4b50ef9",
          "linkedWithoutMetadata": "2f2f407bf7fb806cbeaef48c0a8ede3e0600b2ed88925bf5e29928e4c4b50ef9"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts/Token.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Token",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Token.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f3773c94be9e3bebdf44415d14cd44f7d25c47278987978439a01d843fb7a378",
          "withoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69",
          "linkedWithoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDO": {
        "src": "contracts/IDO.sol:12",
        "version": {
          "withMetadata": "d18522d6db00799e19d9f961332bd9bd08602d7da41e193cd74dc2d5837432ee",
          "withoutMetadata": "1b0b225c6ba8769e616a81fcafd2f47deeefd2ed625a2cf0fb6548a8235fb57d",
          "linkedWithoutMetadata": "1b0b225c6ba8769e616a81fcafd2f47deeefd2ed625a2cf0fb6548a8235fb57d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "buy(uint256)",
          "returnTokens()",
          "tokensLeft()",
          "saleStatus()",
          "getOwner()",
          "setRatio(uint256)",
          "setSale(bool)",
          "setCap(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IDO",
            "src": "contracts/IDO.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "IDO",
              "label": "_startTimeEpoch",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:13"
            },
            {
              "contract": "IDO",
              "label": "projectToken",
              "type": "t_contract(ERC20)649",
              "src": "contracts/IDO.sol:14"
            },
            {
              "contract": "IDO",
              "label": "tradeToken",
              "type": "t_contract(ERC20)649",
              "src": "contracts/IDO.sol:15"
            },
            {
              "contract": "IDO",
              "label": "ratio",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:16"
            },
            {
              "contract": "IDO",
              "label": "cap",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:17"
            },
            {
              "contract": "IDO",
              "label": "sale",
              "type": "t_bool",
              "src": "contracts/IDO.sol:18"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(ERC20)649": {
              "label": "contract ERC20"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IERC20": {
        "src": "contracts/periphery/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeCallee": {
        "src": "contracts/core/interfaces/IPancakeCallee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "pancakeCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeERC20": {
        "src": "contracts/core/interfaces/IPancakeERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts/periphery/interfaces/IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts/periphery/interfaces/IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/periphery/interfaces/IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/periphery/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeOracleLibrary": {
        "src": "contracts/periphery/libraries/PancakeOracleLibrary.sol:6",
        "version": {
          "withMetadata": "22f7010a42b6f845b428ba4f388ae4be7fc260707aa06baffd93c2ecccc77af8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeMigrator": {
        "src": "contracts/periphery/PancakeMigrator.sol:61",
        "version": {
          "withMetadata": "05f02405c1963c9993aa34c3aa7b46ad05fb544db2dc8fcf74dff897ab95b5fe",
          "withoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551",
          "linkedWithoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551"
        },
        "inherit": [
          "IPancakeMigrator"
        ],
        "libraries": [
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeMigrator",
            "src": "contracts/periphery/PancakeMigrator.sol:65"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factoryV1",
            "src": "contracts/periphery/PancakeMigrator.sol:62"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/periphery/PancakeMigrator.sol:63"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/periphery/PancakeRouter01.sol:15",
        "version": {
          "withMetadata": "824e4af62e834d9a7cdf3b2e5b85bedef1e938738b4c24d1b34c32f396bbfa63",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter": {
        "src": "contracts/periphery/PancakeRouter.sol:63",
        "version": {
          "withMetadata": "b5ee037a664bb52e4edd2855c09f9d6159a82c8b936a8e5309de83eaf972210f",
          "withoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f",
          "linkedWithoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f"
        },
        "inherit": [
          "IPancakeRouter02",
          "IPancakeRouter01"
        ],
        "libraries": [
          "SafeMath",
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter",
            "src": "contracts/periphery/PancakeRouter.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter.sol:66"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter01": {
        "src": "contracts/periphery/PancakeRouter01.sol:62",
        "version": {
          "withMetadata": "403d8c7438633259ea0a6ded6665c9cdd76a73830f87bf6fb4dd1912fa11d524",
          "withoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a",
          "linkedWithoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a"
        },
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter01",
            "src": "contracts/periphery/PancakeRouter01.sol:71"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter01.sol:63"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter01.sol:64"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/periphery/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts/periphery/interfaces/IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts/periphery/interfaces/IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/periphery/interfaces/IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/periphery/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeLibrary": {
        "src": "contracts/periphery/libraries/PancakeLibrary.sol:7",
        "version": {
          "withMetadata": "0138e454bd5cb9c2c709c22efa6c8e7b353d913457c165076035dd3566acd9d5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/periphery/libraries/SafeMath.sol:5",
        "version": {
          "withMetadata": "87de537ecc9c1380eeb99537c917a2f30bbc730385d62acaa3ebeee80abf9703",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeMigrator": {
        "src": "contracts/periphery/PancakeMigrator.sol:61",
        "version": {
          "withMetadata": "05f02405c1963c9993aa34c3aa7b46ad05fb544db2dc8fcf74dff897ab95b5fe",
          "withoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551",
          "linkedWithoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551"
        },
        "inherit": [
          "IPancakeMigrator"
        ],
        "libraries": [
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeMigrator",
            "src": "contracts/periphery/PancakeMigrator.sol:65"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factoryV1",
            "src": "contracts/periphery/PancakeMigrator.sol:62"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/periphery/PancakeMigrator.sol:63"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/periphery/PancakeRouter01.sol:15",
        "version": {
          "withMetadata": "824e4af62e834d9a7cdf3b2e5b85bedef1e938738b4c24d1b34c32f396bbfa63",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter": {
        "src": "contracts/periphery/PancakeRouter.sol:63",
        "version": {
          "withMetadata": "b5ee037a664bb52e4edd2855c09f9d6159a82c8b936a8e5309de83eaf972210f",
          "withoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f",
          "linkedWithoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f"
        },
        "inherit": [
          "IPancakeRouter02",
          "IPancakeRouter01"
        ],
        "libraries": [
          "SafeMath",
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter",
            "src": "contracts/periphery/PancakeRouter.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter.sol:66"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter01": {
        "src": "contracts/periphery/PancakeRouter01.sol:62",
        "version": {
          "withMetadata": "403d8c7438633259ea0a6ded6665c9cdd76a73830f87bf6fb4dd1912fa11d524",
          "withoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a",
          "linkedWithoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a"
        },
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter01",
            "src": "contracts/periphery/PancakeRouter01.sol:71"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter01.sol:63"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter01.sol:64"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/periphery/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts/periphery/interfaces/IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts/periphery/interfaces/IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/periphery/interfaces/IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/periphery/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeLibrary": {
        "src": "contracts/periphery/libraries/PancakeLibrary.sol:7",
        "version": {
          "withMetadata": "0138e454bd5cb9c2c709c22efa6c8e7b353d913457c165076035dd3566acd9d5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/periphery/libraries/SafeMath.sol:5",
        "version": {
          "withMetadata": "87de537ecc9c1380eeb99537c917a2f30bbc730385d62acaa3ebeee80abf9703",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeMigrator": {
        "src": "contracts/periphery/PancakeMigrator.sol:61",
        "version": {
          "withMetadata": "05f02405c1963c9993aa34c3aa7b46ad05fb544db2dc8fcf74dff897ab95b5fe",
          "withoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551",
          "linkedWithoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551"
        },
        "inherit": [
          "IPancakeMigrator"
        ],
        "libraries": [
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeMigrator",
            "src": "contracts/periphery/PancakeMigrator.sol:65"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factoryV1",
            "src": "contracts/periphery/PancakeMigrator.sol:62"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/periphery/PancakeMigrator.sol:63"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/periphery/PancakeRouter01.sol:15",
        "version": {
          "withMetadata": "824e4af62e834d9a7cdf3b2e5b85bedef1e938738b4c24d1b34c32f396bbfa63",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter": {
        "src": "contracts/periphery/PancakeRouter.sol:63",
        "version": {
          "withMetadata": "b5ee037a664bb52e4edd2855c09f9d6159a82c8b936a8e5309de83eaf972210f",
          "withoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f",
          "linkedWithoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f"
        },
        "inherit": [
          "IPancakeRouter02",
          "IPancakeRouter01"
        ],
        "libraries": [
          "SafeMath",
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter",
            "src": "contracts/periphery/PancakeRouter.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter.sol:66"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter01": {
        "src": "contracts/periphery/PancakeRouter01.sol:62",
        "version": {
          "withMetadata": "403d8c7438633259ea0a6ded6665c9cdd76a73830f87bf6fb4dd1912fa11d524",
          "withoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a",
          "linkedWithoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a"
        },
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter01",
            "src": "contracts/periphery/PancakeRouter01.sol:71"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter01.sol:63"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter01.sol:64"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/periphery/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts/periphery/interfaces/IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts/periphery/interfaces/IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/periphery/interfaces/IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/periphery/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeLibrary": {
        "src": "contracts/periphery/libraries/PancakeLibrary.sol:7",
        "version": {
          "withMetadata": "0138e454bd5cb9c2c709c22efa6c8e7b353d913457c165076035dd3566acd9d5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/periphery/libraries/SafeMath.sol:5",
        "version": {
          "withMetadata": "87de537ecc9c1380eeb99537c917a2f30bbc730385d62acaa3ebeee80abf9703",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeMigrator": {
        "src": "contracts/periphery/PancakeMigrator.sol:61",
        "version": {
          "withMetadata": "05f02405c1963c9993aa34c3aa7b46ad05fb544db2dc8fcf74dff897ab95b5fe",
          "withoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551",
          "linkedWithoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551"
        },
        "inherit": [
          "IPancakeMigrator"
        ],
        "libraries": [
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeMigrator",
            "src": "contracts/periphery/PancakeMigrator.sol:65"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factoryV1",
            "src": "contracts/periphery/PancakeMigrator.sol:62"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/periphery/PancakeMigrator.sol:63"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/periphery/PancakeRouter01.sol:15",
        "version": {
          "withMetadata": "824e4af62e834d9a7cdf3b2e5b85bedef1e938738b4c24d1b34c32f396bbfa63",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter": {
        "src": "contracts/periphery/PancakeRouter.sol:63",
        "version": {
          "withMetadata": "b5ee037a664bb52e4edd2855c09f9d6159a82c8b936a8e5309de83eaf972210f",
          "withoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f",
          "linkedWithoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f"
        },
        "inherit": [
          "IPancakeRouter02",
          "IPancakeRouter01"
        ],
        "libraries": [
          "SafeMath",
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter",
            "src": "contracts/periphery/PancakeRouter.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter.sol:66"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter01": {
        "src": "contracts/periphery/PancakeRouter01.sol:62",
        "version": {
          "withMetadata": "403d8c7438633259ea0a6ded6665c9cdd76a73830f87bf6fb4dd1912fa11d524",
          "withoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a",
          "linkedWithoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a"
        },
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter01",
            "src": "contracts/periphery/PancakeRouter01.sol:71"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter01.sol:63"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter01.sol:64"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/periphery/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts/periphery/interfaces/IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts/periphery/interfaces/IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/periphery/interfaces/IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/periphery/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeLibrary": {
        "src": "contracts/periphery/libraries/PancakeLibrary.sol:7",
        "version": {
          "withMetadata": "0138e454bd5cb9c2c709c22efa6c8e7b353d913457c165076035dd3566acd9d5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/periphery/libraries/SafeMath.sol:5",
        "version": {
          "withMetadata": "87de537ecc9c1380eeb99537c917a2f30bbc730385d62acaa3ebeee80abf9703",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeMigrator": {
        "src": "contracts/periphery/PancakeMigrator.sol:61",
        "version": {
          "withMetadata": "05f02405c1963c9993aa34c3aa7b46ad05fb544db2dc8fcf74dff897ab95b5fe",
          "withoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551",
          "linkedWithoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551"
        },
        "inherit": [
          "IPancakeMigrator"
        ],
        "libraries": [
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeMigrator",
            "src": "contracts/periphery/PancakeMigrator.sol:65"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factoryV1",
            "src": "contracts/periphery/PancakeMigrator.sol:62"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/periphery/PancakeMigrator.sol:63"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/periphery/PancakeRouter01.sol:15",
        "version": {
          "withMetadata": "824e4af62e834d9a7cdf3b2e5b85bedef1e938738b4c24d1b34c32f396bbfa63",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter": {
        "src": "contracts/periphery/PancakeRouter.sol:63",
        "version": {
          "withMetadata": "b5ee037a664bb52e4edd2855c09f9d6159a82c8b936a8e5309de83eaf972210f",
          "withoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f",
          "linkedWithoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f"
        },
        "inherit": [
          "IPancakeRouter02",
          "IPancakeRouter01"
        ],
        "libraries": [
          "SafeMath",
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter",
            "src": "contracts/periphery/PancakeRouter.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter.sol:66"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter01": {
        "src": "contracts/periphery/PancakeRouter01.sol:62",
        "version": {
          "withMetadata": "403d8c7438633259ea0a6ded6665c9cdd76a73830f87bf6fb4dd1912fa11d524",
          "withoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a",
          "linkedWithoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a"
        },
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter01",
            "src": "contracts/periphery/PancakeRouter01.sol:71"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter01.sol:63"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter01.sol:64"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/periphery/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts/periphery/interfaces/IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts/periphery/interfaces/IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/periphery/interfaces/IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/periphery/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeLibrary": {
        "src": "contracts/periphery/libraries/PancakeLibrary.sol:7",
        "version": {
          "withMetadata": "0138e454bd5cb9c2c709c22efa6c8e7b353d913457c165076035dd3566acd9d5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/periphery/libraries/SafeMath.sol:5",
        "version": {
          "withMetadata": "87de537ecc9c1380eeb99537c917a2f30bbc730385d62acaa3ebeee80abf9703",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "TransferHelper": {
        "src": "@uniswap/lib/contracts/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "162a31673b7417702e303f3d05fd3ca94f51d547d796d3048d1690c02c14a47c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeMigrator": {
        "src": "contracts/periphery/PancakeMigrator.sol:11",
        "version": {
          "withMetadata": "da24e97666a1e3574b7e258a6e762df78cdb37d5852bca681b41b346c3822433",
          "withoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551",
          "linkedWithoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551"
        },
        "inherit": [
          "IPancakeMigrator"
        ],
        "libraries": [
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeMigrator",
            "src": "contracts/periphery/PancakeMigrator.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factoryV1",
            "src": "contracts/periphery/PancakeMigrator.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/periphery/PancakeMigrator.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter": {
        "src": "contracts/periphery/PancakeRouter.sol:12",
        "version": {
          "withMetadata": "2e7dd2a559f62501b728e4b3e4a1e793f6a7c223dab1e468a191f022f3db00de",
          "withoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f",
          "linkedWithoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f"
        },
        "inherit": [
          "IPancakeRouter02",
          "IPancakeRouter01"
        ],
        "libraries": [
          "SafeMath",
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter",
            "src": "contracts/periphery/PancakeRouter.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter01": {
        "src": "contracts/periphery/PancakeRouter01.sol:11",
        "version": {
          "withMetadata": "095617474ddbd09cc05fff8e6d8a7f9472caf7529b438934a2f724fdb9c54470",
          "withoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a",
          "linkedWithoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a"
        },
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter01",
            "src": "contracts/periphery/PancakeRouter01.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter01.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter01.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/periphery/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts/periphery/interfaces/IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts/periphery/interfaces/IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/periphery/interfaces/IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/periphery/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeLibrary": {
        "src": "contracts/periphery/libraries/PancakeLibrary.sol:7",
        "version": {
          "withMetadata": "0138e454bd5cb9c2c709c22efa6c8e7b353d913457c165076035dd3566acd9d5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/periphery/libraries/SafeMath.sol:5",
        "version": {
          "withMetadata": "87de537ecc9c1380eeb99537c917a2f30bbc730385d62acaa3ebeee80abf9703",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts/Token.sol:125",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts/Token.sol:167",
        "version": {
          "withMetadata": "de66764bc729d7f94b416cd80fda19b38065080f6ba21c87d6ce8d45511f7c80",
          "withoutMetadata": "e17ae26f099a89a214329b35547d9cf94ee4bfbc8fcb4ac8863c9a4736cc3336",
          "linkedWithoutMetadata": "e17ae26f099a89a214329b35547d9cf94ee4bfbc8fcb4ac8863c9a4736cc3336"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/Token.sol:186"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Token.sol:168"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Token.sol:170"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/Token.sol:172"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/Token.sol:174"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/Token.sol:175"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "contracts/Token.sol:451",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Token.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "contracts/Token.sol:94",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Token": {
        "src": "contracts/Token.sol:485",
        "version": {
          "withMetadata": "94089373b8ab1715b2f737e5af479cbc3554545745ac6099b5a96896ca5979fc",
          "withoutMetadata": "e88421f915e043ec380e23218cb66211243cd0b69953fb7c935496ee2140481f",
          "linkedWithoutMetadata": "e88421f915e043ec380e23218cb66211243cd0b69953fb7c935496ee2140481f"
        },
        "inherit": [
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts/Token.sol:487"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Token",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Token.sol:486"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Staking.sol:267",
        "version": {
          "withMetadata": "99af76a806732e6019e7b8df5d0a4d86c7267178a048415b5f0b3205e61ac92e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts/Staking.sol:628",
        "version": {
          "withMetadata": "0b9abfedaa854f2c1daf3de5422c29485d77d2b3f5b6ec8ff1cd17be57e4d00c",
          "withoutMetadata": "4d117f3165d8c360e1b1e0a22859d36e184b07e48715e7df26348361c6e3c1df",
          "linkedWithoutMetadata": "4d117f3165d8c360e1b1e0a22859d36e184b07e48715e7df26348361c6e3c1df"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts/Staking.sol:651"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:634"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)342",
              "src": "contracts/Staking.sol:642"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)342",
              "src": "contracts/Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:645"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:647"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)342": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Staking.sol:193",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts/Staking.sol:530",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Staking.sol:9",
        "version": {
          "withMetadata": "c3aa661b96c777d96952b3c06c86ee87e8059b471d54e9a386544fbf19119440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts/Staking.sol:551",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/Staking.sol:555"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Staking.sol:552"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:553"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/Staking.sol:587",
        "version": {
          "withMetadata": "976d6ab43564b0f2b74688ddb7fa96701a3e8f2690649bdbe9a199347663dedb",
          "withoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5",
          "linkedWithoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/Staking.sol:591"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:588"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/Staking.sol:589"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/Staking.sol:487",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/Staking.sol:504"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:502"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/Staking.sol:411",
        "version": {
          "withMetadata": "fce337f8e2d16a0cf0f9e7d2afb7c5328d33790794f88d3c3f7cdfc4efaafaf3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Staking.sol:47",
        "version": {
          "withMetadata": "254fdabde573119af94c0ac6caf561c03196c03e5937377c17550fdc1a5bbde5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMathUpgradeable": {
        "src": "contracts/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "4815418e5ed355343d79fc76033c071af9d81ece20526f5a5502b6aeb0cfdd50",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IBEP20": {
        "src": "contracts/IBEP20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Exchange.sol:410",
        "version": {
          "withMetadata": "5387de9c3be04944ea46c35fecceb795614a99d2bf047416da2eecc0f726a476",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts/Exchange.sol:590",
        "version": {
          "withMetadata": "4c822672ef11c960525f7a67b44754c6eba3b77fafe38b4fa955166e42fd7cbd",
          "withoutMetadata": "2cef57f17794d9cace0c29b926bb2e40a1b73c84c4ca6c6db180b5f87ce88cb0",
          "linkedWithoutMetadata": "2cef57f17794d9cace0c29b926bb2e40a1b73c84c4ca6c6db180b5f87ce88cb0"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(string,string)",
          "getOwner()",
          "name()",
          "decimals()",
          "symbol()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts/Exchange.sol:613"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Exchange.sol:594"
            },
            {
              "contract": "BEP20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Exchange.sol:596"
            },
            {
              "contract": "BEP20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/Exchange.sol:598"
            },
            {
              "contract": "BEP20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/Exchange.sol:600"
            },
            {
              "contract": "BEP20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/Exchange.sol:601"
            },
            {
              "contract": "BEP20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts/Exchange.sol:602"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts/Exchange.sol:36",
        "version": {
          "withMetadata": "629f13a79dddb096d4a589d717c8516bfaf129854b497bca397da880e2043e43",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockPool": {
        "src": "contracts/Exchange.sol:877",
        "version": {
          "withMetadata": "8e4aa57c0754a199109710b8981377825ece7d10fafc147d5a58ea6cd973b4c2",
          "withoutMetadata": "42bbdaaaaade9b25a0b9d8323f6cc82b3a24de1fbf8b3eb4a2df2c063e69fa0d",
          "linkedWithoutMetadata": "42bbdaaaaade9b25a0b9d8323f6cc82b3a24de1fbf8b3eb4a2df2c063e69fa0d"
        },
        "inherit": [
          "BEP20",
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Math"
        ],
        "methods": [
          "(address,address)",
          "getAmountsOut(uint256,address,address)",
          "price(uint256,uint256,uint256)",
          "swap(uint256,address,address)",
          "getRatio(uint256,uint256,uint256,uint256,uint256,uint256)",
          "depositLiquidity(uint256,uint256,uint256,uint256,address,address)",
          "withdrawLiquidity(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockPool",
            "src": "contracts/Exchange.sol:892"
          },
          {
            "kind": "state-variable-assignment",
            "name": "LP_Cake",
            "src": "contracts/Exchange.sol:888"
          },
          {
            "kind": "state-variable-assignment",
            "name": "WBNB",
            "src": "contracts/Exchange.sol:890"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockPool",
              "label": "tokenA",
              "type": "t_address",
              "src": "contracts/Exchange.sol:880"
            },
            {
              "contract": "GrayblockPool",
              "label": "tokenB",
              "type": "t_address",
              "src": "contracts/Exchange.sol:881"
            },
            {
              "contract": "GrayblockPool",
              "label": "totalLiquidity",
              "type": "t_uint256",
              "src": "contracts/Exchange.sol:884"
            },
            {
              "contract": "GrayblockPool",
              "label": "liquidity",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Exchange.sol:885"
            },
            {
              "contract": "GrayblockPool",
              "label": "admins",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Exchange.sol:886"
            },
            {
              "contract": "GrayblockPool",
              "label": "LP_Cake",
              "type": "t_address",
              "src": "contracts/Exchange.sol:888"
            },
            {
              "contract": "GrayblockPool",
              "label": "WBNB",
              "type": "t_address",
              "src": "contracts/Exchange.sol:890"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/Exchange.sol:124",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Exchange.sol:5",
        "version": {
          "withMetadata": "36637acbffc38de601a576759066174d79b00ab0b2fa4ee5136d7f85af0fb98f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/Exchange.sol:64",
        "version": {
          "withMetadata": "cdb4a9f2871d1b47df9e605da5dd2b3e6e60636cc29f4e6806bc9332da5e57d2",
          "withoutMetadata": "d867b5c37838a05fb1504b6ef2f73f383a62fe2d10dabe19c719be83e63d1f08",
          "linkedWithoutMetadata": "d867b5c37838a05fb1504b6ef2f73f383a62fe2d10dabe19c719be83e63d1f08"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/Exchange.sol:72"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Exchange.sol:65"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Exchange.sol:233",
        "version": {
          "withMetadata": "878375bf297ce4782923f897b373c1cfca4045006964656608bec15b2453c96f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FixedPoint": {
        "src": "@uniswap/lib/contracts/libraries/FixedPoint.sol:4",
        "version": {
          "withMetadata": "c206a05b999ccba140d3c018b894fc2942cc037a1fd78d1eac3990b0a12b09d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap/lib/contracts/libraries/TransferHelper.sol:4",
        "version": {
          "withMetadata": "354d06207fa1798c480c33c7c895f06ead50976307ea54c7412f54898a8ef073",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/periphery/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeCallee": {
        "src": "contracts/core/interfaces/IPancakeCallee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "pancakeCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeERC20": {
        "src": "contracts/core/interfaces/IPancakeERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts/periphery/interfaces/IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts/periphery/interfaces/IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/periphery/interfaces/IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/periphery/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeOracleLibrary": {
        "src": "contracts/periphery/libraries/PancakeOracleLibrary.sol:7",
        "version": {
          "withMetadata": "c30353bc554d46147f6ccb73f7c0225f5420eae0e8a6c0055439c9869a94a886",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPoint"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Migrations": {
        "src": "contracts/periphery/Migrations.sol:4",
        "version": {
          "withMetadata": "4747b061cca94b3b7875d9abd9f5609ce8d5fb218f5cc17d15c893d18408b099",
          "withoutMetadata": "d0a17d0bd77c8e9f0fb9f05e7ba40459c124176ccb7036a42e0c15c877b2ea5e",
          "linkedWithoutMetadata": "d0a17d0bd77c8e9f0fb9f05e7ba40459c124176ccb7036a42e0c15c877b2ea5e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCompleted(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Migrations",
            "src": "contracts/periphery/Migrations.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Migrations",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/periphery/Migrations.sol:5"
            },
            {
              "contract": "Migrations",
              "label": "last_completed_migration",
              "type": "t_uint256",
              "src": "contracts/periphery/Migrations.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Migrations": {
        "src": "contracts/core/Migration.sol:4",
        "version": {
          "withMetadata": "08750e2e49efc384fed0873fc6fd6ae72f76e2053d90f5849451e900e7ee54d0",
          "withoutMetadata": "d0a17d0bd77c8e9f0fb9f05e7ba40459c124176ccb7036a42e0c15c877b2ea5e",
          "linkedWithoutMetadata": "d0a17d0bd77c8e9f0fb9f05e7ba40459c124176ccb7036a42e0c15c877b2ea5e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCompleted(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Migrations",
            "src": "contracts/core/Migration.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Migrations",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/core/Migration.sol:5"
            },
            {
              "contract": "Migrations",
              "label": "last_completed_migration",
              "type": "t_uint256",
              "src": "contracts/core/Migration.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "TransferHelper": {
        "src": "@uniswap/lib/contracts/libraries/TransferHelper.sol:4",
        "version": {
          "withMetadata": "c6cdce21061412598e7e7301cc20d37ad3d9d03a9906aeeed69968a2eff7c5c1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeMigrator": {
        "src": "contracts/periphery/PancakeMigrator.sol:11",
        "version": {
          "withMetadata": "d6b371dea2485ce8d2afe2384f67edbef21ee3cc706d77bc53e6efa48763d35c",
          "withoutMetadata": "79a47d3901795a5584258eff268aeff88799328cc22daef4a6fc12ca629fe3f6",
          "linkedWithoutMetadata": "79a47d3901795a5584258eff268aeff88799328cc22daef4a6fc12ca629fe3f6"
        },
        "inherit": [
          "IPancakeMigrator"
        ],
        "libraries": [
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeMigrator",
            "src": "contracts/periphery/PancakeMigrator.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factoryV1",
            "src": "contracts/periphery/PancakeMigrator.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/periphery/PancakeMigrator.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter": {
        "src": "contracts/periphery/PancakeRouter.sol:12",
        "version": {
          "withMetadata": "bb78831547d7300d58ab02a0a1b1148d6fff1c33be1cfe7322fe3ac325f4d8ca",
          "withoutMetadata": "facaf04a82a72adbb105949df0f12f9124a40923c246b2e4ca4f32021e49cf78",
          "linkedWithoutMetadata": "facaf04a82a72adbb105949df0f12f9124a40923c246b2e4ca4f32021e49cf78"
        },
        "inherit": [
          "IPancakeRouter02",
          "IPancakeRouter01"
        ],
        "libraries": [
          "SafeMath",
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter",
            "src": "contracts/periphery/PancakeRouter.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter01": {
        "src": "contracts/periphery/PancakeRouter01.sol:11",
        "version": {
          "withMetadata": "1e43413baef7296383b9d913ff1445432af00030cd66963a206798818fbdd724",
          "withoutMetadata": "e3307e37727fe6f0f4693f1ebb846bb986de9b9c7ea5de5b5532a6ebce8278e7",
          "linkedWithoutMetadata": "e3307e37727fe6f0f4693f1ebb846bb986de9b9c7ea5de5b5532a6ebce8278e7"
        },
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter01",
            "src": "contracts/periphery/PancakeRouter01.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter01.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter01.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/periphery/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts/periphery/interfaces/IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts/periphery/interfaces/IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/periphery/interfaces/IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/periphery/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeLibrary": {
        "src": "contracts/periphery/libraries/PancakeLibrary.sol:7",
        "version": {
          "withMetadata": "0138e454bd5cb9c2c709c22efa6c8e7b353d913457c165076035dd3566acd9d5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/periphery/libraries/SafeMath.sol:5",
        "version": {
          "withMetadata": "87de537ecc9c1380eeb99537c917a2f30bbc730385d62acaa3ebeee80abf9703",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "PancakeERC20": {
        "src": "contracts/core/PancakeERC20.sol:6",
        "version": {
          "withMetadata": "f30d7cc99978953ab1e9b5603e5555c2fcb3f71014a5943116781f7cfa37d0d8",
          "withoutMetadata": "f30d7cc99978953ab1e9b5603e5555c2fcb3f71014a5943116781f7cfa37d0d8",
          "linkedWithoutMetadata": "f30d7cc99978953ab1e9b5603e5555c2fcb3f71014a5943116781f7cfa37d0d8"
        },
        "inherit": [
          "IPancakeERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeERC20",
            "src": "contracts/core/PancakeERC20.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/core/PancakeERC20.sol:12"
            },
            {
              "contract": "PancakeERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/core/PancakeERC20.sol:13"
            },
            {
              "contract": "PancakeERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/core/PancakeERC20.sol:14"
            },
            {
              "contract": "PancakeERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/core/PancakeERC20.sol:16"
            },
            {
              "contract": "PancakeERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/core/PancakeERC20.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeFactory": {
        "src": "contracts/core/PancakeFactory.sol:6",
        "version": {
          "withMetadata": "cd70f0fe91f9070c4e926ebeb22906790737d17e32bf5ff1765a519e73348c5c",
          "withoutMetadata": "73d3dcbba90fae5bd1ddda217526e13f49e46301899d743e64b889d5b173020b",
          "linkedWithoutMetadata": "73d3dcbba90fae5bd1ddda217526e13f49e46301899d743e64b889d5b173020b"
        },
        "inherit": [
          "IPancakeFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeFactory",
            "src": "contracts/core/PancakeFactory.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeFactory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/core/PancakeFactory.sol:9"
            },
            {
              "contract": "PancakeFactory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/core/PancakeFactory.sol:10"
            },
            {
              "contract": "PancakeFactory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/core/PancakeFactory.sol:12"
            },
            {
              "contract": "PancakeFactory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/core/PancakeFactory.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakePair": {
        "src": "contracts/core/PancakePair.sol:11",
        "version": {
          "withMetadata": "7ad13c813a954b2f8acc8bf42b9fb23178ef75868c04ecbc9d4b38cd1ad5e734",
          "withoutMetadata": "7ad13c813a954b2f8acc8bf42b9fb23178ef75868c04ecbc9d4b38cd1ad5e734",
          "linkedWithoutMetadata": "7ad13c813a954b2f8acc8bf42b9fb23178ef75868c04ecbc9d4b38cd1ad5e734"
        },
        "inherit": [
          "PancakeERC20",
          "IPancakeERC20",
          "IPancakePair"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakePair",
            "src": "contracts/core/PancakePair.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/core/PancakePair.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakePair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/core/PancakePair.sol:18"
            },
            {
              "contract": "PancakePair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/core/PancakePair.sol:19"
            },
            {
              "contract": "PancakePair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/core/PancakePair.sol:20"
            },
            {
              "contract": "PancakePair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/core/PancakePair.sol:22"
            },
            {
              "contract": "PancakePair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/core/PancakePair.sol:23"
            },
            {
              "contract": "PancakePair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/core/PancakePair.sol:24"
            },
            {
              "contract": "PancakePair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/core/PancakePair.sol:26"
            },
            {
              "contract": "PancakePair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/core/PancakePair.sol:27"
            },
            {
              "contract": "PancakePair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/core/PancakePair.sol:28"
            },
            {
              "contract": "PancakePair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/core/PancakePair.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/core/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeCallee": {
        "src": "contracts/core/interfaces/IPancakeCallee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "pancakeCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeERC20": {
        "src": "contracts/core/interfaces/IPancakeERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/core/libraries/Math.sol:5",
        "version": {
          "withMetadata": "b98dbc8605f8d19e7d9ae84272080b9ecc7c43a1adfc508cbcc318ffd21a34ad",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/core/libraries/SafeMath.sol:5",
        "version": {
          "withMetadata": "1ee8c4f91c0b264351b88c0c48d140b0847b0ea2007f18f3c7bf32f6bb531c69",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/core/libraries/UQ112x112.sol:8",
        "version": {
          "withMetadata": "7d880eb672c2dbcd0e49c5431833332edebc784325ed21c9454c76cead708249",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FixedPoint": {
        "src": "@uniswap/lib/contracts/libraries/FixedPoint.sol:4",
        "version": {
          "withMetadata": "e8adbe7892ee04d92fc174c7cb099c828ccf9a35ed3acf53d1daee8ed6efd068",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap/lib/contracts/libraries/TransferHelper.sol:4",
        "version": {
          "withMetadata": "375ee8e3ed03af030f142ae6f38c0e729ac9796b391405dc878b033992bab425",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts/Staking.sol:267",
        "version": {
          "withMetadata": "472561ebc84fb4cd6fd0ec137b11bdda18027b28f0202586dc9372857a86c42c",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts/Exchange.sol:590",
        "version": {
          "withMetadata": "d1fac2e4470e5da8c299f53f22790f99263186589e6274e4a519bc0bc54426fd",
          "withoutMetadata": "9e90403912052208369d7335bda264e52d9002ff7be0879193e50c6362e58f5d",
          "linkedWithoutMetadata": "9e90403912052208369d7335bda264e52d9002ff7be0879193e50c6362e58f5d"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(string,string)",
          "getOwner()",
          "name()",
          "decimals()",
          "symbol()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts/Exchange.sol:613"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Exchange.sol:594"
            },
            {
              "contract": "BEP20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Exchange.sol:596"
            },
            {
              "contract": "BEP20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/Exchange.sol:598"
            },
            {
              "contract": "BEP20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/Exchange.sol:600"
            },
            {
              "contract": "BEP20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/Exchange.sol:601"
            },
            {
              "contract": "BEP20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts/Exchange.sol:602"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts/Token.sol:125",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockPool": {
        "src": "contracts/Exchange.sol:877",
        "version": {
          "withMetadata": "39c2e7940632ea819fff5093f8beb6ba59777e9f40eb94bdd88e95697a29c63a",
          "withoutMetadata": "cd70c42fbec9ec6fd17d91391ed6bea9d9e13b8d4a2e60da760c63ed418faf2a",
          "linkedWithoutMetadata": "cd70c42fbec9ec6fd17d91391ed6bea9d9e13b8d4a2e60da760c63ed418faf2a"
        },
        "inherit": [
          "BEP20",
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Math"
        ],
        "methods": [
          "(address,address)",
          "getAmountsOut(uint256,address,address)",
          "price(uint256,uint256,uint256)",
          "swap(uint256,address,address)",
          "getRatio(uint256,uint256,uint256,uint256,uint256,uint256)",
          "depositLiquidity(uint256,uint256,uint256,uint256,address,address)",
          "withdrawLiquidity(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockPool",
            "src": "contracts/Exchange.sol:892"
          },
          {
            "kind": "state-variable-assignment",
            "name": "LP_Cake",
            "src": "contracts/Exchange.sol:888"
          },
          {
            "kind": "state-variable-assignment",
            "name": "WBNB",
            "src": "contracts/Exchange.sol:890"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockPool",
              "label": "tokenA",
              "type": "t_address",
              "src": "contracts/Exchange.sol:880"
            },
            {
              "contract": "GrayblockPool",
              "label": "tokenB",
              "type": "t_address",
              "src": "contracts/Exchange.sol:881"
            },
            {
              "contract": "GrayblockPool",
              "label": "totalLiquidity",
              "type": "t_uint256",
              "src": "contracts/Exchange.sol:884"
            },
            {
              "contract": "GrayblockPool",
              "label": "liquidity",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Exchange.sol:885"
            },
            {
              "contract": "GrayblockPool",
              "label": "admins",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Exchange.sol:886"
            },
            {
              "contract": "GrayblockPool",
              "label": "LP_Cake",
              "type": "t_address",
              "src": "contracts/Exchange.sol:888"
            },
            {
              "contract": "GrayblockPool",
              "label": "WBNB",
              "type": "t_address",
              "src": "contracts/Exchange.sol:890"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/IBEP20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Staking.sol:9",
        "version": {
          "withMetadata": "7320d150854030df0a07b4ff390c58c062dbd0f57666f8f8ce784564ae8d9f26",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/Exchange.sol:64",
        "version": {
          "withMetadata": "d2be796166937722131e2494f005658b6c052bc95f28e01c090313542cacb7e6",
          "withoutMetadata": "fb62424eed493332c743d93a0a9ea5db985560a1148681c7a2db917a25681ea0",
          "linkedWithoutMetadata": "fb62424eed493332c743d93a0a9ea5db985560a1148681c7a2db917a25681ea0"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/Exchange.sol:72"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Exchange.sol:65"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Staking.sol:47",
        "version": {
          "withMetadata": "fca59d549b635c8aab78a3ab96bb5724dea1277e7ddd598b61fedb6670a3e087",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "contracts/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "a68d3e9501189764a213e21147d398c8135f98d18b5ac2070200107b8e73d30c",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts/Staking.sol:628",
        "version": {
          "withMetadata": "b2309c1f4d93312c82cfb0b83c6a1827d306f0fdc998fd0b2142d0d9c35e4d44",
          "withoutMetadata": "9cc4b2050352c29ff5c6d82d175ac78c8893c24adbf60cc947595a47dca038b3",
          "linkedWithoutMetadata": "9cc4b2050352c29ff5c6d82d175ac78c8893c24adbf60cc947595a47dca038b3"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts/Staking.sol:651"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:634"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)3036",
              "src": "contracts/Staking.sol:642"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)3036",
              "src": "contracts/Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:645"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:647"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)3036": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/periphery/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts/Staking.sol:530",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts/Staking.sol:551",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/Staking.sol:555"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Staking.sol:552"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:553"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/Staking.sol:587",
        "version": {
          "withMetadata": "a3044aaacd5a04c475a1b9f57612d8cfd29a8b732b71ee69e7a6d028fb6fcca7",
          "withoutMetadata": "2f8777bfc8c47e4c3b1381947cbbfcc37fa31ca9b0565e7a2c9a471babe605ca",
          "linkedWithoutMetadata": "2f8777bfc8c47e4c3b1381947cbbfcc37fa31ca9b0565e7a2c9a471babe605ca"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/Staking.sol:591"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:588"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/Staking.sol:589"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/Staking.sol:487",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/Staking.sol:504"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:502"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/Staking.sol:411",
        "version": {
          "withMetadata": "6e99021925002b667586b1f82a5f63c6a85f41e0592bfbaee115def9596fb59e",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts/Token.sol:167",
        "version": {
          "withMetadata": "e8a0c10bc5cdf8380614a0c8a606b87aacf240706004bfe2320d52ee4b5cee31",
          "withoutMetadata": "d7e8ed31e1333933452bbf73abd671ff44f6a9ace577cf7d65f3e4e2e520437e",
          "linkedWithoutMetadata": "d7e8ed31e1333933452bbf73abd671ff44f6a9ace577cf7d65f3e4e2e520437e"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/Token.sol:186"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Token.sol:168"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Token.sol:170"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/Token.sol:172"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/Token.sol:174"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/Token.sol:175"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "contracts/Token.sol:451",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "contracts/Token.sol:94",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Token": {
        "src": "contracts/Token.sol:485",
        "version": {
          "withMetadata": "8974e03c0dd6909f0b2ee8a701509c8d97d06051e7988ec249da4b7d071b81c0",
          "withoutMetadata": "0ae5b35d6adf818a9660edbab917d17cf9951649af35af18e4695c980f12f5fb",
          "linkedWithoutMetadata": "0ae5b35d6adf818a9660edbab917d17cf9951649af35af18e4695c980f12f5fb"
        },
        "inherit": [
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts/Token.sol:487"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Token",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Token.sol:486"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeCallee": {
        "src": "contracts/core/interfaces/IPancakeCallee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "pancakeCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeERC20": {
        "src": "contracts/core/interfaces/IPancakeERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts/periphery/interfaces/IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts/periphery/interfaces/IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/periphery/interfaces/IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/periphery/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeOracleLibrary": {
        "src": "contracts/periphery/libraries/PancakeOracleLibrary.sol:7",
        "version": {
          "withMetadata": "70e474199e88d8f1d790cf0586a9739359d6af15115cd85582cc4cdc63eaeb6e",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "FixedPoint"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "TransferHelper": {
        "src": "@uniswap/lib/contracts/libraries/TransferHelper.sol:4",
        "version": {
          "withMetadata": "b93a1bbcd60654b51d139a236bb6a9c6a294807b933c65ee2813aebeda428635",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Migrations": {
        "src": "contracts/periphery/Migrations.sol:4",
        "version": {
          "withMetadata": "fcc1887cc5226be1d06f6b737e93a46fd64faceb13c9603f6a621285b1b144a5",
          "withoutMetadata": "f83ed73ce1402332a1a847ef18fd48efca260d7eeedd1f123b53a8297dd6e3e0",
          "linkedWithoutMetadata": "f83ed73ce1402332a1a847ef18fd48efca260d7eeedd1f123b53a8297dd6e3e0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCompleted(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Migrations",
            "src": "contracts/periphery/Migrations.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Migrations",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/periphery/Migrations.sol:5"
            },
            {
              "contract": "Migrations",
              "label": "last_completed_migration",
              "type": "t_uint256",
              "src": "contracts/periphery/Migrations.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeMigrator": {
        "src": "contracts/periphery/PancakeMigrator.sol:11",
        "version": {
          "withMetadata": "0fb82210fd802a443c345ac7e7a9e5245758d9230ff5befc6419ac704c2129e8",
          "withoutMetadata": "71b6f07ac74edb0735674b3eb045c7f4adbeb5649d710da4d3c248e6abe8824c",
          "linkedWithoutMetadata": "71b6f07ac74edb0735674b3eb045c7f4adbeb5649d710da4d3c248e6abe8824c"
        },
        "inherit": [
          "IPancakeMigrator"
        ],
        "libraries": [
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeMigrator",
            "src": "contracts/periphery/PancakeMigrator.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factoryV1",
            "src": "contracts/periphery/PancakeMigrator.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/periphery/PancakeMigrator.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter": {
        "src": "contracts/periphery/PancakeRouter.sol:12",
        "version": {
          "withMetadata": "b97dbdee47c6e316e6ebe6892dd7302b6e0f3c9e295fa5aeddf5a7c24b46bf98",
          "withoutMetadata": "7e17ccaf1bd7a1a5775a2c926f983f7280083593f11a9991a97f5e66d816ba45",
          "linkedWithoutMetadata": "7e17ccaf1bd7a1a5775a2c926f983f7280083593f11a9991a97f5e66d816ba45"
        },
        "inherit": [
          "IPancakeRouter02",
          "IPancakeRouter01"
        ],
        "libraries": [
          "SafeMath",
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter",
            "src": "contracts/periphery/PancakeRouter.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter01": {
        "src": "contracts/periphery/PancakeRouter01.sol:11",
        "version": {
          "withMetadata": "ee5526b3bb96b526956e1d6c6495ccfe25eedcbc60196a55d087fe3363b016ca",
          "withoutMetadata": "ceda2142f7a3879b0c6b6713656dfbdb0c67a2108c87e9bfdf38495e0c4c7a8b",
          "linkedWithoutMetadata": "ceda2142f7a3879b0c6b6713656dfbdb0c67a2108c87e9bfdf38495e0c4c7a8b"
        },
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter01",
            "src": "contracts/periphery/PancakeRouter01.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter01.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter01.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/periphery/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts/periphery/interfaces/IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts/periphery/interfaces/IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/periphery/interfaces/IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/periphery/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeLibrary": {
        "src": "contracts/periphery/libraries/PancakeLibrary.sol:7",
        "version": {
          "withMetadata": "b957a538b69b307c0d2d3777de2c399b4aef00a271985fa48f9388cd127a9478",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/periphery/libraries/SafeMath.sol:5",
        "version": {
          "withMetadata": "521a5c17a5153bf0b42d0a118f28d8e435fe89274aa017a77f1b801334c2a37a",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "PancakeERC20": {
        "src": "contracts/core/PancakeERC20.sol:6",
        "version": {
          "withMetadata": "07bcc36fda9a90439c7e0d778227f172c2c9c12b99a7e2bef37893581b13f053",
          "withoutMetadata": "07bcc36fda9a90439c7e0d778227f172c2c9c12b99a7e2bef37893581b13f053",
          "linkedWithoutMetadata": "07bcc36fda9a90439c7e0d778227f172c2c9c12b99a7e2bef37893581b13f053"
        },
        "inherit": [
          "IPancakeERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeERC20",
            "src": "contracts/core/PancakeERC20.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/core/PancakeERC20.sol:12"
            },
            {
              "contract": "PancakeERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/core/PancakeERC20.sol:13"
            },
            {
              "contract": "PancakeERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/core/PancakeERC20.sol:14"
            },
            {
              "contract": "PancakeERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/core/PancakeERC20.sol:16"
            },
            {
              "contract": "PancakeERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/core/PancakeERC20.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeFactory": {
        "src": "contracts/core/PancakeFactory.sol:6",
        "version": {
          "withMetadata": "38b686f8acd6b5036b93d1589266d1db18046e185b3dffa8a398455e8e68b103",
          "withoutMetadata": "c78ada1b86982a5b61df75049b8ca67f84ecf0d3027d4f1ecdf26ab3ee3177d2",
          "linkedWithoutMetadata": "c78ada1b86982a5b61df75049b8ca67f84ecf0d3027d4f1ecdf26ab3ee3177d2"
        },
        "inherit": [
          "IPancakeFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeFactory",
            "src": "contracts/core/PancakeFactory.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeFactory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/core/PancakeFactory.sol:9"
            },
            {
              "contract": "PancakeFactory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/core/PancakeFactory.sol:10"
            },
            {
              "contract": "PancakeFactory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/core/PancakeFactory.sol:12"
            },
            {
              "contract": "PancakeFactory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/core/PancakeFactory.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakePair": {
        "src": "contracts/core/PancakePair.sol:11",
        "version": {
          "withMetadata": "6f59e2a4a56c0b6962ace9a1191d2cd9ff32be0669b90d36c663eadae954314b",
          "withoutMetadata": "6f59e2a4a56c0b6962ace9a1191d2cd9ff32be0669b90d36c663eadae954314b",
          "linkedWithoutMetadata": "6f59e2a4a56c0b6962ace9a1191d2cd9ff32be0669b90d36c663eadae954314b"
        },
        "inherit": [
          "PancakeERC20",
          "IPancakeERC20",
          "IPancakePair"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakePair",
            "src": "contracts/core/PancakePair.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/core/PancakePair.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakePair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/core/PancakePair.sol:18"
            },
            {
              "contract": "PancakePair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/core/PancakePair.sol:19"
            },
            {
              "contract": "PancakePair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/core/PancakePair.sol:20"
            },
            {
              "contract": "PancakePair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/core/PancakePair.sol:22"
            },
            {
              "contract": "PancakePair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/core/PancakePair.sol:23"
            },
            {
              "contract": "PancakePair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/core/PancakePair.sol:24"
            },
            {
              "contract": "PancakePair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/core/PancakePair.sol:26"
            },
            {
              "contract": "PancakePair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/core/PancakePair.sol:27"
            },
            {
              "contract": "PancakePair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/core/PancakePair.sol:28"
            },
            {
              "contract": "PancakePair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/core/PancakePair.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/core/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeCallee": {
        "src": "contracts/core/interfaces/IPancakeCallee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "pancakeCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeERC20": {
        "src": "contracts/core/interfaces/IPancakeERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/core/libraries/Math.sol:5",
        "version": {
          "withMetadata": "8defe6fcaac26c52a74b5b9234f41f495fbb5c50aa004e3c53bac671a625e6fa",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/core/libraries/SafeMath.sol:5",
        "version": {
          "withMetadata": "999f6d47ab6dbbdeeda0a1bd3e93cbfbb35f80cc44532b7ec274fac76ef2c7b5",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/core/libraries/UQ112x112.sol:8",
        "version": {
          "withMetadata": "7f50af7c6519caae5be799500683e6dcf6854b335e53a42a38da57997d14ddca",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Exchange.sol:410",
        "version": {
          "withMetadata": "d639f1a879a8338c290e228c499b586a950978e059d6bd3212625c8b4e2a5830",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts/Exchange.sol:590",
        "version": {
          "withMetadata": "1304fded5257ce9c359f347879ef67d5ef3da8d3ddc9ecb5930ed185ffd13160",
          "withoutMetadata": "e104fb12a7c7a5a86133e38eb0c045e91d1e4f9b0250eeb12d1f48fa794f92ba",
          "linkedWithoutMetadata": "e104fb12a7c7a5a86133e38eb0c045e91d1e4f9b0250eeb12d1f48fa794f92ba"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(string,string)",
          "getOwner()",
          "name()",
          "decimals()",
          "symbol()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts/Exchange.sol:613"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Exchange.sol:594"
            },
            {
              "contract": "BEP20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Exchange.sol:596"
            },
            {
              "contract": "BEP20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/Exchange.sol:598"
            },
            {
              "contract": "BEP20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/Exchange.sol:600"
            },
            {
              "contract": "BEP20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/Exchange.sol:601"
            },
            {
              "contract": "BEP20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts/Exchange.sol:602"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts/Exchange.sol:36",
        "version": {
          "withMetadata": "f65a884fb7331af86faccc5d09c7b6587088d9348f21a8b0f3887fa4168c61c0",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockPool": {
        "src": "contracts/Exchange.sol:877",
        "version": {
          "withMetadata": "57b9f48c43d0d7265f93efc374dd760fafb3b2e74054520b828a5e118d72edee",
          "withoutMetadata": "d7b26f6de7dde501d81a15926858bd087e8fe183d98ae3fc850f4147c3140eb0",
          "linkedWithoutMetadata": "d7b26f6de7dde501d81a15926858bd087e8fe183d98ae3fc850f4147c3140eb0"
        },
        "inherit": [
          "BEP20",
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Math"
        ],
        "methods": [
          "(address,address)",
          "getAmountsOut(uint256,address,address)",
          "price(uint256,uint256,uint256)",
          "swap(uint256,address,address)",
          "getRatio(uint256,uint256,uint256,uint256,uint256,uint256)",
          "depositLiquidity(uint256,uint256,uint256,uint256,address,address)",
          "withdrawLiquidity(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockPool",
            "src": "contracts/Exchange.sol:892"
          },
          {
            "kind": "state-variable-assignment",
            "name": "LP_Cake",
            "src": "contracts/Exchange.sol:888"
          },
          {
            "kind": "state-variable-assignment",
            "name": "WBNB",
            "src": "contracts/Exchange.sol:890"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockPool",
              "label": "tokenA",
              "type": "t_address",
              "src": "contracts/Exchange.sol:880"
            },
            {
              "contract": "GrayblockPool",
              "label": "tokenB",
              "type": "t_address",
              "src": "contracts/Exchange.sol:881"
            },
            {
              "contract": "GrayblockPool",
              "label": "totalLiquidity",
              "type": "t_uint256",
              "src": "contracts/Exchange.sol:884"
            },
            {
              "contract": "GrayblockPool",
              "label": "liquidity",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Exchange.sol:885"
            },
            {
              "contract": "GrayblockPool",
              "label": "admins",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Exchange.sol:886"
            },
            {
              "contract": "GrayblockPool",
              "label": "LP_Cake",
              "type": "t_address",
              "src": "contracts/Exchange.sol:888"
            },
            {
              "contract": "GrayblockPool",
              "label": "WBNB",
              "type": "t_address",
              "src": "contracts/Exchange.sol:890"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/Exchange.sol:124",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Exchange.sol:5",
        "version": {
          "withMetadata": "1f78bfca94154530c655b93b925ca0e05cc6ca3dd319a00c20044d59a50d9993",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/Exchange.sol:64",
        "version": {
          "withMetadata": "ac7c18f82364a02cc402f9f05e383292e0d67b46c2fa219576bc1cf234cc4da7",
          "withoutMetadata": "452909145f20ad1f1b11af965b8689c5b73fa17c160b73598934aa56d8719df3",
          "linkedWithoutMetadata": "452909145f20ad1f1b11af965b8689c5b73fa17c160b73598934aa56d8719df3"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/Exchange.sol:72"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Exchange.sol:65"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Exchange.sol:233",
        "version": {
          "withMetadata": "1e04829cb7fc31e20cf905dcb0d4a43c4ea1cb59a49fa7c590373b96d97cbd60",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Exchange.sol:410",
        "version": {
          "withMetadata": "cac7b0945ee639911eec6028ec30e915c8b90b776cd4a7671302bd9207253ae0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts/Exchange.sol:590",
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "getOwner()",
          "name()",
          "decimals()",
          "symbol()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts/Exchange.sol:613"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Exchange.sol:594"
            },
            {
              "contract": "BEP20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Exchange.sol:596"
            },
            {
              "contract": "BEP20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/Exchange.sol:598"
            },
            {
              "contract": "BEP20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/Exchange.sol:600"
            },
            {
              "contract": "BEP20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/Exchange.sol:601"
            },
            {
              "contract": "BEP20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts/Exchange.sol:602"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts/Exchange.sol:36",
        "version": {
          "withMetadata": "9bfcc4b73eabca407ff7ca6aa67b0a6d497e6d30cd07e7a28139051b9c8928e9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockPool": {
        "src": "contracts/Exchange.sol:877",
        "version": {
          "withMetadata": "9f1a6e034ea2e7973faf8e5c276c34a3d7b85583f7b9e68eec6c6f4e7245d73f",
          "withoutMetadata": "842a53c91866ad61d9601049dcafb31bf5b4974ccb01f0076e1f7d7faca725e4",
          "linkedWithoutMetadata": "842a53c91866ad61d9601049dcafb31bf5b4974ccb01f0076e1f7d7faca725e4"
        },
        "inherit": [
          "BEP20",
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Math"
        ],
        "methods": [
          "(address,address)",
          "getAmountsOut(uint256,uint256,uint256)",
          "price(uint256,uint256,uint256)",
          "swap(uint256,address,address)",
          "getRatio(uint256,uint256,uint256,uint256,uint256,uint256)",
          "depositLiquidity(uint256,uint256,uint256,uint256,address,address)",
          "withdrawLiquidity(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockPool",
            "src": "contracts/Exchange.sol:892"
          },
          {
            "kind": "state-variable-assignment",
            "name": "LP_Cake",
            "src": "contracts/Exchange.sol:888"
          },
          {
            "kind": "state-variable-assignment",
            "name": "WBNB",
            "src": "contracts/Exchange.sol:890"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockPool",
              "label": "tokenA",
              "type": "t_address",
              "src": "contracts/Exchange.sol:880"
            },
            {
              "contract": "GrayblockPool",
              "label": "tokenB",
              "type": "t_address",
              "src": "contracts/Exchange.sol:881"
            },
            {
              "contract": "GrayblockPool",
              "label": "totalLiquidity",
              "type": "t_uint256",
              "src": "contracts/Exchange.sol:884"
            },
            {
              "contract": "GrayblockPool",
              "label": "liquidity",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Exchange.sol:885"
            },
            {
              "contract": "GrayblockPool",
              "label": "admins",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Exchange.sol:886"
            },
            {
              "contract": "GrayblockPool",
              "label": "LP_Cake",
              "type": "t_address",
              "src": "contracts/Exchange.sol:888"
            },
            {
              "contract": "GrayblockPool",
              "label": "WBNB",
              "type": "t_address",
              "src": "contracts/Exchange.sol:890"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/Exchange.sol:124",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Exchange.sol:5",
        "version": {
          "withMetadata": "9e8b1c8c4213821321cd39e8afe3a2fb7b2235bfd1818874c12a725ad6bd20b8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/Exchange.sol:64",
        "version": {
          "withMetadata": "60b161495f39a78b8e3cb41004cfdb1c007e459230846943f083cbe6ca73c452",
          "withoutMetadata": "452909145f20ad1f1b11af965b8689c5b73fa17c160b73598934aa56d8719df3",
          "linkedWithoutMetadata": "452909145f20ad1f1b11af965b8689c5b73fa17c160b73598934aa56d8719df3"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/Exchange.sol:72"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Exchange.sol:65"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Exchange.sol:233",
        "version": {
          "withMetadata": "40970de45b6d15b20534a420d108fcfb97dd2f9ed4dc22c3436c567d8e0399a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts/Token.sol:125",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts/Token.sol:167",
        "version": {
          "withMetadata": "f4205bb60f54bdcb28aa012932cda3ecda3d6c10b3bb11417e6423606a7ddf8b",
          "withoutMetadata": "c13972cf16f63fa8ca0170d925a4b581981f7bf6f86f1cbcb2ee97d20e24d203",
          "linkedWithoutMetadata": "c13972cf16f63fa8ca0170d925a4b581981f7bf6f86f1cbcb2ee97d20e24d203"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/Token.sol:186"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Token.sol:168"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Token.sol:170"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/Token.sol:172"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/Token.sol:174"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/Token.sol:175"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "contracts/Token.sol:451",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Token.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "contracts/Token.sol:94",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Token": {
        "src": "contracts/Token.sol:485",
        "version": {
          "withMetadata": "ecaedcc34e848195f689a516561d831f86d90fb4a74d41ee5f7ab5e99075e749",
          "withoutMetadata": "0cca8f5c1eb0dab8f970e0e6d3aca4e20c3d05f43132ab35e16e67e4265dc8ed",
          "linkedWithoutMetadata": "0cca8f5c1eb0dab8f970e0e6d3aca4e20c3d05f43132ab35e16e67e4265dc8ed"
        },
        "inherit": [
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts/Token.sol:487"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Token",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Token.sol:486"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Staking.sol:267",
        "version": {
          "withMetadata": "64b6652e44edf561421d2fc32b954c5aea34720683963da7cf19d6beaa9b0f92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts/Staking.sol:628",
        "version": {
          "withMetadata": "92a5e65964baf3a75b9fa77472be6b12da330c6cbf08dba36678b584c389e32e",
          "withoutMetadata": "3858e89bfa13866fd838ca843b3b7d9a17fb5f5494618de5d6015f15af6405f3",
          "linkedWithoutMetadata": "3858e89bfa13866fd838ca843b3b7d9a17fb5f5494618de5d6015f15af6405f3"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts/Staking.sol:651"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:634"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)342",
              "src": "contracts/Staking.sol:642"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)342",
              "src": "contracts/Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:645"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:647"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)342": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Staking.sol:193",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts/Staking.sol:530",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Staking.sol:9",
        "version": {
          "withMetadata": "5cbd8db2b9984f54c605b5826dd877dfb379f1e46e048d6e6f1868cec572609e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts/Staking.sol:551",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/Staking.sol:555"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Staking.sol:552"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:553"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/Staking.sol:587",
        "version": {
          "withMetadata": "c821ab0bc1a625c18541886c12c9ad51275cd50fc9301dcdf6fddd3e8431e81e",
          "withoutMetadata": "b9bb4d7bdfe108932f9727cc49d18f7fee480e4ea7b61408b410b48a2339204c",
          "linkedWithoutMetadata": "b9bb4d7bdfe108932f9727cc49d18f7fee480e4ea7b61408b410b48a2339204c"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/Staking.sol:591"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:588"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/Staking.sol:589"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/Staking.sol:487",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/Staking.sol:504"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:502"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/Staking.sol:411",
        "version": {
          "withMetadata": "9918704c33e6832117651a4fb3a5d1d4dd5ab55a3209d41256cd6bc142fe030f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Staking.sol:47",
        "version": {
          "withMetadata": "fd8b5aae7d9a2ce8b50acbc8d7441bb40c13b71a0958c1258082032973255716",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "GrayblockPool": {
        "src": "contracts/Exchange.sol:6",
        "version": {
          "withMetadata": "3e0894344cede1ccdb5059007fd424daa37e7acd6b31d0d7bf08195be3915007",
          "withoutMetadata": "89c712e7c788f892619e860c4d4e4ec68648b5429d66c5c9b83790a94186f143",
          "linkedWithoutMetadata": "89c712e7c788f892619e860c4d4e4ec68648b5429d66c5c9b83790a94186f143"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "(address)",
          "init(uint256,uint256)",
          "initTest()",
          "price(uint256,uint256,uint256)",
          "WBNBToToken(uint256)",
          "tokenToWBNB(uint256)",
          "WBNBToTokenTest(uint256)",
          "tokenToWBNBTest(uint256)",
          "getWBNB()",
          "getToken()",
          "getliquiduty(address)",
          "setInvested(bool)",
          "setStrategy(address payable)",
          "getStrategy(address)",
          "gettInvested()",
          "depositLiquidity(uint256)",
          "withdrawLiquidity(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockPool",
            "src": "contracts/Exchange.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "LP_Cake",
            "src": "contracts/Exchange.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "WBNB",
            "src": "contracts/Exchange.sol:16"
          },
          {
            "kind": "state-variable-assignment",
            "name": "WBNBtoken",
            "src": "contracts/Exchange.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockPool",
              "label": "token",
              "type": "t_contract(IBEP20)851",
              "src": "contracts/Exchange.sol:9"
            },
            {
              "contract": "GrayblockPool",
              "label": "totalLiquidity",
              "type": "t_uint256",
              "src": "contracts/Exchange.sol:10"
            },
            {
              "contract": "GrayblockPool",
              "label": "liquidity",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Exchange.sol:11"
            },
            {
              "contract": "GrayblockPool",
              "label": "admins",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Exchange.sol:12"
            },
            {
              "contract": "GrayblockPool",
              "label": "LP_Cake",
              "type": "t_address",
              "src": "contracts/Exchange.sol:14"
            },
            {
              "contract": "GrayblockPool",
              "label": "WBNB",
              "type": "t_address",
              "src": "contracts/Exchange.sol:16"
            },
            {
              "contract": "GrayblockPool",
              "label": "WBNBtoken",
              "type": "t_contract(IBEP20)851",
              "src": "contracts/Exchange.sol:17"
            },
            {
              "contract": "GrayblockPool",
              "label": "invested",
              "type": "t_bool",
              "src": "contracts/Exchange.sol:18"
            },
            {
              "contract": "GrayblockPool",
              "label": "strategy",
              "type": "t_address_payable",
              "src": "contracts/Exchange.sol:19"
            }
          ],
          "types": {
            "t_contract(IBEP20)851": {
              "label": "contract IBEP20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/IBEP20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "contracts/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "ca9fef8b84c0dd75c44f122737b6bde98d19d20227c14ffcf9b30d3372dedd46",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}