{
  "version": "3.2",
  "log": [
    {
      "Address": {
        "src": "contracts/Staking.sol:268",
        "version": {
          "withMetadata": "2c0367a321ce673b1f35e2d20a2c72d0521ee859b7e8dcb6ef18a0bf01d86389",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts/Staking.sol:629",
        "version": {
          "withMetadata": "9795fa6be8b2d319c4aebcf43a9ca6966c5e3ebc606c4da673d01ec9057fe608",
          "withoutMetadata": "cfe8c057f6c2a8e73731486fa808f7d02f16b01b6ac6e65af5666ae2edeee861",
          "linkedWithoutMetadata": "cfe8c057f6c2a8e73731486fa808f7d02f16b01b6ac6e65af5666ae2edeee861"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math",
          "console"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "getDelay()",
          "getMinimumTime()",
          "getFee()",
          "getfeeOwner()",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "setDelay(uint256)",
          "setMinimumTime(uint256)",
          "setFee(uint256)",
          "setfeeOwner(address)",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts/Staking.sol:656"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DELAY",
            "src": "contracts/Staking.sol:650"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MINIMUMTIME",
            "src": "contracts/Staking.sol:651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "FEE",
            "src": "contracts/Staking.sol:652"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeOwner",
            "src": "contracts/Staking.sol:653"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:641"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:644"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:647"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:648"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_startTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:649"
            },
            {
              "contract": "GrayblockStaking",
              "label": "DELAY",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:650"
            },
            {
              "contract": "GrayblockStaking",
              "label": "MINIMUMTIME",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:651"
            },
            {
              "contract": "GrayblockStaking",
              "label": "FEE",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:652"
            },
            {
              "contract": "GrayblockStaking",
              "label": "feeOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:653"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)343": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Staking.sol:194",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts/Staking.sol:531",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Staking.sol:10",
        "version": {
          "withMetadata": "a5e59bd0cfc01ccd86e1a9889f3aca293c7b6d663c6d82bc9e8f1d30b5240676",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts/Staking.sol:552",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/Staking.sol:556"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Staking.sol:553"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:554"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/Staking.sol:588",
        "version": {
          "withMetadata": "3ecb9fa23dc3c829fc629ad1a25c019ddda77e46ce6b6275735afce9b065d58a",
          "withoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5",
          "linkedWithoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/Staking.sol:592"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:589"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/Staking.sol:590"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/Staking.sol:488",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/Staking.sol:505"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:503"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/Staking.sol:412",
        "version": {
          "withMetadata": "f23039cbbd5b4f7bdbcfd997e92a520290b617f73a075fa90e3d0f79de85ad41",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Staking.sol:48",
        "version": {
          "withMetadata": "b6b80d73e8d2876ebfafbbed16cc006525f620eed3d9d3aec2dce5725ef5fbbc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "22ab50c6385aa6d0c318a53d16e43dfb9bf847a5e8844a576dff317fc6f7afeb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Staking.sol:268",
        "version": {
          "withMetadata": "a3c15b27340967434f4bf3f96006f0ca2840c1aa1e9f195d35d227cee84b7464",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts/Staking.sol:629",
        "version": {
          "withMetadata": "91e94a7eae59e7ab66c3b25412aa22f3ee10edfa42e2ed3d9bb7acc6aa5d7752",
          "withoutMetadata": "c7ed6aa2e34ef10cdba0af690b416deca2ada505314e0bc6a8973a712a583eb3",
          "linkedWithoutMetadata": "c7ed6aa2e34ef10cdba0af690b416deca2ada505314e0bc6a8973a712a583eb3"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math",
          "console"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "getDelay()",
          "getMinimumTime()",
          "getFee()",
          "getfeeOwner()",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "setDelay(uint256)",
          "setMinimumTime(uint256)",
          "setFee(uint256)",
          "setfeeOwner(address)",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts/Staking.sol:656"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DELAY",
            "src": "contracts/Staking.sol:650"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MINIMUMTIME",
            "src": "contracts/Staking.sol:651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "FEE",
            "src": "contracts/Staking.sol:652"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeOwner",
            "src": "contracts/Staking.sol:653"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:641"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:644"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:647"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:648"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_startTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:649"
            },
            {
              "contract": "GrayblockStaking",
              "label": "DELAY",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:650"
            },
            {
              "contract": "GrayblockStaking",
              "label": "MINIMUMTIME",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:651"
            },
            {
              "contract": "GrayblockStaking",
              "label": "FEE",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:652"
            },
            {
              "contract": "GrayblockStaking",
              "label": "feeOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:653"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)343": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Staking.sol:194",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts/Staking.sol:531",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Staking.sol:10",
        "version": {
          "withMetadata": "1ff1ca39481b54782650ee517e6e165835d3f8437ef8dcbf8d18196f76954547",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts/Staking.sol:552",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/Staking.sol:556"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Staking.sol:553"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:554"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/Staking.sol:588",
        "version": {
          "withMetadata": "7b842eb3bc6905445c1eb8fca8329385fcb73d12d71bc36576f74ed2d31133dd",
          "withoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5",
          "linkedWithoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/Staking.sol:592"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:589"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/Staking.sol:590"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/Staking.sol:488",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/Staking.sol:505"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:503"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/Staking.sol:412",
        "version": {
          "withMetadata": "8828ea6891da2dde204341dbf1263475a0061e521618437c1b02d5693599182b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Staking.sol:48",
        "version": {
          "withMetadata": "5df8e96e5b5262ed5aab36187357e46c31d830b345303590dca89c5816a9069c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "22ab50c6385aa6d0c318a53d16e43dfb9bf847a5e8844a576dff317fc6f7afeb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Staking.sol:268",
        "version": {
          "withMetadata": "2c0367a321ce673b1f35e2d20a2c72d0521ee859b7e8dcb6ef18a0bf01d86389",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts/Staking.sol:629",
        "version": {
          "withMetadata": "9795fa6be8b2d319c4aebcf43a9ca6966c5e3ebc606c4da673d01ec9057fe608",
          "withoutMetadata": "cfe8c057f6c2a8e73731486fa808f7d02f16b01b6ac6e65af5666ae2edeee861",
          "linkedWithoutMetadata": "cfe8c057f6c2a8e73731486fa808f7d02f16b01b6ac6e65af5666ae2edeee861"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math",
          "console"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "getDelay()",
          "getMinimumTime()",
          "getFee()",
          "getfeeOwner()",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "setDelay(uint256)",
          "setMinimumTime(uint256)",
          "setFee(uint256)",
          "setfeeOwner(address)",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts/Staking.sol:656"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DELAY",
            "src": "contracts/Staking.sol:650"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MINIMUMTIME",
            "src": "contracts/Staking.sol:651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "FEE",
            "src": "contracts/Staking.sol:652"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeOwner",
            "src": "contracts/Staking.sol:653"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:641"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:644"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:647"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:648"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_startTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:649"
            },
            {
              "contract": "GrayblockStaking",
              "label": "DELAY",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:650"
            },
            {
              "contract": "GrayblockStaking",
              "label": "MINIMUMTIME",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:651"
            },
            {
              "contract": "GrayblockStaking",
              "label": "FEE",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:652"
            },
            {
              "contract": "GrayblockStaking",
              "label": "feeOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:653"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)343": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Staking.sol:194",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts/Staking.sol:531",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Staking.sol:10",
        "version": {
          "withMetadata": "a5e59bd0cfc01ccd86e1a9889f3aca293c7b6d663c6d82bc9e8f1d30b5240676",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts/Staking.sol:552",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/Staking.sol:556"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Staking.sol:553"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:554"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/Staking.sol:588",
        "version": {
          "withMetadata": "3ecb9fa23dc3c829fc629ad1a25c019ddda77e46ce6b6275735afce9b065d58a",
          "withoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5",
          "linkedWithoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/Staking.sol:592"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:589"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/Staking.sol:590"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/Staking.sol:488",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/Staking.sol:505"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:503"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/Staking.sol:412",
        "version": {
          "withMetadata": "f23039cbbd5b4f7bdbcfd997e92a520290b617f73a075fa90e3d0f79de85ad41",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Staking.sol:48",
        "version": {
          "withMetadata": "b6b80d73e8d2876ebfafbbed16cc006525f620eed3d9d3aec2dce5725ef5fbbc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "22ab50c6385aa6d0c318a53d16e43dfb9bf847a5e8844a576dff317fc6f7afeb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Staking.sol:268",
        "version": {
          "withMetadata": "bfaf717acf46a39b40256c403e93f1e24f7c288278ca846a73e7aa7b0be4e2b7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts/Staking.sol:629",
        "version": {
          "withMetadata": "800b739b6e35b1abe706c27c66c4e06497feb9b2d02f213d9306b92d93abef9e",
          "withoutMetadata": "67d9692ebae69130756d9f90af8e376f9c87a1e16216c9828d8b51a63f55f49d",
          "linkedWithoutMetadata": "67d9692ebae69130756d9f90af8e376f9c87a1e16216c9828d8b51a63f55f49d"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math",
          "console"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "getDelay()",
          "getMinimumTime()",
          "getFee()",
          "getfeeOwner()",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "setDelay(uint256)",
          "setMinimumTime(uint256)",
          "setFee(uint256)",
          "setfeeOwner(address)",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts/Staking.sol:656"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DELAY",
            "src": "contracts/Staking.sol:650"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MINIMUMTIME",
            "src": "contracts/Staking.sol:651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "FEE",
            "src": "contracts/Staking.sol:652"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeOwner",
            "src": "contracts/Staking.sol:653"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:641"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts/Staking.sol:644"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:647"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:648"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_startTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:649"
            },
            {
              "contract": "GrayblockStaking",
              "label": "DELAY",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:650"
            },
            {
              "contract": "GrayblockStaking",
              "label": "MINIMUMTIME",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:651"
            },
            {
              "contract": "GrayblockStaking",
              "label": "FEE",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:652"
            },
            {
              "contract": "GrayblockStaking",
              "label": "feeOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:653"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)343": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Staking.sol:194",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts/Staking.sol:531",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Staking.sol:10",
        "version": {
          "withMetadata": "acf8bb89bf3c0a1ff9505ecf12f8f4e07424ff86b7b744867bf02df5dd90889a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts/Staking.sol:552",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/Staking.sol:556"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Staking.sol:553"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:554"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/Staking.sol:588",
        "version": {
          "withMetadata": "be3b2a1778415afd8bbd40d69f9030cebd0508f2ff12d55963baef77002639b3",
          "withoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5",
          "linkedWithoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/Staking.sol:592"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:589"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/Staking.sol:590"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/Staking.sol:488",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/Staking.sol:505"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:503"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/Staking.sol:412",
        "version": {
          "withMetadata": "25426c5ddbe4e81957735c3a60897f58ca388fcd9f2883115ceeb6a1c6b3b6ef",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Staking.sol:48",
        "version": {
          "withMetadata": "1207338e501382c7f60165f978b0888ebe7da89be580529f276b1f59bfb807aa",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "22ab50c6385aa6d0c318a53d16e43dfb9bf847a5e8844a576dff317fc6f7afeb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:62",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:68"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)57_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:20",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2179_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2179_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2179_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)1908_storage"
                }
              ]
            },
            "t_struct(Set)1908_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f3773c94be9e3bebdf44415d14cd44f7d25c47278987978439a01d843fb7a378",
          "withoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69",
          "linkedWithoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "fe2cfa4e1bc5987963be38935569cbd22a73bde36181b64b1ef65f1a27f62a18",
          "withoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4",
          "linkedWithoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "b9a102b555263ccacc6374ea1784ba1f8e422dd968f3e4134645feb6abb9ec66",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "549e275f6d5427be9ff66fb6410a636030e947b81184f62b10ff3ddfce2fb878",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDO": {
        "src": "contracts/IDO.sol:12",
        "version": {
          "withMetadata": "e72880c80c038db29469eb0d3a10b98a2d574d44795b7c3c23ff3f7977d05518",
          "withoutMetadata": "1f031c44c3a3322ad9f39c221574ecf2be32aada3e5e5b97434d697ace200490",
          "linkedWithoutMetadata": "1f031c44c3a3322ad9f39c221574ecf2be32aada3e5e5b97434d697ace200490"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "buy(uint256)",
          "returnTokens()",
          "withdrawTokens()",
          "tokensLeft()",
          "saleStatus()",
          "getOwner()",
          "getRatio()",
          "tradedTokens()",
          "projectTokens()",
          "setRatio(uint256)",
          "setSale(bool)",
          "setCap(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IDO",
            "src": "contracts/IDO.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "IDO",
              "label": "_startTimeEpoch",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:13"
            },
            {
              "contract": "IDO",
              "label": "projectToken",
              "type": "t_contract(ERC20)1299",
              "src": "contracts/IDO.sol:14"
            },
            {
              "contract": "IDO",
              "label": "tradeToken",
              "type": "t_contract(ERC20)1299",
              "src": "contracts/IDO.sol:15"
            },
            {
              "contract": "IDO",
              "label": "ratio",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:16"
            },
            {
              "contract": "IDO",
              "label": "cap",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:17"
            },
            {
              "contract": "IDO",
              "label": "sale",
              "type": "t_bool",
              "src": "contracts/IDO.sol:18"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(ERC20)1299": {
              "label": "contract ERC20"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Token": {
        "src": "contracts/Token.sol:9",
        "version": {
          "withMetadata": "7e32d540afbb2ee2195d3c86d8231d05a0f4b3e34f254391957d249c6c5cf5d9",
          "withoutMetadata": "f76f39857897028c0d0f6655879f8b66f21aca2d03c18095b8898ce235de8151",
          "linkedWithoutMetadata": "f76f39857897028c0d0f6655879f8b66f21aca2d03c18095b8898ce235de8151"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts/Token.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Token",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Token.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Staking.sol:267",
        "version": {
          "withMetadata": "fe7a675b2d65e1ae714880e05606ce1bc8a45c4672ad6fb586036d71f5ca29cf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts/Staking.sol:628",
        "version": {
          "withMetadata": "1d6154cbe6c508958d981273c75611ae6a0eaba9a6567c59ee899017bf7711d7",
          "withoutMetadata": "02b059579d2de4ec5ee0b426c9c3e2fe69c2efab3b5c1107c8d52fcad490f086",
          "linkedWithoutMetadata": "02b059579d2de4ec5ee0b426c9c3e2fe69c2efab3b5c1107c8d52fcad490f086"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "getDelay()",
          "getMinimumTime()",
          "getFee()",
          "getfeeOwner()",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "setDelay(uint256)",
          "setMinimumTime(uint256)",
          "setFee(uint256)",
          "setfeeOwner(address)",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts/Staking.sol:655"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DELAY",
            "src": "contracts/Staking.sol:649"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MINIMUMTIME",
            "src": "contracts/Staking.sol:650"
          },
          {
            "kind": "state-variable-assignment",
            "name": "FEE",
            "src": "contracts/Staking.sol:651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeOwner",
            "src": "contracts/Staking.sol:652"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:634"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)342",
              "src": "contracts/Staking.sol:642"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)342",
              "src": "contracts/Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:645"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:647"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_startTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:648"
            },
            {
              "contract": "GrayblockStaking",
              "label": "DELAY",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:649"
            },
            {
              "contract": "GrayblockStaking",
              "label": "MINIMUMTIME",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:650"
            },
            {
              "contract": "GrayblockStaking",
              "label": "FEE",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:651"
            },
            {
              "contract": "GrayblockStaking",
              "label": "feeOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:652"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)342": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Staking.sol:193",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts/Staking.sol:530",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Staking.sol:9",
        "version": {
          "withMetadata": "9542fc08b40f525a762c3931cfe7be44a9c1806085b8b56eb4a21df56deb6910",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts/Staking.sol:551",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/Staking.sol:555"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Staking.sol:552"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:553"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/Staking.sol:587",
        "version": {
          "withMetadata": "00f6e235389d084f38dbb15e3ccaa5bf19dfe597193b0bc09f69ad797e42a969",
          "withoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5",
          "linkedWithoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/Staking.sol:591"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:588"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/Staking.sol:589"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/Staking.sol:487",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/Staking.sol:504"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:502"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/Staking.sol:411",
        "version": {
          "withMetadata": "d677361807922c1ed846127b64a6c0d1109f157a9d6d520136bb47a11fd86ed5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Staking.sol:47",
        "version": {
          "withMetadata": "a3bb08060d6e95c576dda8edb1da7393da864783e9decbd7b06a399c1247b09d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Staking.sol:267",
        "version": {
          "withMetadata": "ce68f38c0434cc868ebcae4cd3f9518e2bd5dc391fa2ee10cc5c07b3e1f113e4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts/Staking.sol:628",
        "version": {
          "withMetadata": "545f1c6475007a1da954d8ae776146e8ebf2cdd500b4f8ed554ef5dfc80fa9ee",
          "withoutMetadata": "03fb049631945b78e34a8fe652505f7fc5007a714afbc1f9aa1276bda59caef8",
          "linkedWithoutMetadata": "03fb049631945b78e34a8fe652505f7fc5007a714afbc1f9aa1276bda59caef8"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "getDelay()",
          "getMinimumTime()",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "setDelay(uint256)",
          "setMinimumTime(uint256)",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts/Staking.sol:653"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DELAY",
            "src": "contracts/Staking.sol:649"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MINIMUMTIME",
            "src": "contracts/Staking.sol:650"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:634"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)342",
              "src": "contracts/Staking.sol:642"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)342",
              "src": "contracts/Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:645"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:647"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_startTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:648"
            },
            {
              "contract": "GrayblockStaking",
              "label": "DELAY",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:649"
            },
            {
              "contract": "GrayblockStaking",
              "label": "MINIMUMTIME",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:650"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)342": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Staking.sol:193",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts/Staking.sol:530",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Staking.sol:9",
        "version": {
          "withMetadata": "0013f5e0051394cdbf6f1157d97063725607ebca4e68c11fb68edb18b50c7164",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts/Staking.sol:551",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/Staking.sol:555"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Staking.sol:552"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:553"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/Staking.sol:587",
        "version": {
          "withMetadata": "568e081653750d7e66048909e5594774a3b85d861e2507cbd6338315b1cd7c45",
          "withoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5",
          "linkedWithoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/Staking.sol:591"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:588"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/Staking.sol:589"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/Staking.sol:487",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/Staking.sol:504"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:502"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/Staking.sol:411",
        "version": {
          "withMetadata": "9474da5531d05e279b8740d2c787c09659a09d90be8619da5bba96d814811b92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Staking.sol:47",
        "version": {
          "withMetadata": "a5db92df35ab3ace509d053ff5d65a9a69a6a11ce059ff07ec3597cf37396fc0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:62",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:68"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)57_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:20",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2179_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2179_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2179_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)1908_storage"
                }
              ]
            },
            "t_struct(Set)1908_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f3773c94be9e3bebdf44415d14cd44f7d25c47278987978439a01d843fb7a378",
          "withoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69",
          "linkedWithoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "fe2cfa4e1bc5987963be38935569cbd22a73bde36181b64b1ef65f1a27f62a18",
          "withoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4",
          "linkedWithoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "b9a102b555263ccacc6374ea1784ba1f8e422dd968f3e4134645feb6abb9ec66",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "549e275f6d5427be9ff66fb6410a636030e947b81184f62b10ff3ddfce2fb878",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDO": {
        "src": "contracts/IDO.sol:12",
        "version": {
          "withMetadata": "e72880c80c038db29469eb0d3a10b98a2d574d44795b7c3c23ff3f7977d05518",
          "withoutMetadata": "1f031c44c3a3322ad9f39c221574ecf2be32aada3e5e5b97434d697ace200490",
          "linkedWithoutMetadata": "1f031c44c3a3322ad9f39c221574ecf2be32aada3e5e5b97434d697ace200490"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "buy(uint256)",
          "returnTokens()",
          "withdrawTokens()",
          "tokensLeft()",
          "saleStatus()",
          "getOwner()",
          "getRatio()",
          "tradedTokens()",
          "projectTokens()",
          "setRatio(uint256)",
          "setSale(bool)",
          "setCap(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IDO",
            "src": "contracts/IDO.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "IDO",
              "label": "_startTimeEpoch",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:13"
            },
            {
              "contract": "IDO",
              "label": "projectToken",
              "type": "t_contract(ERC20)1299",
              "src": "contracts/IDO.sol:14"
            },
            {
              "contract": "IDO",
              "label": "tradeToken",
              "type": "t_contract(ERC20)1299",
              "src": "contracts/IDO.sol:15"
            },
            {
              "contract": "IDO",
              "label": "ratio",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:16"
            },
            {
              "contract": "IDO",
              "label": "cap",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:17"
            },
            {
              "contract": "IDO",
              "label": "sale",
              "type": "t_bool",
              "src": "contracts/IDO.sol:18"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(ERC20)1299": {
              "label": "contract ERC20"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Token": {
        "src": "contracts/Token.sol:9",
        "version": {
          "withMetadata": "f9f1cd199e53bc1b62f715aa1349ef2f9dcdc437c16e8d5bde087be58d389e6d",
          "withoutMetadata": "2f2f407bf7fb806cbeaef48c0a8ede3e0600b2ed88925bf5e29928e4c4b50ef9",
          "linkedWithoutMetadata": "2f2f407bf7fb806cbeaef48c0a8ede3e0600b2ed88925bf5e29928e4c4b50ef9"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts/Token.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Token",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Token.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f3773c94be9e3bebdf44415d14cd44f7d25c47278987978439a01d843fb7a378",
          "withoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69",
          "linkedWithoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDO": {
        "src": "contracts/IDO.sol:12",
        "version": {
          "withMetadata": "d18522d6db00799e19d9f961332bd9bd08602d7da41e193cd74dc2d5837432ee",
          "withoutMetadata": "1b0b225c6ba8769e616a81fcafd2f47deeefd2ed625a2cf0fb6548a8235fb57d",
          "linkedWithoutMetadata": "1b0b225c6ba8769e616a81fcafd2f47deeefd2ed625a2cf0fb6548a8235fb57d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "buy(uint256)",
          "returnTokens()",
          "tokensLeft()",
          "saleStatus()",
          "getOwner()",
          "setRatio(uint256)",
          "setSale(bool)",
          "setCap(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IDO",
            "src": "contracts/IDO.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "IDO",
              "label": "_startTimeEpoch",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:13"
            },
            {
              "contract": "IDO",
              "label": "projectToken",
              "type": "t_contract(ERC20)649",
              "src": "contracts/IDO.sol:14"
            },
            {
              "contract": "IDO",
              "label": "tradeToken",
              "type": "t_contract(ERC20)649",
              "src": "contracts/IDO.sol:15"
            },
            {
              "contract": "IDO",
              "label": "ratio",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:16"
            },
            {
              "contract": "IDO",
              "label": "cap",
              "type": "t_uint256",
              "src": "contracts/IDO.sol:17"
            },
            {
              "contract": "IDO",
              "label": "sale",
              "type": "t_bool",
              "src": "contracts/IDO.sol:18"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(ERC20)649": {
              "label": "contract ERC20"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IERC20": {
        "src": "contracts/periphery/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeCallee": {
        "src": "contracts/core/interfaces/IPancakeCallee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "pancakeCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeERC20": {
        "src": "contracts/core/interfaces/IPancakeERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts/periphery/interfaces/IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts/periphery/interfaces/IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/periphery/interfaces/IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/periphery/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeOracleLibrary": {
        "src": "contracts/periphery/libraries/PancakeOracleLibrary.sol:6",
        "version": {
          "withMetadata": "22f7010a42b6f845b428ba4f388ae4be7fc260707aa06baffd93c2ecccc77af8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeMigrator": {
        "src": "contracts/periphery/PancakeMigrator.sol:61",
        "version": {
          "withMetadata": "05f02405c1963c9993aa34c3aa7b46ad05fb544db2dc8fcf74dff897ab95b5fe",
          "withoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551",
          "linkedWithoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551"
        },
        "inherit": [
          "IPancakeMigrator"
        ],
        "libraries": [
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeMigrator",
            "src": "contracts/periphery/PancakeMigrator.sol:65"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factoryV1",
            "src": "contracts/periphery/PancakeMigrator.sol:62"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/periphery/PancakeMigrator.sol:63"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/periphery/PancakeRouter01.sol:15",
        "version": {
          "withMetadata": "824e4af62e834d9a7cdf3b2e5b85bedef1e938738b4c24d1b34c32f396bbfa63",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter": {
        "src": "contracts/periphery/PancakeRouter.sol:63",
        "version": {
          "withMetadata": "b5ee037a664bb52e4edd2855c09f9d6159a82c8b936a8e5309de83eaf972210f",
          "withoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f",
          "linkedWithoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f"
        },
        "inherit": [
          "IPancakeRouter02",
          "IPancakeRouter01"
        ],
        "libraries": [
          "SafeMath",
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter",
            "src": "contracts/periphery/PancakeRouter.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter.sol:66"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter01": {
        "src": "contracts/periphery/PancakeRouter01.sol:62",
        "version": {
          "withMetadata": "403d8c7438633259ea0a6ded6665c9cdd76a73830f87bf6fb4dd1912fa11d524",
          "withoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a",
          "linkedWithoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a"
        },
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter01",
            "src": "contracts/periphery/PancakeRouter01.sol:71"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter01.sol:63"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter01.sol:64"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/periphery/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts/periphery/interfaces/IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts/periphery/interfaces/IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/periphery/interfaces/IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/periphery/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeLibrary": {
        "src": "contracts/periphery/libraries/PancakeLibrary.sol:7",
        "version": {
          "withMetadata": "0138e454bd5cb9c2c709c22efa6c8e7b353d913457c165076035dd3566acd9d5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/periphery/libraries/SafeMath.sol:5",
        "version": {
          "withMetadata": "87de537ecc9c1380eeb99537c917a2f30bbc730385d62acaa3ebeee80abf9703",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeMigrator": {
        "src": "contracts/periphery/PancakeMigrator.sol:61",
        "version": {
          "withMetadata": "05f02405c1963c9993aa34c3aa7b46ad05fb544db2dc8fcf74dff897ab95b5fe",
          "withoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551",
          "linkedWithoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551"
        },
        "inherit": [
          "IPancakeMigrator"
        ],
        "libraries": [
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeMigrator",
            "src": "contracts/periphery/PancakeMigrator.sol:65"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factoryV1",
            "src": "contracts/periphery/PancakeMigrator.sol:62"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/periphery/PancakeMigrator.sol:63"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/periphery/PancakeRouter01.sol:15",
        "version": {
          "withMetadata": "824e4af62e834d9a7cdf3b2e5b85bedef1e938738b4c24d1b34c32f396bbfa63",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter": {
        "src": "contracts/periphery/PancakeRouter.sol:63",
        "version": {
          "withMetadata": "b5ee037a664bb52e4edd2855c09f9d6159a82c8b936a8e5309de83eaf972210f",
          "withoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f",
          "linkedWithoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f"
        },
        "inherit": [
          "IPancakeRouter02",
          "IPancakeRouter01"
        ],
        "libraries": [
          "SafeMath",
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter",
            "src": "contracts/periphery/PancakeRouter.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter.sol:66"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter01": {
        "src": "contracts/periphery/PancakeRouter01.sol:62",
        "version": {
          "withMetadata": "403d8c7438633259ea0a6ded6665c9cdd76a73830f87bf6fb4dd1912fa11d524",
          "withoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a",
          "linkedWithoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a"
        },
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter01",
            "src": "contracts/periphery/PancakeRouter01.sol:71"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter01.sol:63"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter01.sol:64"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/periphery/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts/periphery/interfaces/IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts/periphery/interfaces/IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/periphery/interfaces/IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/periphery/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeLibrary": {
        "src": "contracts/periphery/libraries/PancakeLibrary.sol:7",
        "version": {
          "withMetadata": "0138e454bd5cb9c2c709c22efa6c8e7b353d913457c165076035dd3566acd9d5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/periphery/libraries/SafeMath.sol:5",
        "version": {
          "withMetadata": "87de537ecc9c1380eeb99537c917a2f30bbc730385d62acaa3ebeee80abf9703",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeMigrator": {
        "src": "contracts/periphery/PancakeMigrator.sol:61",
        "version": {
          "withMetadata": "05f02405c1963c9993aa34c3aa7b46ad05fb544db2dc8fcf74dff897ab95b5fe",
          "withoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551",
          "linkedWithoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551"
        },
        "inherit": [
          "IPancakeMigrator"
        ],
        "libraries": [
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeMigrator",
            "src": "contracts/periphery/PancakeMigrator.sol:65"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factoryV1",
            "src": "contracts/periphery/PancakeMigrator.sol:62"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/periphery/PancakeMigrator.sol:63"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/periphery/PancakeRouter01.sol:15",
        "version": {
          "withMetadata": "824e4af62e834d9a7cdf3b2e5b85bedef1e938738b4c24d1b34c32f396bbfa63",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter": {
        "src": "contracts/periphery/PancakeRouter.sol:63",
        "version": {
          "withMetadata": "b5ee037a664bb52e4edd2855c09f9d6159a82c8b936a8e5309de83eaf972210f",
          "withoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f",
          "linkedWithoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f"
        },
        "inherit": [
          "IPancakeRouter02",
          "IPancakeRouter01"
        ],
        "libraries": [
          "SafeMath",
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter",
            "src": "contracts/periphery/PancakeRouter.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter.sol:66"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter01": {
        "src": "contracts/periphery/PancakeRouter01.sol:62",
        "version": {
          "withMetadata": "403d8c7438633259ea0a6ded6665c9cdd76a73830f87bf6fb4dd1912fa11d524",
          "withoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a",
          "linkedWithoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a"
        },
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter01",
            "src": "contracts/periphery/PancakeRouter01.sol:71"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter01.sol:63"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter01.sol:64"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/periphery/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts/periphery/interfaces/IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts/periphery/interfaces/IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/periphery/interfaces/IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/periphery/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeLibrary": {
        "src": "contracts/periphery/libraries/PancakeLibrary.sol:7",
        "version": {
          "withMetadata": "0138e454bd5cb9c2c709c22efa6c8e7b353d913457c165076035dd3566acd9d5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/periphery/libraries/SafeMath.sol:5",
        "version": {
          "withMetadata": "87de537ecc9c1380eeb99537c917a2f30bbc730385d62acaa3ebeee80abf9703",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeMigrator": {
        "src": "contracts/periphery/PancakeMigrator.sol:61",
        "version": {
          "withMetadata": "05f02405c1963c9993aa34c3aa7b46ad05fb544db2dc8fcf74dff897ab95b5fe",
          "withoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551",
          "linkedWithoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551"
        },
        "inherit": [
          "IPancakeMigrator"
        ],
        "libraries": [
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeMigrator",
            "src": "contracts/periphery/PancakeMigrator.sol:65"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factoryV1",
            "src": "contracts/periphery/PancakeMigrator.sol:62"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/periphery/PancakeMigrator.sol:63"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/periphery/PancakeRouter01.sol:15",
        "version": {
          "withMetadata": "824e4af62e834d9a7cdf3b2e5b85bedef1e938738b4c24d1b34c32f396bbfa63",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter": {
        "src": "contracts/periphery/PancakeRouter.sol:63",
        "version": {
          "withMetadata": "b5ee037a664bb52e4edd2855c09f9d6159a82c8b936a8e5309de83eaf972210f",
          "withoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f",
          "linkedWithoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f"
        },
        "inherit": [
          "IPancakeRouter02",
          "IPancakeRouter01"
        ],
        "libraries": [
          "SafeMath",
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter",
            "src": "contracts/periphery/PancakeRouter.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter.sol:66"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter01": {
        "src": "contracts/periphery/PancakeRouter01.sol:62",
        "version": {
          "withMetadata": "403d8c7438633259ea0a6ded6665c9cdd76a73830f87bf6fb4dd1912fa11d524",
          "withoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a",
          "linkedWithoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a"
        },
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter01",
            "src": "contracts/periphery/PancakeRouter01.sol:71"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter01.sol:63"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter01.sol:64"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/periphery/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts/periphery/interfaces/IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts/periphery/interfaces/IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/periphery/interfaces/IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/periphery/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeLibrary": {
        "src": "contracts/periphery/libraries/PancakeLibrary.sol:7",
        "version": {
          "withMetadata": "0138e454bd5cb9c2c709c22efa6c8e7b353d913457c165076035dd3566acd9d5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/periphery/libraries/SafeMath.sol:5",
        "version": {
          "withMetadata": "87de537ecc9c1380eeb99537c917a2f30bbc730385d62acaa3ebeee80abf9703",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeMigrator": {
        "src": "contracts/periphery/PancakeMigrator.sol:61",
        "version": {
          "withMetadata": "05f02405c1963c9993aa34c3aa7b46ad05fb544db2dc8fcf74dff897ab95b5fe",
          "withoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551",
          "linkedWithoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551"
        },
        "inherit": [
          "IPancakeMigrator"
        ],
        "libraries": [
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeMigrator",
            "src": "contracts/periphery/PancakeMigrator.sol:65"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factoryV1",
            "src": "contracts/periphery/PancakeMigrator.sol:62"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/periphery/PancakeMigrator.sol:63"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/periphery/PancakeRouter01.sol:15",
        "version": {
          "withMetadata": "824e4af62e834d9a7cdf3b2e5b85bedef1e938738b4c24d1b34c32f396bbfa63",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter": {
        "src": "contracts/periphery/PancakeRouter.sol:63",
        "version": {
          "withMetadata": "b5ee037a664bb52e4edd2855c09f9d6159a82c8b936a8e5309de83eaf972210f",
          "withoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f",
          "linkedWithoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f"
        },
        "inherit": [
          "IPancakeRouter02",
          "IPancakeRouter01"
        ],
        "libraries": [
          "SafeMath",
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter",
            "src": "contracts/periphery/PancakeRouter.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter.sol:66"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter01": {
        "src": "contracts/periphery/PancakeRouter01.sol:62",
        "version": {
          "withMetadata": "403d8c7438633259ea0a6ded6665c9cdd76a73830f87bf6fb4dd1912fa11d524",
          "withoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a",
          "linkedWithoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a"
        },
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter01",
            "src": "contracts/periphery/PancakeRouter01.sol:71"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter01.sol:63"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter01.sol:64"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/periphery/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts/periphery/interfaces/IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts/periphery/interfaces/IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/periphery/interfaces/IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/periphery/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeLibrary": {
        "src": "contracts/periphery/libraries/PancakeLibrary.sol:7",
        "version": {
          "withMetadata": "0138e454bd5cb9c2c709c22efa6c8e7b353d913457c165076035dd3566acd9d5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/periphery/libraries/SafeMath.sol:5",
        "version": {
          "withMetadata": "87de537ecc9c1380eeb99537c917a2f30bbc730385d62acaa3ebeee80abf9703",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "TransferHelper": {
        "src": "@uniswap/lib/contracts/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "162a31673b7417702e303f3d05fd3ca94f51d547d796d3048d1690c02c14a47c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeMigrator": {
        "src": "contracts/periphery/PancakeMigrator.sol:11",
        "version": {
          "withMetadata": "da24e97666a1e3574b7e258a6e762df78cdb37d5852bca681b41b346c3822433",
          "withoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551",
          "linkedWithoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551"
        },
        "inherit": [
          "IPancakeMigrator"
        ],
        "libraries": [
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeMigrator",
            "src": "contracts/periphery/PancakeMigrator.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factoryV1",
            "src": "contracts/periphery/PancakeMigrator.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/periphery/PancakeMigrator.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter": {
        "src": "contracts/periphery/PancakeRouter.sol:12",
        "version": {
          "withMetadata": "2e7dd2a559f62501b728e4b3e4a1e793f6a7c223dab1e468a191f022f3db00de",
          "withoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f",
          "linkedWithoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f"
        },
        "inherit": [
          "IPancakeRouter02",
          "IPancakeRouter01"
        ],
        "libraries": [
          "SafeMath",
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter",
            "src": "contracts/periphery/PancakeRouter.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter01": {
        "src": "contracts/periphery/PancakeRouter01.sol:11",
        "version": {
          "withMetadata": "095617474ddbd09cc05fff8e6d8a7f9472caf7529b438934a2f724fdb9c54470",
          "withoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a",
          "linkedWithoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a"
        },
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter01",
            "src": "contracts/periphery/PancakeRouter01.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter01.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter01.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/periphery/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts/periphery/interfaces/IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts/periphery/interfaces/IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/periphery/interfaces/IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/periphery/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeLibrary": {
        "src": "contracts/periphery/libraries/PancakeLibrary.sol:7",
        "version": {
          "withMetadata": "0138e454bd5cb9c2c709c22efa6c8e7b353d913457c165076035dd3566acd9d5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/periphery/libraries/SafeMath.sol:5",
        "version": {
          "withMetadata": "87de537ecc9c1380eeb99537c917a2f30bbc730385d62acaa3ebeee80abf9703",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts/Token.sol:125",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts/Token.sol:167",
        "version": {
          "withMetadata": "de66764bc729d7f94b416cd80fda19b38065080f6ba21c87d6ce8d45511f7c80",
          "withoutMetadata": "e17ae26f099a89a214329b35547d9cf94ee4bfbc8fcb4ac8863c9a4736cc3336",
          "linkedWithoutMetadata": "e17ae26f099a89a214329b35547d9cf94ee4bfbc8fcb4ac8863c9a4736cc3336"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/Token.sol:186"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Token.sol:168"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Token.sol:170"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/Token.sol:172"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/Token.sol:174"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/Token.sol:175"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "contracts/Token.sol:451",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Token.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "contracts/Token.sol:94",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Token": {
        "src": "contracts/Token.sol:485",
        "version": {
          "withMetadata": "94089373b8ab1715b2f737e5af479cbc3554545745ac6099b5a96896ca5979fc",
          "withoutMetadata": "e88421f915e043ec380e23218cb66211243cd0b69953fb7c935496ee2140481f",
          "linkedWithoutMetadata": "e88421f915e043ec380e23218cb66211243cd0b69953fb7c935496ee2140481f"
        },
        "inherit": [
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts/Token.sol:487"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Token",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Token.sol:486"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Staking.sol:267",
        "version": {
          "withMetadata": "99af76a806732e6019e7b8df5d0a4d86c7267178a048415b5f0b3205e61ac92e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts/Staking.sol:628",
        "version": {
          "withMetadata": "0b9abfedaa854f2c1daf3de5422c29485d77d2b3f5b6ec8ff1cd17be57e4d00c",
          "withoutMetadata": "4d117f3165d8c360e1b1e0a22859d36e184b07e48715e7df26348361c6e3c1df",
          "linkedWithoutMetadata": "4d117f3165d8c360e1b1e0a22859d36e184b07e48715e7df26348361c6e3c1df"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts/Staking.sol:651"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:634"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)342",
              "src": "contracts/Staking.sol:642"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)342",
              "src": "contracts/Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:645"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:647"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)342": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Staking.sol:193",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts/Staking.sol:530",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Staking.sol:9",
        "version": {
          "withMetadata": "c3aa661b96c777d96952b3c06c86ee87e8059b471d54e9a386544fbf19119440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts/Staking.sol:551",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/Staking.sol:555"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Staking.sol:552"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:553"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/Staking.sol:587",
        "version": {
          "withMetadata": "976d6ab43564b0f2b74688ddb7fa96701a3e8f2690649bdbe9a199347663dedb",
          "withoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5",
          "linkedWithoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/Staking.sol:591"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:588"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/Staking.sol:589"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/Staking.sol:487",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/Staking.sol:504"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:502"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/Staking.sol:411",
        "version": {
          "withMetadata": "fce337f8e2d16a0cf0f9e7d2afb7c5328d33790794f88d3c3f7cdfc4efaafaf3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Staking.sol:47",
        "version": {
          "withMetadata": "254fdabde573119af94c0ac6caf561c03196c03e5937377c17550fdc1a5bbde5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMathUpgradeable": {
        "src": "contracts/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "4815418e5ed355343d79fc76033c071af9d81ece20526f5a5502b6aeb0cfdd50",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IBEP20": {
        "src": "contracts/IBEP20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Exchange.sol:410",
        "version": {
          "withMetadata": "5387de9c3be04944ea46c35fecceb795614a99d2bf047416da2eecc0f726a476",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts/Exchange.sol:590",
        "version": {
          "withMetadata": "4c822672ef11c960525f7a67b44754c6eba3b77fafe38b4fa955166e42fd7cbd",
          "withoutMetadata": "2cef57f17794d9cace0c29b926bb2e40a1b73c84c4ca6c6db180b5f87ce88cb0",
          "linkedWithoutMetadata": "2cef57f17794d9cace0c29b926bb2e40a1b73c84c4ca6c6db180b5f87ce88cb0"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(string,string)",
          "getOwner()",
          "name()",
          "decimals()",
          "symbol()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts/Exchange.sol:613"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Exchange.sol:594"
            },
            {
              "contract": "BEP20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Exchange.sol:596"
            },
            {
              "contract": "BEP20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/Exchange.sol:598"
            },
            {
              "contract": "BEP20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/Exchange.sol:600"
            },
            {
              "contract": "BEP20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/Exchange.sol:601"
            },
            {
              "contract": "BEP20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts/Exchange.sol:602"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts/Exchange.sol:36",
        "version": {
          "withMetadata": "629f13a79dddb096d4a589d717c8516bfaf129854b497bca397da880e2043e43",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockPool": {
        "src": "contracts/Exchange.sol:877",
        "version": {
          "withMetadata": "8e4aa57c0754a199109710b8981377825ece7d10fafc147d5a58ea6cd973b4c2",
          "withoutMetadata": "42bbdaaaaade9b25a0b9d8323f6cc82b3a24de1fbf8b3eb4a2df2c063e69fa0d",
          "linkedWithoutMetadata": "42bbdaaaaade9b25a0b9d8323f6cc82b3a24de1fbf8b3eb4a2df2c063e69fa0d"
        },
        "inherit": [
          "BEP20",
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Math"
        ],
        "methods": [
          "(address,address)",
          "getAmountsOut(uint256,address,address)",
          "price(uint256,uint256,uint256)",
          "swap(uint256,address,address)",
          "getRatio(uint256,uint256,uint256,uint256,uint256,uint256)",
          "depositLiquidity(uint256,uint256,uint256,uint256,address,address)",
          "withdrawLiquidity(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockPool",
            "src": "contracts/Exchange.sol:892"
          },
          {
            "kind": "state-variable-assignment",
            "name": "LP_Cake",
            "src": "contracts/Exchange.sol:888"
          },
          {
            "kind": "state-variable-assignment",
            "name": "WBNB",
            "src": "contracts/Exchange.sol:890"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockPool",
              "label": "tokenA",
              "type": "t_address",
              "src": "contracts/Exchange.sol:880"
            },
            {
              "contract": "GrayblockPool",
              "label": "tokenB",
              "type": "t_address",
              "src": "contracts/Exchange.sol:881"
            },
            {
              "contract": "GrayblockPool",
              "label": "totalLiquidity",
              "type": "t_uint256",
              "src": "contracts/Exchange.sol:884"
            },
            {
              "contract": "GrayblockPool",
              "label": "liquidity",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Exchange.sol:885"
            },
            {
              "contract": "GrayblockPool",
              "label": "admins",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Exchange.sol:886"
            },
            {
              "contract": "GrayblockPool",
              "label": "LP_Cake",
              "type": "t_address",
              "src": "contracts/Exchange.sol:888"
            },
            {
              "contract": "GrayblockPool",
              "label": "WBNB",
              "type": "t_address",
              "src": "contracts/Exchange.sol:890"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/Exchange.sol:124",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Exchange.sol:5",
        "version": {
          "withMetadata": "36637acbffc38de601a576759066174d79b00ab0b2fa4ee5136d7f85af0fb98f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/Exchange.sol:64",
        "version": {
          "withMetadata": "cdb4a9f2871d1b47df9e605da5dd2b3e6e60636cc29f4e6806bc9332da5e57d2",
          "withoutMetadata": "d867b5c37838a05fb1504b6ef2f73f383a62fe2d10dabe19c719be83e63d1f08",
          "linkedWithoutMetadata": "d867b5c37838a05fb1504b6ef2f73f383a62fe2d10dabe19c719be83e63d1f08"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/Exchange.sol:72"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Exchange.sol:65"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Exchange.sol:233",
        "version": {
          "withMetadata": "878375bf297ce4782923f897b373c1cfca4045006964656608bec15b2453c96f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FixedPoint": {
        "src": "@uniswap/lib/contracts/libraries/FixedPoint.sol:4",
        "version": {
          "withMetadata": "c206a05b999ccba140d3c018b894fc2942cc037a1fd78d1eac3990b0a12b09d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap/lib/contracts/libraries/TransferHelper.sol:4",
        "version": {
          "withMetadata": "354d06207fa1798c480c33c7c895f06ead50976307ea54c7412f54898a8ef073",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/periphery/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeCallee": {
        "src": "contracts/core/interfaces/IPancakeCallee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "pancakeCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeERC20": {
        "src": "contracts/core/interfaces/IPancakeERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts/periphery/interfaces/IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts/periphery/interfaces/IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/periphery/interfaces/IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/periphery/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeOracleLibrary": {
        "src": "contracts/periphery/libraries/PancakeOracleLibrary.sol:7",
        "version": {
          "withMetadata": "c30353bc554d46147f6ccb73f7c0225f5420eae0e8a6c0055439c9869a94a886",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPoint"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Migrations": {
        "src": "contracts/periphery/Migrations.sol:4",
        "version": {
          "withMetadata": "4747b061cca94b3b7875d9abd9f5609ce8d5fb218f5cc17d15c893d18408b099",
          "withoutMetadata": "d0a17d0bd77c8e9f0fb9f05e7ba40459c124176ccb7036a42e0c15c877b2ea5e",
          "linkedWithoutMetadata": "d0a17d0bd77c8e9f0fb9f05e7ba40459c124176ccb7036a42e0c15c877b2ea5e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCompleted(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Migrations",
            "src": "contracts/periphery/Migrations.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Migrations",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/periphery/Migrations.sol:5"
            },
            {
              "contract": "Migrations",
              "label": "last_completed_migration",
              "type": "t_uint256",
              "src": "contracts/periphery/Migrations.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Migrations": {
        "src": "contracts/core/Migration.sol:4",
        "version": {
          "withMetadata": "08750e2e49efc384fed0873fc6fd6ae72f76e2053d90f5849451e900e7ee54d0",
          "withoutMetadata": "d0a17d0bd77c8e9f0fb9f05e7ba40459c124176ccb7036a42e0c15c877b2ea5e",
          "linkedWithoutMetadata": "d0a17d0bd77c8e9f0fb9f05e7ba40459c124176ccb7036a42e0c15c877b2ea5e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCompleted(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Migrations",
            "src": "contracts/core/Migration.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Migrations",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/core/Migration.sol:5"
            },
            {
              "contract": "Migrations",
              "label": "last_completed_migration",
              "type": "t_uint256",
              "src": "contracts/core/Migration.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "TransferHelper": {
        "src": "@uniswap/lib/contracts/libraries/TransferHelper.sol:4",
        "version": {
          "withMetadata": "c6cdce21061412598e7e7301cc20d37ad3d9d03a9906aeeed69968a2eff7c5c1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeMigrator": {
        "src": "contracts/periphery/PancakeMigrator.sol:11",
        "version": {
          "withMetadata": "d6b371dea2485ce8d2afe2384f67edbef21ee3cc706d77bc53e6efa48763d35c",
          "withoutMetadata": "79a47d3901795a5584258eff268aeff88799328cc22daef4a6fc12ca629fe3f6",
          "linkedWithoutMetadata": "79a47d3901795a5584258eff268aeff88799328cc22daef4a6fc12ca629fe3f6"
        },
        "inherit": [
          "IPancakeMigrator"
        ],
        "libraries": [
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeMigrator",
            "src": "contracts/periphery/PancakeMigrator.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factoryV1",
            "src": "contracts/periphery/PancakeMigrator.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/periphery/PancakeMigrator.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter": {
        "src": "contracts/periphery/PancakeRouter.sol:12",
        "version": {
          "withMetadata": "bb78831547d7300d58ab02a0a1b1148d6fff1c33be1cfe7322fe3ac325f4d8ca",
          "withoutMetadata": "facaf04a82a72adbb105949df0f12f9124a40923c246b2e4ca4f32021e49cf78",
          "linkedWithoutMetadata": "facaf04a82a72adbb105949df0f12f9124a40923c246b2e4ca4f32021e49cf78"
        },
        "inherit": [
          "IPancakeRouter02",
          "IPancakeRouter01"
        ],
        "libraries": [
          "SafeMath",
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter",
            "src": "contracts/periphery/PancakeRouter.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter01": {
        "src": "contracts/periphery/PancakeRouter01.sol:11",
        "version": {
          "withMetadata": "1e43413baef7296383b9d913ff1445432af00030cd66963a206798818fbdd724",
          "withoutMetadata": "e3307e37727fe6f0f4693f1ebb846bb986de9b9c7ea5de5b5532a6ebce8278e7",
          "linkedWithoutMetadata": "e3307e37727fe6f0f4693f1ebb846bb986de9b9c7ea5de5b5532a6ebce8278e7"
        },
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter01",
            "src": "contracts/periphery/PancakeRouter01.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter01.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter01.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/periphery/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts/periphery/interfaces/IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts/periphery/interfaces/IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/periphery/interfaces/IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/periphery/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeLibrary": {
        "src": "contracts/periphery/libraries/PancakeLibrary.sol:7",
        "version": {
          "withMetadata": "0138e454bd5cb9c2c709c22efa6c8e7b353d913457c165076035dd3566acd9d5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/periphery/libraries/SafeMath.sol:5",
        "version": {
          "withMetadata": "87de537ecc9c1380eeb99537c917a2f30bbc730385d62acaa3ebeee80abf9703",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "PancakeERC20": {
        "src": "contracts/core/PancakeERC20.sol:6",
        "version": {
          "withMetadata": "f30d7cc99978953ab1e9b5603e5555c2fcb3f71014a5943116781f7cfa37d0d8",
          "withoutMetadata": "f30d7cc99978953ab1e9b5603e5555c2fcb3f71014a5943116781f7cfa37d0d8",
          "linkedWithoutMetadata": "f30d7cc99978953ab1e9b5603e5555c2fcb3f71014a5943116781f7cfa37d0d8"
        },
        "inherit": [
          "IPancakeERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeERC20",
            "src": "contracts/core/PancakeERC20.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/core/PancakeERC20.sol:12"
            },
            {
              "contract": "PancakeERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/core/PancakeERC20.sol:13"
            },
            {
              "contract": "PancakeERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/core/PancakeERC20.sol:14"
            },
            {
              "contract": "PancakeERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/core/PancakeERC20.sol:16"
            },
            {
              "contract": "PancakeERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/core/PancakeERC20.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeFactory": {
        "src": "contracts/core/PancakeFactory.sol:6",
        "version": {
          "withMetadata": "cd70f0fe91f9070c4e926ebeb22906790737d17e32bf5ff1765a519e73348c5c",
          "withoutMetadata": "73d3dcbba90fae5bd1ddda217526e13f49e46301899d743e64b889d5b173020b",
          "linkedWithoutMetadata": "73d3dcbba90fae5bd1ddda217526e13f49e46301899d743e64b889d5b173020b"
        },
        "inherit": [
          "IPancakeFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeFactory",
            "src": "contracts/core/PancakeFactory.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeFactory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/core/PancakeFactory.sol:9"
            },
            {
              "contract": "PancakeFactory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/core/PancakeFactory.sol:10"
            },
            {
              "contract": "PancakeFactory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/core/PancakeFactory.sol:12"
            },
            {
              "contract": "PancakeFactory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/core/PancakeFactory.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakePair": {
        "src": "contracts/core/PancakePair.sol:11",
        "version": {
          "withMetadata": "7ad13c813a954b2f8acc8bf42b9fb23178ef75868c04ecbc9d4b38cd1ad5e734",
          "withoutMetadata": "7ad13c813a954b2f8acc8bf42b9fb23178ef75868c04ecbc9d4b38cd1ad5e734",
          "linkedWithoutMetadata": "7ad13c813a954b2f8acc8bf42b9fb23178ef75868c04ecbc9d4b38cd1ad5e734"
        },
        "inherit": [
          "PancakeERC20",
          "IPancakeERC20",
          "IPancakePair"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakePair",
            "src": "contracts/core/PancakePair.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/core/PancakePair.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakePair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/core/PancakePair.sol:18"
            },
            {
              "contract": "PancakePair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/core/PancakePair.sol:19"
            },
            {
              "contract": "PancakePair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/core/PancakePair.sol:20"
            },
            {
              "contract": "PancakePair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/core/PancakePair.sol:22"
            },
            {
              "contract": "PancakePair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/core/PancakePair.sol:23"
            },
            {
              "contract": "PancakePair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/core/PancakePair.sol:24"
            },
            {
              "contract": "PancakePair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/core/PancakePair.sol:26"
            },
            {
              "contract": "PancakePair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/core/PancakePair.sol:27"
            },
            {
              "contract": "PancakePair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/core/PancakePair.sol:28"
            },
            {
              "contract": "PancakePair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/core/PancakePair.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/core/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeCallee": {
        "src": "contracts/core/interfaces/IPancakeCallee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "pancakeCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeERC20": {
        "src": "contracts/core/interfaces/IPancakeERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/core/libraries/Math.sol:5",
        "version": {
          "withMetadata": "b98dbc8605f8d19e7d9ae84272080b9ecc7c43a1adfc508cbcc318ffd21a34ad",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/core/libraries/SafeMath.sol:5",
        "version": {
          "withMetadata": "1ee8c4f91c0b264351b88c0c48d140b0847b0ea2007f18f3c7bf32f6bb531c69",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/core/libraries/UQ112x112.sol:8",
        "version": {
          "withMetadata": "7d880eb672c2dbcd0e49c5431833332edebc784325ed21c9454c76cead708249",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FixedPoint": {
        "src": "@uniswap/lib/contracts/libraries/FixedPoint.sol:4",
        "version": {
          "withMetadata": "e8adbe7892ee04d92fc174c7cb099c828ccf9a35ed3acf53d1daee8ed6efd068",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap/lib/contracts/libraries/TransferHelper.sol:4",
        "version": {
          "withMetadata": "375ee8e3ed03af030f142ae6f38c0e729ac9796b391405dc878b033992bab425",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts/Staking.sol:267",
        "version": {
          "withMetadata": "472561ebc84fb4cd6fd0ec137b11bdda18027b28f0202586dc9372857a86c42c",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts/Exchange.sol:590",
        "version": {
          "withMetadata": "d1fac2e4470e5da8c299f53f22790f99263186589e6274e4a519bc0bc54426fd",
          "withoutMetadata": "9e90403912052208369d7335bda264e52d9002ff7be0879193e50c6362e58f5d",
          "linkedWithoutMetadata": "9e90403912052208369d7335bda264e52d9002ff7be0879193e50c6362e58f5d"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(string,string)",
          "getOwner()",
          "name()",
          "decimals()",
          "symbol()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts/Exchange.sol:613"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Exchange.sol:594"
            },
            {
              "contract": "BEP20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Exchange.sol:596"
            },
            {
              "contract": "BEP20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/Exchange.sol:598"
            },
            {
              "contract": "BEP20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/Exchange.sol:600"
            },
            {
              "contract": "BEP20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/Exchange.sol:601"
            },
            {
              "contract": "BEP20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts/Exchange.sol:602"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts/Token.sol:125",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockPool": {
        "src": "contracts/Exchange.sol:877",
        "version": {
          "withMetadata": "39c2e7940632ea819fff5093f8beb6ba59777e9f40eb94bdd88e95697a29c63a",
          "withoutMetadata": "cd70c42fbec9ec6fd17d91391ed6bea9d9e13b8d4a2e60da760c63ed418faf2a",
          "linkedWithoutMetadata": "cd70c42fbec9ec6fd17d91391ed6bea9d9e13b8d4a2e60da760c63ed418faf2a"
        },
        "inherit": [
          "BEP20",
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Math"
        ],
        "methods": [
          "(address,address)",
          "getAmountsOut(uint256,address,address)",
          "price(uint256,uint256,uint256)",
          "swap(uint256,address,address)",
          "getRatio(uint256,uint256,uint256,uint256,uint256,uint256)",
          "depositLiquidity(uint256,uint256,uint256,uint256,address,address)",
          "withdrawLiquidity(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockPool",
            "src": "contracts/Exchange.sol:892"
          },
          {
            "kind": "state-variable-assignment",
            "name": "LP_Cake",
            "src": "contracts/Exchange.sol:888"
          },
          {
            "kind": "state-variable-assignment",
            "name": "WBNB",
            "src": "contracts/Exchange.sol:890"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockPool",
              "label": "tokenA",
              "type": "t_address",
              "src": "contracts/Exchange.sol:880"
            },
            {
              "contract": "GrayblockPool",
              "label": "tokenB",
              "type": "t_address",
              "src": "contracts/Exchange.sol:881"
            },
            {
              "contract": "GrayblockPool",
              "label": "totalLiquidity",
              "type": "t_uint256",
              "src": "contracts/Exchange.sol:884"
            },
            {
              "contract": "GrayblockPool",
              "label": "liquidity",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Exchange.sol:885"
            },
            {
              "contract": "GrayblockPool",
              "label": "admins",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Exchange.sol:886"
            },
            {
              "contract": "GrayblockPool",
              "label": "LP_Cake",
              "type": "t_address",
              "src": "contracts/Exchange.sol:888"
            },
            {
              "contract": "GrayblockPool",
              "label": "WBNB",
              "type": "t_address",
              "src": "contracts/Exchange.sol:890"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/IBEP20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Staking.sol:9",
        "version": {
          "withMetadata": "7320d150854030df0a07b4ff390c58c062dbd0f57666f8f8ce784564ae8d9f26",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/Exchange.sol:64",
        "version": {
          "withMetadata": "d2be796166937722131e2494f005658b6c052bc95f28e01c090313542cacb7e6",
          "withoutMetadata": "fb62424eed493332c743d93a0a9ea5db985560a1148681c7a2db917a25681ea0",
          "linkedWithoutMetadata": "fb62424eed493332c743d93a0a9ea5db985560a1148681c7a2db917a25681ea0"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/Exchange.sol:72"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Exchange.sol:65"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Staking.sol:47",
        "version": {
          "withMetadata": "fca59d549b635c8aab78a3ab96bb5724dea1277e7ddd598b61fedb6670a3e087",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "contracts/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "a68d3e9501189764a213e21147d398c8135f98d18b5ac2070200107b8e73d30c",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts/Staking.sol:628",
        "version": {
          "withMetadata": "b2309c1f4d93312c82cfb0b83c6a1827d306f0fdc998fd0b2142d0d9c35e4d44",
          "withoutMetadata": "9cc4b2050352c29ff5c6d82d175ac78c8893c24adbf60cc947595a47dca038b3",
          "linkedWithoutMetadata": "9cc4b2050352c29ff5c6d82d175ac78c8893c24adbf60cc947595a47dca038b3"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts/Staking.sol:651"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:634"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)3036",
              "src": "contracts/Staking.sol:642"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)3036",
              "src": "contracts/Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:645"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:647"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)3036": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/periphery/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts/Staking.sol:530",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts/Staking.sol:551",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/Staking.sol:555"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Staking.sol:552"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:553"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/Staking.sol:587",
        "version": {
          "withMetadata": "a3044aaacd5a04c475a1b9f57612d8cfd29a8b732b71ee69e7a6d028fb6fcca7",
          "withoutMetadata": "2f8777bfc8c47e4c3b1381947cbbfcc37fa31ca9b0565e7a2c9a471babe605ca",
          "linkedWithoutMetadata": "2f8777bfc8c47e4c3b1381947cbbfcc37fa31ca9b0565e7a2c9a471babe605ca"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/Staking.sol:591"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:588"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/Staking.sol:589"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/Staking.sol:487",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/Staking.sol:504"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:502"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/Staking.sol:411",
        "version": {
          "withMetadata": "6e99021925002b667586b1f82a5f63c6a85f41e0592bfbaee115def9596fb59e",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts/Token.sol:167",
        "version": {
          "withMetadata": "e8a0c10bc5cdf8380614a0c8a606b87aacf240706004bfe2320d52ee4b5cee31",
          "withoutMetadata": "d7e8ed31e1333933452bbf73abd671ff44f6a9ace577cf7d65f3e4e2e520437e",
          "linkedWithoutMetadata": "d7e8ed31e1333933452bbf73abd671ff44f6a9ace577cf7d65f3e4e2e520437e"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/Token.sol:186"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Token.sol:168"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Token.sol:170"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/Token.sol:172"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/Token.sol:174"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/Token.sol:175"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "contracts/Token.sol:451",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "contracts/Token.sol:94",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Token": {
        "src": "contracts/Token.sol:485",
        "version": {
          "withMetadata": "8974e03c0dd6909f0b2ee8a701509c8d97d06051e7988ec249da4b7d071b81c0",
          "withoutMetadata": "0ae5b35d6adf818a9660edbab917d17cf9951649af35af18e4695c980f12f5fb",
          "linkedWithoutMetadata": "0ae5b35d6adf818a9660edbab917d17cf9951649af35af18e4695c980f12f5fb"
        },
        "inherit": [
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts/Token.sol:487"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Token",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Token.sol:486"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeCallee": {
        "src": "contracts/core/interfaces/IPancakeCallee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "pancakeCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeERC20": {
        "src": "contracts/core/interfaces/IPancakeERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts/periphery/interfaces/IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts/periphery/interfaces/IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/periphery/interfaces/IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/periphery/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeOracleLibrary": {
        "src": "contracts/periphery/libraries/PancakeOracleLibrary.sol:7",
        "version": {
          "withMetadata": "70e474199e88d8f1d790cf0586a9739359d6af15115cd85582cc4cdc63eaeb6e",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "FixedPoint"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "TransferHelper": {
        "src": "@uniswap/lib/contracts/libraries/TransferHelper.sol:4",
        "version": {
          "withMetadata": "b93a1bbcd60654b51d139a236bb6a9c6a294807b933c65ee2813aebeda428635",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Migrations": {
        "src": "contracts/periphery/Migrations.sol:4",
        "version": {
          "withMetadata": "fcc1887cc5226be1d06f6b737e93a46fd64faceb13c9603f6a621285b1b144a5",
          "withoutMetadata": "f83ed73ce1402332a1a847ef18fd48efca260d7eeedd1f123b53a8297dd6e3e0",
          "linkedWithoutMetadata": "f83ed73ce1402332a1a847ef18fd48efca260d7eeedd1f123b53a8297dd6e3e0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCompleted(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Migrations",
            "src": "contracts/periphery/Migrations.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Migrations",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/periphery/Migrations.sol:5"
            },
            {
              "contract": "Migrations",
              "label": "last_completed_migration",
              "type": "t_uint256",
              "src": "contracts/periphery/Migrations.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeMigrator": {
        "src": "contracts/periphery/PancakeMigrator.sol:11",
        "version": {
          "withMetadata": "0fb82210fd802a443c345ac7e7a9e5245758d9230ff5befc6419ac704c2129e8",
          "withoutMetadata": "71b6f07ac74edb0735674b3eb045c7f4adbeb5649d710da4d3c248e6abe8824c",
          "linkedWithoutMetadata": "71b6f07ac74edb0735674b3eb045c7f4adbeb5649d710da4d3c248e6abe8824c"
        },
        "inherit": [
          "IPancakeMigrator"
        ],
        "libraries": [
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeMigrator",
            "src": "contracts/periphery/PancakeMigrator.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factoryV1",
            "src": "contracts/periphery/PancakeMigrator.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/periphery/PancakeMigrator.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter": {
        "src": "contracts/periphery/PancakeRouter.sol:12",
        "version": {
          "withMetadata": "b97dbdee47c6e316e6ebe6892dd7302b6e0f3c9e295fa5aeddf5a7c24b46bf98",
          "withoutMetadata": "7e17ccaf1bd7a1a5775a2c926f983f7280083593f11a9991a97f5e66d816ba45",
          "linkedWithoutMetadata": "7e17ccaf1bd7a1a5775a2c926f983f7280083593f11a9991a97f5e66d816ba45"
        },
        "inherit": [
          "IPancakeRouter02",
          "IPancakeRouter01"
        ],
        "libraries": [
          "SafeMath",
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter",
            "src": "contracts/periphery/PancakeRouter.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter01": {
        "src": "contracts/periphery/PancakeRouter01.sol:11",
        "version": {
          "withMetadata": "ee5526b3bb96b526956e1d6c6495ccfe25eedcbc60196a55d087fe3363b016ca",
          "withoutMetadata": "ceda2142f7a3879b0c6b6713656dfbdb0c67a2108c87e9bfdf38495e0c4c7a8b",
          "linkedWithoutMetadata": "ceda2142f7a3879b0c6b6713656dfbdb0c67a2108c87e9bfdf38495e0c4c7a8b"
        },
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter01",
            "src": "contracts/periphery/PancakeRouter01.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/periphery/PancakeRouter01.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/periphery/PancakeRouter01.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/periphery/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts/periphery/interfaces/IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts/periphery/interfaces/IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/periphery/interfaces/IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/periphery/interfaces/IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts/periphery/interfaces/V1/IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeLibrary": {
        "src": "contracts/periphery/libraries/PancakeLibrary.sol:7",
        "version": {
          "withMetadata": "b957a538b69b307c0d2d3777de2c399b4aef00a271985fa48f9388cd127a9478",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/periphery/libraries/SafeMath.sol:5",
        "version": {
          "withMetadata": "521a5c17a5153bf0b42d0a118f28d8e435fe89274aa017a77f1b801334c2a37a",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "PancakeERC20": {
        "src": "contracts/core/PancakeERC20.sol:6",
        "version": {
          "withMetadata": "07bcc36fda9a90439c7e0d778227f172c2c9c12b99a7e2bef37893581b13f053",
          "withoutMetadata": "07bcc36fda9a90439c7e0d778227f172c2c9c12b99a7e2bef37893581b13f053",
          "linkedWithoutMetadata": "07bcc36fda9a90439c7e0d778227f172c2c9c12b99a7e2bef37893581b13f053"
        },
        "inherit": [
          "IPancakeERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeERC20",
            "src": "contracts/core/PancakeERC20.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/core/PancakeERC20.sol:12"
            },
            {
              "contract": "PancakeERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/core/PancakeERC20.sol:13"
            },
            {
              "contract": "PancakeERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/core/PancakeERC20.sol:14"
            },
            {
              "contract": "PancakeERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/core/PancakeERC20.sol:16"
            },
            {
              "contract": "PancakeERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/core/PancakeERC20.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeFactory": {
        "src": "contracts/core/PancakeFactory.sol:6",
        "version": {
          "withMetadata": "38b686f8acd6b5036b93d1589266d1db18046e185b3dffa8a398455e8e68b103",
          "withoutMetadata": "c78ada1b86982a5b61df75049b8ca67f84ecf0d3027d4f1ecdf26ab3ee3177d2",
          "linkedWithoutMetadata": "c78ada1b86982a5b61df75049b8ca67f84ecf0d3027d4f1ecdf26ab3ee3177d2"
        },
        "inherit": [
          "IPancakeFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeFactory",
            "src": "contracts/core/PancakeFactory.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeFactory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/core/PancakeFactory.sol:9"
            },
            {
              "contract": "PancakeFactory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/core/PancakeFactory.sol:10"
            },
            {
              "contract": "PancakeFactory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/core/PancakeFactory.sol:12"
            },
            {
              "contract": "PancakeFactory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/core/PancakeFactory.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakePair": {
        "src": "contracts/core/PancakePair.sol:11",
        "version": {
          "withMetadata": "6f59e2a4a56c0b6962ace9a1191d2cd9ff32be0669b90d36c663eadae954314b",
          "withoutMetadata": "6f59e2a4a56c0b6962ace9a1191d2cd9ff32be0669b90d36c663eadae954314b",
          "linkedWithoutMetadata": "6f59e2a4a56c0b6962ace9a1191d2cd9ff32be0669b90d36c663eadae954314b"
        },
        "inherit": [
          "PancakeERC20",
          "IPancakeERC20",
          "IPancakePair"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakePair",
            "src": "contracts/core/PancakePair.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/core/PancakePair.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakePair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/core/PancakePair.sol:18"
            },
            {
              "contract": "PancakePair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/core/PancakePair.sol:19"
            },
            {
              "contract": "PancakePair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/core/PancakePair.sol:20"
            },
            {
              "contract": "PancakePair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/core/PancakePair.sol:22"
            },
            {
              "contract": "PancakePair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/core/PancakePair.sol:23"
            },
            {
              "contract": "PancakePair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/core/PancakePair.sol:24"
            },
            {
              "contract": "PancakePair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/core/PancakePair.sol:26"
            },
            {
              "contract": "PancakePair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/core/PancakePair.sol:27"
            },
            {
              "contract": "PancakePair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/core/PancakePair.sol:28"
            },
            {
              "contract": "PancakePair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/core/PancakePair.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/core/interfaces/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeCallee": {
        "src": "contracts/core/interfaces/IPancakeCallee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "pancakeCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeERC20": {
        "src": "contracts/core/interfaces/IPancakeERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts/core/interfaces/IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts/core/interfaces/IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/core/libraries/Math.sol:5",
        "version": {
          "withMetadata": "8defe6fcaac26c52a74b5b9234f41f495fbb5c50aa004e3c53bac671a625e6fa",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/core/libraries/SafeMath.sol:5",
        "version": {
          "withMetadata": "999f6d47ab6dbbdeeda0a1bd3e93cbfbb35f80cc44532b7ec274fac76ef2c7b5",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/core/libraries/UQ112x112.sol:8",
        "version": {
          "withMetadata": "7f50af7c6519caae5be799500683e6dcf6854b335e53a42a38da57997d14ddca",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Exchange.sol:410",
        "version": {
          "withMetadata": "d639f1a879a8338c290e228c499b586a950978e059d6bd3212625c8b4e2a5830",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts/Exchange.sol:590",
        "version": {
          "withMetadata": "1304fded5257ce9c359f347879ef67d5ef3da8d3ddc9ecb5930ed185ffd13160",
          "withoutMetadata": "e104fb12a7c7a5a86133e38eb0c045e91d1e4f9b0250eeb12d1f48fa794f92ba",
          "linkedWithoutMetadata": "e104fb12a7c7a5a86133e38eb0c045e91d1e4f9b0250eeb12d1f48fa794f92ba"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(string,string)",
          "getOwner()",
          "name()",
          "decimals()",
          "symbol()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts/Exchange.sol:613"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Exchange.sol:594"
            },
            {
              "contract": "BEP20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Exchange.sol:596"
            },
            {
              "contract": "BEP20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/Exchange.sol:598"
            },
            {
              "contract": "BEP20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/Exchange.sol:600"
            },
            {
              "contract": "BEP20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/Exchange.sol:601"
            },
            {
              "contract": "BEP20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts/Exchange.sol:602"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts/Exchange.sol:36",
        "version": {
          "withMetadata": "f65a884fb7331af86faccc5d09c7b6587088d9348f21a8b0f3887fa4168c61c0",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockPool": {
        "src": "contracts/Exchange.sol:877",
        "version": {
          "withMetadata": "57b9f48c43d0d7265f93efc374dd760fafb3b2e74054520b828a5e118d72edee",
          "withoutMetadata": "d7b26f6de7dde501d81a15926858bd087e8fe183d98ae3fc850f4147c3140eb0",
          "linkedWithoutMetadata": "d7b26f6de7dde501d81a15926858bd087e8fe183d98ae3fc850f4147c3140eb0"
        },
        "inherit": [
          "BEP20",
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Math"
        ],
        "methods": [
          "(address,address)",
          "getAmountsOut(uint256,address,address)",
          "price(uint256,uint256,uint256)",
          "swap(uint256,address,address)",
          "getRatio(uint256,uint256,uint256,uint256,uint256,uint256)",
          "depositLiquidity(uint256,uint256,uint256,uint256,address,address)",
          "withdrawLiquidity(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockPool",
            "src": "contracts/Exchange.sol:892"
          },
          {
            "kind": "state-variable-assignment",
            "name": "LP_Cake",
            "src": "contracts/Exchange.sol:888"
          },
          {
            "kind": "state-variable-assignment",
            "name": "WBNB",
            "src": "contracts/Exchange.sol:890"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockPool",
              "label": "tokenA",
              "type": "t_address",
              "src": "contracts/Exchange.sol:880"
            },
            {
              "contract": "GrayblockPool",
              "label": "tokenB",
              "type": "t_address",
              "src": "contracts/Exchange.sol:881"
            },
            {
              "contract": "GrayblockPool",
              "label": "totalLiquidity",
              "type": "t_uint256",
              "src": "contracts/Exchange.sol:884"
            },
            {
              "contract": "GrayblockPool",
              "label": "liquidity",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Exchange.sol:885"
            },
            {
              "contract": "GrayblockPool",
              "label": "admins",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Exchange.sol:886"
            },
            {
              "contract": "GrayblockPool",
              "label": "LP_Cake",
              "type": "t_address",
              "src": "contracts/Exchange.sol:888"
            },
            {
              "contract": "GrayblockPool",
              "label": "WBNB",
              "type": "t_address",
              "src": "contracts/Exchange.sol:890"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/Exchange.sol:124",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Exchange.sol:5",
        "version": {
          "withMetadata": "1f78bfca94154530c655b93b925ca0e05cc6ca3dd319a00c20044d59a50d9993",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/Exchange.sol:64",
        "version": {
          "withMetadata": "ac7c18f82364a02cc402f9f05e383292e0d67b46c2fa219576bc1cf234cc4da7",
          "withoutMetadata": "452909145f20ad1f1b11af965b8689c5b73fa17c160b73598934aa56d8719df3",
          "linkedWithoutMetadata": "452909145f20ad1f1b11af965b8689c5b73fa17c160b73598934aa56d8719df3"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/Exchange.sol:72"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Exchange.sol:65"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Exchange.sol:233",
        "version": {
          "withMetadata": "1e04829cb7fc31e20cf905dcb0d4a43c4ea1cb59a49fa7c590373b96d97cbd60",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Exchange.sol:410",
        "version": {
          "withMetadata": "cac7b0945ee639911eec6028ec30e915c8b90b776cd4a7671302bd9207253ae0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts/Exchange.sol:590",
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "getOwner()",
          "name()",
          "decimals()",
          "symbol()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts/Exchange.sol:613"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Exchange.sol:594"
            },
            {
              "contract": "BEP20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Exchange.sol:596"
            },
            {
              "contract": "BEP20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/Exchange.sol:598"
            },
            {
              "contract": "BEP20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/Exchange.sol:600"
            },
            {
              "contract": "BEP20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/Exchange.sol:601"
            },
            {
              "contract": "BEP20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts/Exchange.sol:602"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts/Exchange.sol:36",
        "version": {
          "withMetadata": "9bfcc4b73eabca407ff7ca6aa67b0a6d497e6d30cd07e7a28139051b9c8928e9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockPool": {
        "src": "contracts/Exchange.sol:877",
        "version": {
          "withMetadata": "9f1a6e034ea2e7973faf8e5c276c34a3d7b85583f7b9e68eec6c6f4e7245d73f",
          "withoutMetadata": "842a53c91866ad61d9601049dcafb31bf5b4974ccb01f0076e1f7d7faca725e4",
          "linkedWithoutMetadata": "842a53c91866ad61d9601049dcafb31bf5b4974ccb01f0076e1f7d7faca725e4"
        },
        "inherit": [
          "BEP20",
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Math"
        ],
        "methods": [
          "(address,address)",
          "getAmountsOut(uint256,uint256,uint256)",
          "price(uint256,uint256,uint256)",
          "swap(uint256,address,address)",
          "getRatio(uint256,uint256,uint256,uint256,uint256,uint256)",
          "depositLiquidity(uint256,uint256,uint256,uint256,address,address)",
          "withdrawLiquidity(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockPool",
            "src": "contracts/Exchange.sol:892"
          },
          {
            "kind": "state-variable-assignment",
            "name": "LP_Cake",
            "src": "contracts/Exchange.sol:888"
          },
          {
            "kind": "state-variable-assignment",
            "name": "WBNB",
            "src": "contracts/Exchange.sol:890"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockPool",
              "label": "tokenA",
              "type": "t_address",
              "src": "contracts/Exchange.sol:880"
            },
            {
              "contract": "GrayblockPool",
              "label": "tokenB",
              "type": "t_address",
              "src": "contracts/Exchange.sol:881"
            },
            {
              "contract": "GrayblockPool",
              "label": "totalLiquidity",
              "type": "t_uint256",
              "src": "contracts/Exchange.sol:884"
            },
            {
              "contract": "GrayblockPool",
              "label": "liquidity",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Exchange.sol:885"
            },
            {
              "contract": "GrayblockPool",
              "label": "admins",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Exchange.sol:886"
            },
            {
              "contract": "GrayblockPool",
              "label": "LP_Cake",
              "type": "t_address",
              "src": "contracts/Exchange.sol:888"
            },
            {
              "contract": "GrayblockPool",
              "label": "WBNB",
              "type": "t_address",
              "src": "contracts/Exchange.sol:890"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/Exchange.sol:124",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Exchange.sol:5",
        "version": {
          "withMetadata": "9e8b1c8c4213821321cd39e8afe3a2fb7b2235bfd1818874c12a725ad6bd20b8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/Exchange.sol:64",
        "version": {
          "withMetadata": "60b161495f39a78b8e3cb41004cfdb1c007e459230846943f083cbe6ca73c452",
          "withoutMetadata": "452909145f20ad1f1b11af965b8689c5b73fa17c160b73598934aa56d8719df3",
          "linkedWithoutMetadata": "452909145f20ad1f1b11af965b8689c5b73fa17c160b73598934aa56d8719df3"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/Exchange.sol:72"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Exchange.sol:65"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Exchange.sol:233",
        "version": {
          "withMetadata": "40970de45b6d15b20534a420d108fcfb97dd2f9ed4dc22c3436c567d8e0399a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts/Token.sol:125",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts/Token.sol:167",
        "version": {
          "withMetadata": "f4205bb60f54bdcb28aa012932cda3ecda3d6c10b3bb11417e6423606a7ddf8b",
          "withoutMetadata": "c13972cf16f63fa8ca0170d925a4b581981f7bf6f86f1cbcb2ee97d20e24d203",
          "linkedWithoutMetadata": "c13972cf16f63fa8ca0170d925a4b581981f7bf6f86f1cbcb2ee97d20e24d203"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/Token.sol:186"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Token.sol:168"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Token.sol:170"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/Token.sol:172"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/Token.sol:174"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/Token.sol:175"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "contracts/Token.sol:451",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Token.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "contracts/Token.sol:94",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Token": {
        "src": "contracts/Token.sol:485",
        "version": {
          "withMetadata": "ecaedcc34e848195f689a516561d831f86d90fb4a74d41ee5f7ab5e99075e749",
          "withoutMetadata": "0cca8f5c1eb0dab8f970e0e6d3aca4e20c3d05f43132ab35e16e67e4265dc8ed",
          "linkedWithoutMetadata": "0cca8f5c1eb0dab8f970e0e6d3aca4e20c3d05f43132ab35e16e67e4265dc8ed"
        },
        "inherit": [
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts/Token.sol:487"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Token",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Token.sol:486"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/Staking.sol:267",
        "version": {
          "withMetadata": "64b6652e44edf561421d2fc32b954c5aea34720683963da7cf19d6beaa9b0f92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts/Staking.sol:628",
        "version": {
          "withMetadata": "92a5e65964baf3a75b9fa77472be6b12da330c6cbf08dba36678b584c389e32e",
          "withoutMetadata": "3858e89bfa13866fd838ca843b3b7d9a17fb5f5494618de5d6015f15af6405f3",
          "linkedWithoutMetadata": "3858e89bfa13866fd838ca843b3b7d9a17fb5f5494618de5d6015f15af6405f3"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts/Staking.sol:651"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:634"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)342",
              "src": "contracts/Staking.sol:642"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)342",
              "src": "contracts/Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:645"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Staking.sol:647"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)342": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Staking.sol:193",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts/Staking.sol:530",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/Staking.sol:9",
        "version": {
          "withMetadata": "5cbd8db2b9984f54c605b5826dd877dfb379f1e46e048d6e6f1868cec572609e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts/Staking.sol:551",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/Staking.sol:555"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Staking.sol:552"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts/Staking.sol:553"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/Staking.sol:587",
        "version": {
          "withMetadata": "c821ab0bc1a625c18541886c12c9ad51275cd50fc9301dcdf6fddd3e8431e81e",
          "withoutMetadata": "b9bb4d7bdfe108932f9727cc49d18f7fee480e4ea7b61408b410b48a2339204c",
          "linkedWithoutMetadata": "b9bb4d7bdfe108932f9727cc49d18f7fee480e4ea7b61408b410b48a2339204c"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts/Staking.sol:591"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:588"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/Staking.sol:589"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts/Staking.sol:487",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts/Staking.sol:504"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/Staking.sol:502"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/Staking.sol:411",
        "version": {
          "withMetadata": "9918704c33e6832117651a4fb3a5d1d4dd5ab55a3209d41256cd6bc142fe030f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Staking.sol:47",
        "version": {
          "withMetadata": "fd8b5aae7d9a2ce8b50acbc8d7441bb40c13b71a0958c1258082032973255716",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "GrayblockPool": {
        "src": "contracts/Exchange.sol:6",
        "version": {
          "withMetadata": "3e0894344cede1ccdb5059007fd424daa37e7acd6b31d0d7bf08195be3915007",
          "withoutMetadata": "89c712e7c788f892619e860c4d4e4ec68648b5429d66c5c9b83790a94186f143",
          "linkedWithoutMetadata": "89c712e7c788f892619e860c4d4e4ec68648b5429d66c5c9b83790a94186f143"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "(address)",
          "init(uint256,uint256)",
          "initTest()",
          "price(uint256,uint256,uint256)",
          "WBNBToToken(uint256)",
          "tokenToWBNB(uint256)",
          "WBNBToTokenTest(uint256)",
          "tokenToWBNBTest(uint256)",
          "getWBNB()",
          "getToken()",
          "getliquiduty(address)",
          "setInvested(bool)",
          "setStrategy(address payable)",
          "getStrategy(address)",
          "gettInvested()",
          "depositLiquidity(uint256)",
          "withdrawLiquidity(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockPool",
            "src": "contracts/Exchange.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "LP_Cake",
            "src": "contracts/Exchange.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "WBNB",
            "src": "contracts/Exchange.sol:16"
          },
          {
            "kind": "state-variable-assignment",
            "name": "WBNBtoken",
            "src": "contracts/Exchange.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockPool",
              "label": "token",
              "type": "t_contract(IBEP20)851",
              "src": "contracts/Exchange.sol:9"
            },
            {
              "contract": "GrayblockPool",
              "label": "totalLiquidity",
              "type": "t_uint256",
              "src": "contracts/Exchange.sol:10"
            },
            {
              "contract": "GrayblockPool",
              "label": "liquidity",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Exchange.sol:11"
            },
            {
              "contract": "GrayblockPool",
              "label": "admins",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Exchange.sol:12"
            },
            {
              "contract": "GrayblockPool",
              "label": "LP_Cake",
              "type": "t_address",
              "src": "contracts/Exchange.sol:14"
            },
            {
              "contract": "GrayblockPool",
              "label": "WBNB",
              "type": "t_address",
              "src": "contracts/Exchange.sol:16"
            },
            {
              "contract": "GrayblockPool",
              "label": "WBNBtoken",
              "type": "t_contract(IBEP20)851",
              "src": "contracts/Exchange.sol:17"
            },
            {
              "contract": "GrayblockPool",
              "label": "invested",
              "type": "t_bool",
              "src": "contracts/Exchange.sol:18"
            },
            {
              "contract": "GrayblockPool",
              "label": "strategy",
              "type": "t_address_payable",
              "src": "contracts/Exchange.sol:19"
            }
          ],
          "types": {
            "t_contract(IBEP20)851": {
              "label": "contract IBEP20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/IBEP20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "contracts/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "ca9fef8b84c0dd75c44f122737b6bde98d19d20227c14ffcf9b30d3372dedd46",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}